% This file was created with JabRef 2.10.
% Encoding: UTF-8


@Book{Stuikys2015,
  Title                    = {Smart learning objects for smart education in computer science: Theory, methodology and robot-based implementation},
  Author                   = {{\v{S}}tuikys, Vytautas},
  Publisher                = {Springer International Publishing},
  Year                     = {2015},
  Month                    = {jan},

  Abstract                 = {This monograph presents the challenges, vision and context to design smart learning objects (SLOs) through Computer Science (CS) education modelling and feature model transformations. It presents the latest research on the meta-programming-based generative learning objects (the latter with advanced features are treated as SLOs) and the use of educational robots in teaching CS topics. The introduced methodology includes the overall processes to develop SLO and smart educational environment (SEE) and integrates both into the real education setting to provide teaching in CS using constructivist and project-based approaches along with evaluation of pedagogic outcomes. Smart Learning Objects for Smart Education in Computer Science will appeal to researchers in CS education particularly those interested in using robots in teaching, course designers and educational software and tools developers. With research and exercise questions at the end of each chapter students studying CS related courses will find this work informative and valuable too.},
  Doi                      = {10.1007/978-3-319-16913-2},
  ISBN                     = {9783319169132},
  Pages                    = {1--315}
}

@InProceedings{Abbasi2014,
  Title                    = {Reverse engineering web configurators},
  Author                   = {Abbasi, Ebrahim Khalil and Acher, Mathieu and Heymans, Patrick and Cleve, Anthony},
  Year                     = {2014},
  Pages                    = {264--273},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {A Web configurator offers a highly interactive environment to assist users in customising sales products through the selection of configuration options. Our previous empirical study revealed that a significant number of configurators are suboptimal in reliability, efficiency, and maintainability, opening avenues for re-engineering support and methodologies. This paper presents a tool-supported reverse-engineering process to semi-automatically extract configuration-specific data from a legacy Web configurator. The extracted and structured data is stored in formal models (e.g., variability models) and can be used in a forward-engineering process to generate a customized interface with an underlying reliable reasoning engine. Two major components are presented: (1) a Web Wrapper that extracts structured configuration-specific data from unstructured or semistructured Web pages of a configurator, and (2) a Web Crawler that explores the 'configuration space' (i.e., all objects representing configuration-specific data) and simulates users' configuration actions. We describe variability data extraction patterns, used on top of the Wrapper and the Crawler to extract configuration data. Experimental results on five existing Web configurators show that the specification of a few variability patterns enable the identification of hundreds of options. {\textcopyright} 2014 IEEE.},
  Doi                      = {10.1109/CSMR-WCRE.2014.6747178}
}

@InProceedings{Acher2014,
  Title                    = {Customization and 3D printing: A challenging playground for software product lines},
  Author                   = {Acher, Mathieu and Baudry, Benoit and Barais, Olivier and J{\'{e}}z{\'{e}}quel, Jean Marc},
  Year                     = {2014},
  Month                    = {sep},
  Pages                    = {142--146},
  Publisher                = {Association for Computing Machinery},
  Volume                   = {1},

  Abstract                 = {3D printing is gaining more and more momentum to build customized product in a wide variety of fields. We conduct an exploratory study of Thingiverse, the most popular Website for sharing user-created 3D design files, in order to establish a possible connection with software product line (SPL) engineering. We report on the socio-technical aspects and current practices for modeling variability, implementing variability, configuring and deriving products, and reusing artefacts. We provide hints that SPL-alike techniques are practically used in 3D printing and thus relevant. Finally, we discuss why the customization in the 3D printing field represents a challenging playground for SPL engineering. Copyright 2014 ACM.},
  Doi                      = {10.1145/2648511.2648526},
  ISBN                     = {9781450327404}
}

@Article{Acher2014a,
  Title                    = {Extraction and evolution of architectural variability models in plugin-based systems},
  Author                   = {Acher, Mathieu and Cleve, Anthony and Collet, Philippe and Merle, Philippe and Duchien, Laurence and Lahire, Philippe},
  Year                     = {2014},

  Month                    = {sep},
  Number                   = {4},
  Pages                    = {1367--1394},
  Volume                   = {13},

  Abstract                 = {Variability management is a key issue when building and evolving software-intensive systems, making it possible to extend, configure, customize and adapt such systems to customers' needs and specific deployment contexts. A wide form of variability can be found in extensible software systems, typically built on top of plugin-based architectures that offer a (large) number of configuration options through plugins. In an ideal world, a software architect should be able to generate a system variant on-demand, corresponding to a particular assembly of plugins. To this end, the variation points and constraints between architectural elements should be properly modeled and maintained over time (i.e., for each version of an architecture). A crucial, yet error-prone and time-consuming, task for a software architect is to build an accurate representation of the variability of an architecture, in order to prevent unsafe architectural variants and reach the highest possible level of flexibility. In this article, we propose a reverse engineering process for producing a variability model (i.e., a feature model) of a plugin-based architecture. We develop automated techniques to extract and combine different variability descriptions, including a hierarchical software architecture model, a plugin dependency model and the software architect knowledge. By computing and reasoning about differences between versions of architectural feature models, software architect can control both the variability extraction and evolution processes. The proposed approach has been applied to a representative, large-scale plugin-based system (FraSCAti), considering different versions of its architecture. We report on our experience in this context.},
  Doi                      = {10.1007/s10270-013-0364-2},
  ISSN                     = {16191374},
  Publisher                = {Springer Verlag}
}

@InProceedings{Acher2011,
  Title                    = {Reverse engineering architectural feature models},
  Author                   = {Acher, Mathieu and Cleve, Anthony and Collet, Philippe and Merle, Philippe and Duchien, Laurence and Lahire, Philippe},
  Year                     = {2011},
  Pages                    = {220--235},
  Volume                   = {6903 LNCS},

  Abstract                 = {Reverse engineering the variability of an existing system is a challenging activity. The architect knowledge is essential to identify variation points and explicit constraints between features, for instance in feature models (FMs), but the manual creation of FMs is both time-consuming and error-prone. On a large scale, it is very difficult for an architect to guarantee that the resulting FM is consistent with the architecture it is associated with. In this paper, we present a comprehensive, tool supported process for reverse engineering architectural FMs. We develop automated techniques to extract and combine different variability descriptions of an architecture. Then, alignment and reasoning techniques are applied to integrate the architect knowledge and reinforce the extracted FM. We illustrate the process when applied to a representative software system and we report on our experience in this context. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-23798-0_25},
  ISBN                     = {9783642237973},
  ISSN                     = {03029743}
}

@InProceedings{Acher2012,
  Title                    = {On extracting feature models from product descriptions},
  Author                   = {Acher, Mathieu and Cleve, Anthony and Perrouin, Gilles and Heymans, Patrick and Vanbeneden, Charles and Collet, Philippe and Lahire, Philippe},
  Year                     = {2012},
  Pages                    = {45--54},

  Abstract                 = {In product line engineering, domain analysis is the process of analyzing related products to identify their common and variable features. This process is generally carried out by experts on the basis of existing product descriptions, which are expressed in a more or less structured way. Modeling and reasoning about product descriptions are error-prone and time consuming tasks. Feature models (FMs) constitute popular means to specify product commonalities and variabilities in a compact way, and to provide automated support to the domain analysis process. This paper aims at easing the transition from product descriptions expressed in a tabular format to FMs accurately representing them. This process is parameterized through a dedicated language and high-level directives (e.g., products/features scoping). We guarantee that the resulting FM represents the set of legal feature combinations supported by the considered products and has a readable tree hierarchy together with variability information. We report on our experiments based on public data and characterize the properties of the derived FMs. Copyright 2012 ACM.},
  Doi                      = {10.1145/2110147.2110153},
  ISBN                     = {9781450310581}
}

@Article{Acher2012a,
  Title                    = {Composing multiple variability artifacts to assemble coherent workflows},
  Author                   = {Acher, Mathieu and Collet, Philippe and Gaignard, Alban and Lahire, Philippe and Montagnat, Johan and France, Robert B.},
  Year                     = {2012},

  Month                    = {sep},
  Number                   = {3-4},
  Pages                    = {689--734},
  Volume                   = {20},

  Abstract                 = {The development of scientific workflows is evolving toward the systematic use of service-oriented architectures, enabling the composition of dedicated and highly parameterized software services into processing pipelines. Building consistent workflows then becomes a cumbersome and error-prone activity as users cannot manage such large-scale variability. This paper presents a rigorous and tooled approach in which techniques from Software Product Line (SPL) engineering are reused and extended to manage variability in service and workflow descriptions. Composition can be facilitated while ensuring consistency. Services are organized in a rich catalog which is organized as a SPL and structured according to the common and variable concerns captured for all services. By relying on sound merging techniques on the feature models that make up the catalog, reasoning about the compatibility between connected services is made possible. Moreover, an entire workflow is then seen as a multiple SPL (i. e., a composition of several SPLs). When services are configured within, the propagation of variability choices is then automated with appropriate techniques and the user is assisted in obtaining a consistent workflow. The approach proposed is completely supported by a combination of dedicated tools and languages. Illustrations and experimental validations are provided using medical imaging pipelines, which are representative of current scientific workflows in many domains. {\textcopyright} 2011 Springer Science+Business Media, LLC.},
  Doi                      = {10.1007/s11219-011-9170-7},
  ISSN                     = {09639314}
}

@InProceedings{Acher2013,
  Title                    = {FAMILIAR: A domain-specific language for large scale management of feature models},
  Author                   = {Acher, Mathieu and Collet, Philippe and Lahire, Philippe and France, Robert B.},
  Year                     = {2013},
  Month                    = {jun},
  Number                   = {6},
  Pages                    = {657--681},
  Volume                   = {78},

  Abstract                 = {The feature model formalism has become the de facto standard for managing variability in software product lines (SPLs). In practice, developing an SPL can involve modeling a large number of features representing different viewpoints, sub-systems or concerns of the software system. This activity is generally tedious and error-prone. In this article, we present FAMILIAR a Domain-Specific Language (DSL) that is dedicated to the large scale management of feature models and that complements existing tool support. The language provides a powerful support for separating concerns in feature modeling, through the provision of composition and decomposition operators, reasoning facilities and scripting capabilities with modularization mechanisms. We illustrate how an SPL consisting of medical imaging services can be practically managed using reusable FAMILIAR scripts that implement reasoning mechanisms. We also report on various usages and applications of FAMILIAR and its operators, to demonstrate their applicability to different domains and use for different purposes. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.scico.2012.12.004},
  ISSN                     = {01676423}
}

@InProceedings{Acher2012b,
  Title                    = {Separation of concerns in feature modeling: Support and applications},
  Author                   = {Acher, Mathieu and Collet, Philippe and Lahire, Philippe and France, Robert B.},
  Year                     = {2012},
  Pages                    = {1--12},

  Abstract                 = {Feature models (FMs) are a popular formalism for describing the commonality and variability of software product lines (SPLs) in terms of features. SPL development increasingly involves manipulating many large FMs, and thus scalable modular techniques that support compositional development of complex SPLs are required. In this paper, we describe how a set of complementary operators (aggregate, merge, slice) provides practical support for separation of concerns in feature modeling. We show how the combination of these operators can assist in tedious and error prone tasks such as automated correction of FM anomalies, update and extraction of FM views, reconciliation of FMs and reasoning about properties of FMs. For each task, we report on practical applications in different domains. We also present a technique that can efficiently decompose FMs with thousands of features and report our experimental results. {\textcopyright} 2012 ACM.},
  Doi                      = {10.1145/2162049.2162051},
  ISBN                     = {9781450310925}
}

@InProceedings{Acher2011a,
  Title                    = {Slicing feature models},
  Author                   = {Acher, Mathieu and Collet, Philippe and Lahire, Philippe and France, Robert B.},
  Year                     = {2011},
  Pages                    = {424--427},

  Abstract                 = {Feature models (FMs) are a popular formalism for describing the commonality and variability of software product lines (SPLs) in terms of features. As SPL development increasingly involves numerous large FMs, scalable modular techniques are required to manage their complexity. In this paper, we present a novel slicing technique that produces a projection of an FM, including constraints. The slicing allows SPL practitioners to find semantically meaningful decompositions of FMs and has been integrated into the FAMILIAR language. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ASE.2011.6100089},
  ISBN                     = {9781457716393}
}

@InProceedings{Acher2011b,
  Title                    = {Decomposing feature models: Language, environment, and applications},
  Author                   = {Acher, Mathieu and Collet, Philippe and Lahire, Philippe and France, Robert B.},
  Year                     = {2011},
  Pages                    = {600--603},

  Abstract                 = {Variability in software product lines is often expressed through feature models (FMs). To handle the complexity of increasingly larger FMs, we propose semantically meaningful decomposition support through a slicing operator. We describe how the slicing operator is integrated into the FAMILIAR environment and how it can be combined with other operators to support complex tasks over FMs in different case studies. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ASE.2011.6100135},
  ISBN                     = {9781457716393}
}

@InProceedings{Acher2011c,
  Title                    = {Modeling variability from requirements to runtime},
  Author                   = {Acher, Mathieu and Collet, Philippe and Lahire, Philippe and Moisan, Sabine and Rigault, Jean Paul},
  Year                     = {2011},
  Pages                    = {77--86},

  Abstract                 = {In software product line (SPL) engineering, a software configuration can be obtained through a valid selection of features represented in a feature model (FM). With a strong separation between requirements and reusable components and a deep impact of high level choices on technical parts, determining and configuring an well-adapted software configuration is a long, cumbersome and error-prone activity. This paper presents a modeling process in which variability sources are separated in different FMs and inter-related by propositional constraints while consistency checking and propagation of variability choices are automated. We show how the variability requirements can be expressed and then refined at design time so that the set of valid software configurations to be considered at runtime may be highly reduced. Software tools support the approach and some experimentations on a video surveillance SPL are also reported. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ICECCS.2011.15},
  ISBN                     = {9780769543819}
}

@InProceedings{Acher2013a,
  Title                    = {Composing your compositions of variability models},
  Author                   = {Acher, Mathieu and Combemale, Benoit and Collet, Philippe and Barais, Olivier and Lahire, Philippe and France, Robert B.},
  Year                     = {2013},
  Pages                    = {352--369},
  Volume                   = {8107 LNCS},

  Abstract                 = {Modeling and managing variability is a key activity in a growing number of software engineering contexts. Support for composing variability models is arising in many engineering scenarios, for instance, when several subsystems or modeling artifacts, each coming with their own variability and possibly developed by different stakeholders, should be combined together. In this paper, we consider the problem of composing feature models (FMs), a widely used formalism for representing and reasoning about a set of variability choices. We show that several composition operators can actually be defined, depending on both matching/ merging strategies and semantic properties expected in the composed FM. We present four alternative forms and their implementations. We discuss their relative trade-offs w.r.t. reasoning, customizability, traceability, composability and quality of the resulting feature diagram. We summarize these findings in a reading grid which is validated by revisiting some relevant existing works. Our contribution should assist developers in choosing and implementing the right composition operators. {\textcopyright} 2013 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-41533-3_22},
  ISBN                     = {9783642415326},
  ISSN                     = {03029743}
}

@InProceedings{Acher2012c,
  Title                    = {Feature model differences},
  Author                   = {Acher, Mathieu and Heymans, Patrick and Collet, Philippe and Quinton, Cl{\'{e}}ment and Lahire, Philippe and Merle, Philippe},
  Year                     = {2012},
  Pages                    = {629--645},
  Volume                   = {7328 LNCS},

  Abstract                 = {Feature models are a widespread means to represent commonality and variability in software product lines. As is the case for other kinds of models, computing and managing feature model differences is useful in various real-world situations. In this paper, we propose a set of novel differencing techniques that combine syntactic and semantic mechanisms, and automatically produce meaningful differences. Practitioners can exploit our results in various ways: to understand, manipulate, visualize and reason about differences. They can also combine them with existing feature model composition and decomposition operators. The proposed automations rely on satisfiability algorithms. They come with a dedicated language and a comprehensive environment. We illustrate and evaluate the practical usage of our techniques through a case study dealing with a configurable component framework. {\textcopyright} 2012 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-31095-9_41},
  ISBN                     = {9783642310942},
  ISSN                     = {03029743}
}

@InProceedings{Alferez2011,
  Title                    = {Supporting consistency checking between features and software product line use scenarios},
  Author                   = {Alf{\'{e}}rez, Mauricio and Lopez-Herrejon, Roberto E. and Moreira, Ana and Amaral, Vasco and Egyed, Alexander},
  Year                     = {2011},
  Pages                    = {20--35},
  Volume                   = {6727 LNCS},

  Abstract                 = {A key aspect for effective variability modeling of Software Product Lines (SPL) is to harmonize the need to achieve separation of concerns with the need to satisfy consistency of requirements and constraints. Techniques for variability modeling such as feature models used together with use scenarios help to achieve separation of stakeholders' concerns but ensuring their joint consistency is largely unsupported. Therefore, inconsistent assumptions about system's expected use scenarios and the way in which they vary according to the presence or absence of features reduce the models usefulness and possibly renders invalid SPL systems. In this paper we propose an approach to check consistency - the verification of semantic relationships among the models - between features and use scenarios that realize them. The novelty of this approach is that it is specially tailored for the SPL domain and considers complex composition situations where the customization of use scenarios for specific products depends on the presence or absence of sets of features. We illustrate our approach and supporting tools using variant constructs that specify how the inclusion of sets of variable features (that refer to uncommon requirements between products of a SPL) adapt use scenarios related to other features. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-21347-2_3},
  ISBN                     = {9783642213465},
  ISSN                     = {03029743}
}

@InProceedings{Al-Hajjaji2014,
  Title                    = {Similarity-based prioritization in software product-line testing},
  Author                   = {Al-Hajjaji, Mustafa and Th{\"{u}}m, Thomas and Meinicke, Jens and Lochau, Malte and Saake, Gunter},
  Year                     = {2014},
  Month                    = {sep},
  Pages                    = {197--206},
  Publisher                = {Association for Computing Machinery},
  Volume                   = {1},

  Abstract                 = {Exhaustively testing every product of a software product line (SPL) is a difficult task due to the combinatorial explosion of the number of products. Combinatorial interaction testing is a technique to reduce the number of products under test. However, it is typically up-to the tester in which order these products are tested. We propose a similarity-based prioritization to be applied on these products before they are generated. The proposed approach does not guarantee to find more errors than sampling approaches, but it aims at increasing interaction coverage of an SPL under test as fast as possible over time. This is especially beneficial since usually the time budget for testing is limited. We implemented similarity-based prioritization in FeatureIDE and evaluated it by comparing its outcome to the default outcome of three sampling algorithms as well as to random orders. The experiment results indicate that the order with similarity-based prioritization is better than random orders and often better than the default order of existing sampling algorithms. Copyright 2014 ACM.},
  Doi                      = {10.1145/2648511.2648532},
  ISBN                     = {9781450327404}
}

@InProceedings{Andersen2012,
  Title                    = {Efficient synthesis of feature models},
  Author                   = {Andersen, Nele and Czarnecki, Krzysztof and She, Steven and Wa̧sowski, Andrzej},
  Year                     = {2012},
  Pages                    = {106--115},
  Volume                   = {1},

  Abstract                 = {Variability modeling, and in particular feature modeling, is a central element of model-driven software product line architectures. Such architectures often emerge from legacy code, but, unfortunately creating feature models from large, legacy systems is a long and arduous task. We address the problem of automatic synthesis of feature models from propositional constraints. We show that this problem is NP-hard. We design efficient techniques for synthesis of models from respectively CNF and DNF formulas, showing a 10- to 1000-fold performance improvement over known techniques for realistic benchmarks. Our algorithms are the first known techniques that are efficient enough to be applied to dependencies extracted from real systems, opening new possibilities of creating reverse engineering and model management tools for variability models. We discuss several such scenarios in the paper. Copyright {\textcopyright} 2012 ACM.},
  Doi                      = {10.1145/2362536.2362553},
  ISBN                     = {9781450310956}
}

@Article{Andres2013,
  Title                    = {A formal framework for software product lines},
  Author                   = {Andr{\'{e}}s, C{\'{e}}sar and Camacho, Carlos and Llana, Luis},
  Year                     = {2013},

  Month                    = {nov},
  Number                   = {11},
  Pages                    = {1925--1947},
  Volume                   = {55},

  Abstract                 = {Context A Software Product Line is a set of software systems that are built from a common set of features. These systems are developed in a prescribed way and they can be adapted to fit the needs of customers. Feature models specify the properties of the systems that are meaningful to customers. A semantics that models the feature level has the potential to support the automatic analysis of entire software product lines. Objective The objective of this paper is to define a formal framework for Software Product Lines. This framework needs to be general enough to provide a formal semantics for existing frameworks like FODA (Feature Oriented Domain Analysis), but also to be easily adaptable to new problems. Method We define an algebraic language, called SPLA, to describe Software Product Lines. We provide the semantics for the algebra in three different ways. The approach followed to give the semantics is inspired by the semantics of process algebras. First we define an operational semantics, next a denotational semantics, and finally an axiomatic semantics. We also have defined a representation of the algebra into propositional logic. Results We prove that the three semantics are equivalent. We also show how FODA diagrams can be automatically translated into SPLA. Furthermore, we have developed our tool, called AT, that implements the formal framework presented in this paper. This tool uses a SAT-solver to check the satisfiability of an SPL. Conclusion This paper defines a general formal framework for software product lines. We have defined three different semantics that are equivalent; this means that depending on the context we can choose the most convenient approach: operational, denotational or axiomatic. The framework is flexible enough because it is closely related to process algebras. Process algebras are a well-known paradigm for which many extensions have been defined. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2013.05.005},
  ISSN                     = {09505849}
}

@InProceedings{Apel2010,
  Title                    = {Language-independent reference checking in software product lines},
  Author                   = {Apel, Sven and Scholz, Wolfgang and Lengauer, Christian and K{\"{a}}stner, Christian},
  Year                     = {2010},
  Pages                    = {65--71},

  Abstract                 = {Feature-Oriented Software Development (FOSD) is a paradigm for the development of software product lines. A challenge in FOSD is to guarantee that all software systems of a software product line are correct. Recent work on type checking product lines can provide a guarantee of type correctness without generating all possible systems. We generalize previous results by abstracting from the specifics of particular programming languages. In a first attempt, we present a reference-checking algorithm that performs key tasks of product-line type checking independently of the target programming language. Experiments with two sample product lines written in Java and C are encouraging and give us confidence that this approach is promising. {\textcopyright} 2010 ACM.},
  Doi                      = {10.1145/1868688.1868698},
  ISBN                     = {9781450302081}
}

@InProceedings{Arcaini2015,
  Title                    = {Generating tests for detecting faults in feature models},
  Author                   = {Arcaini, Paolo and Gargantini, Angelo and Vavassori, Paolo},
  Year                     = {2015},
  Month                    = {may},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {We present a novel fault-based approach for testing feature models (FMs). We identify several fault classes that represent possible mistakes one can make during feature modeling. We introduce the concept of distinguishing configuration, i.e., a configuration that is able to detect a given fault. Starting from this definition, we devise a technique, based on the use of a logic solver, able either to find distinguishing configurations to be used as tests or to prove that a mutation produces an equivalent feature model. Compact test suites can be produced by exploiting an SMT solver. The experiments show that our methodology is viable and produces reasonable sized test suites in a short time. W.r.t. the approaches that use only the products, our approach has a better fault detection capability and requires fewer tests.},
  Doi                      = {10.1109/ICST.2015.7102591},
  ISBN                     = {9781479971251}
}

@InProceedings{Bottcher2014,
  Title                    = {From formal requirements on technical systems to complete designs-a holistic approach},
  Author                   = {B{\"{o}}ttcher, Bj{\"{o}}rn and Moriz, Natalia and Niggemann, Oliver},
  Year                     = {2014},
  Pages                    = {977--978},
  Publisher                = {IOS Press},
  Volume                   = {263},

  Abstract                 = {The design processes of todays more and more complex automation systems require computer-based support to maintain their manageability. As a base for that, the authors introduce a holistic design approach for these systems. Requirements on the system to be designed are represented by an extended feature model which serves as consistent requirements model during the entire design process. A grammar-based synthesis applies formalised expert knowledge to generate solutions to these requirements. The paper's main contribution is to combine formalisms from overlapping areas of artificial intelligence and software engineering to obtain a holistic design process for industrial automation systems.},
  Doi                      = {10.3233/978-1-61499-419-0-977},
  ISBN                     = {9781614994183},
  ISSN                     = {09226389}
}

@InProceedings{Bak2011,
  Title                    = {Feature and meta-models in clafer: Mixed, specialized, and coupled},
  Author                   = {Ba̧k, Kacper and Czarnecki, Krzysztof and Wa̧sowski, Andrzej},
  Year                     = {2011},
  Pages                    = {102--122},
  Volume                   = {6563 LNCS},

  Abstract                 = {We present Clafer, a meta-modeling language with first-class support for feature modeling. We designed Clafer as a concise notation for meta-models, feature models, mixtures of meta- and feature models (such as components with options), and models that couple feature models and meta-models via constraints (such as mapping feature configurations to component configurations or model templates). Clafer also allows arranging models into multiple specialization and extension layers via constraints and inheritance. We identify four key mechanisms allowing a meta-modeling language to express feature models concisely and show that Clafer meets its design objectives using a sample product line. We evaluated Clafer and how it lends itself to analysis on sample feature models, meta-models, and model templates of an E-Commerce platform. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-19440-5_7},
  ISBN                     = {9783642194399},
  ISSN                     = {03029743}
}

@Article{Bakar2015,
  Title                    = {Feature extraction approaches from natural language requirements for reuse in software product lines: A systematic literature review},
  Author                   = {Bakar, Noor Hasrina and Kasirun, Zarinah M. and Salleh, Norsaremah},
  Year                     = {2015},

  Month                    = {aug},
  Pages                    = {132--149},
  Volume                   = {106},

  Abstract                 = {Abstract Requirements for implemented system can be extracted and reused for a production of a new similar system. Extraction of common and variable features from requirements leverages the benefits of the software product lines engineering (SPLE). Although various approaches have been proposed in feature extractions from natural language (NL) requirements, no related literature review has been published to date for this topic. This paper provides a systematic literature review (SLR) of the state-of-the-art approaches in feature extractions from NL requirements for reuse in SPLE. We have included 13 studies in our synthesis of evidence and the results showed that hybrid natural language processing approaches were found to be in common for overall feature extraction process. A mixture of automated and semi-automated feature clustering approaches from data mining and information retrieval were also used to group common features, with only some approaches coming with support tools. However, most of the support tools proposed in the selected studies were not made available publicly and thus making it hard for practitioners' adoption. As for the evaluation, this SLR reveals that not all studies employed software metrics as ways to validate experiments and case studies. Finally, the quality assessment conducted confirms that practitioners' guidelines were absent in the selected studies.},
  Doi                      = {10.1016/j.jss.2015.05.006},
  ISSN                     = {01641212},
  Publisher                = {Elsevier Inc.}
}

@Article{Baresi2012,
  Title                    = {Service-oriented dynamic software product lines},
  Author                   = {Baresi, Luciano and Guinea, Sam and Pasquale, Liliana},
  Year                     = {2012},
  Number                   = {10},
  Pages                    = {42--48},
  Volume                   = {45},

  Abstract                 = {An operational example of controls in a smart home demonstrates the potential of a solution that combines the Common Variability Language and a dynamic extension of the Business Process Execution Language to address the need to manage software system variability at runtime. {\textcopyright} 2012 IEEE.},
  Doi                      = {10.1109/MC.2012.289},
  ISSN                     = {00189162}
}

@InProceedings{Baresi2015,
  Title                    = {Dynamically Evolving the Structural Variability of Dynamic Software Product Lines},
  Author                   = {Baresi, Luciano and Quinton, Clement},
  Year                     = {2015},
  Month                    = {aug},
  Pages                    = {57--63},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {A Dynamic Software Product Line (DSPL) is a widely used approach to handle variability at runtime, e.g., By activating or deactivating features to adapt the running configuration. With the emergence of highly configurable and evolvable systems, DSPLs have to cope with the evolution of their structural variability, i.e., The Feature Model (FM) used to derive the configuration. So far, little is known about the evolution of the FM while a configuration derived from this FM is running. In particular, such a dynamic evolution changes the DSPL configuration space, which is thus unsynchronized with the running configuration and its adaptation capabilities. In this position paper, we propose and describe an initial architecture to manage the dynamic evolution of DSPLs and their synchronization. In particular, we explain how this architecture supports the evolution of DSPLs based on FMs extended with cardinality and attributes, which, to the best of our knowledge, has never been addressed yet.},
  Doi                      = {10.1109/SEAMS.2015.24},
  ISBN                     = {9781479919345}
}

@InProceedings{Basso2013,
  Title                    = {Supporting large scale model transformation reuse},
  Author                   = {Basso, F{\'{a}}bio Paulo and Pillat, Raquel Mainardi and Oliveira, Toacy Cavalcante and Becker, Leandro Buss},
  Year                     = {2013},
  Pages                    = {169--178},

  Abstract                 = {The growth of applications developed with the support of model transformations makes reuse a required practice, specially when applied to transformation assets (e.g. transformation chains, algorithms, and configuration files). In order to promote reuse one must consider the different implementations, communalities, and variants among these assets. In this domain, a couple techniques have been used as solutions to adapt reusable assets for specific needs. However, so far, no work has discussed their combined use in real software projects. In this paper, we present a new tool named WCT, which can be used to adapt transformation assets. Moreover, through lessons learned in industry, we address some reuse techniques devoted to adapt these assets. {\textcopyright} 2013 ACM.},
  Doi                      = {10.1145/2517208.2517218},
  ISBN                     = {9781450323734}
}

@InProceedings{Basso2014,
  Title                    = {Generative adaptation of model Transformation assets: Experiences, lessons and drawbacks},
  Author                   = {Basso, F{\'{a}}bio Paulo and Pillat, Raquel Mainardi and Oliveira, Toacy Cavalcante and {Del Fabro}, Marcos Didonet},
  Year                     = {2014},
  Pages                    = {1027--1034},
  Publisher                = {Association for Computing Machinery},

  Abstract                 = {Model transformation is a central activity in Model Driven Engineering (MDE) as it specifies how models are consumed to generate other models or code. Complex scenarios typically involve the execution of several transformations that, due to variability of solutions to develop software projects, need to be tailored to attempt different implementation technologies, libraries, patterns, etc. Recent proposals to tailor these assets suggested that current Software Product Line (SPL) techniques can be used to promote reuse of model transformation assets. However, in a recent case study, we have found lacks in techniques, including ours, to apply reuse for this domain in particular. Thus, this paper presents this case study and discusses implications and challenges in tailoring these assets with SPL techniques. Copyright 2014 ACM.},
  Doi                      = {10.1145/2554850.2554944},
  ISBN                     = {9781450324694}
}

@InProceedings{TerBeek2014c,
  Title                    = {Challenges in modelling and analyzing quantitative aspects of bike-sharing systems},
  Author                   = {ter Beek, Maurice H. and Fantechi, Alessandro and Gnesi, Stefania},
  Year                     = {2014},
  Pages                    = {351--367},
  Publisher                = {Springer Verlag},
  Volume                   = {8802},

  Abstract                 = {Bike-sharing systems are becoming popular not only as a sustainable means of transportation in the urban environment, but also as a challenging case study that presents interesting run-time optimization problems. As a side-study within a research project aimed at quantitative analysis that used such a case study, we have observed how the deployed systems enjoy a wide variety of different features. We have therefore applied variability analysis to define a family of bike-sharing systems, and we have sought support in available tools. We have so established a tool chain that includes (academic) tools that provide different functionalities regarding the analysis of software product lines, from feature modelling to product derivation and from quantitative evaluation of the attributes of products to model checking value-passing modal specifications. The tool chain is currently experimented inside the mentioned project as a complement to more sophisticated product-based analysis techniques.},
  ISBN                     = {9783662452332},
  ISSN                     = {16113349}
}

@InProceedings{TerBeek2015,
  Title                    = {Towards automatic decision support for bike-sharing system design},
  Author                   = {ter Beek, Maurice H. and Gnesi, Stefania and Latella, Diego and Massink, Mieke},
  Year                     = {2015},
  Pages                    = {266--280},
  Publisher                = {Springer Verlag},
  Volume                   = {9509},

  Abstract                 = {Public bike-sharing systems are a popular means of sustainable urban mobility, but their successful introduction in a city stands or falls with their specific designs. What kind of bikes and docking stations are needed, how many and where to install them? How to avoid as much as possible that stations are completely empty or full for some period? Hence, a bike-sharing system can be seen both as a highly (re)configurable system and as a collective adaptive system. In this paper, we present two complementary strategies for the evaluation of bike-sharing system designs by means of automated tool support. We use the Clafer toolset to perform multi-objective optimisation of attributed feature models known from software product line engineering and the recently developed mean field model checker FlyFast to assess performance and user satisfaction aspects of variants of large-scale bike-sharing systems. The combined use of these analysis approaches is a preliminary step in the direction of automatic decision support for the initial design of a bike-sharing system as well as its successive adaptations and reconfigurations that considers both qualitative and performance aspects.},
  Doi                      = {10.1007/978-3-662-49224-6_22},
  ISBN                     = {9783662492239},
  ISSN                     = {16113349}
}

@Article{TerBeek2015a,
  Title                    = {From EU projects to a family of model checkers},
  Author                   = {ter Beek, Maurice H. and Gnesi, Stefania and Mazzanti, Franco},
  Year                     = {2015},
  Pages                    = {312--328},
  Volume                   = {8950},

  Abstract                 = {We describe the development of the KandISTI family of model checkers from its origins nearly two decades ago until its very recent latest addition. Most progress was made, however, during two integrated European projects, AGILE and SENSORIA, in which our FM{\&}{\&}T lab participated under the scientific coordination of Martin Wirsing. Moreover, the very name of the family of model checkers is partly due to Martin Wirsing's passion for art and science.},
  ISSN                     = {16113349},
  Publisher                = {Springer Verlag}
}

@InProceedings{TerBeek2014b,
  Title                    = {Towards modular verification of software product lines with mCRL2},
  Author                   = {ter Beek, Maurice H. and de Vink, Erik P.},
  Year                     = {2014},
  Pages                    = {368--385},
  Publisher                = {Springer Verlag},
  Volume                   = {8802},

  Abstract                 = {We introduce by means of an example a modular verification technique for analyzing the behavior of software product lines using the mCRL2 toolset. Based on feature-driven borders, we divide a behavioral model of a product line into a set of separate components with interfaces and a driver process to coordinate them. Abstracting from irrelevant components, we verify properties over a smaller behavioral model, which not only simplifies the model checking task but also makes the result amenable for reuse. This is a fundamental step forward for the approach to scale up to industrial-size product lines.},
  ISBN                     = {9783662452332},
  ISSN                     = {16113349}
}

@InProceedings{Benavides2013,
  Title                    = {Automated analysis in feature modelling and product configuration},
  Author                   = {Benavides, David and Felfernig, Alexander and Galindo, Jos{\'{e}} A. and Reinfrank, Florian},
  Year                     = {2013},
  Pages                    = {160--175},
  Volume                   = {7925 LNCS},

  Abstract                 = {The automated analysis of feature models is one of the thriving topics of research in the software product line and variability management communities that has attracted more attention in the last years. A recent literature review reported that more than 30 analysis operations have been identified and different analysis mechanisms have been proposed. Product configuration is a well established research field with more than 30 years of successful applications in different industrial domains. Our hypothesis, that is not really new, is that these two independent areas of research have interesting synergies that have not been fully explored. To try to explore the potential synergies systematically, in this paper we provide a rapid review to bring together these previously disparate streams of work. We define a set of research questions and give a preliminary answer to some of them. We conclude that there are many research opportunities in the synergy of these independent areas. {\textcopyright} 2013 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-38977-1_11},
  ISBN                     = {9783642389764},
  ISSN                     = {03029743}
}

@Article{Berger2013,
  Title                    = {A study of variability models and languages in the systems software domain},
  Author                   = {Berger, Thorsten and She, Steven and Lotufo, Rafael and Wasowski, Andrzej and Czarnecki, Krzysztof},
  Year                     = {2013},

  Month                    = {dec},
  Number                   = {12},
  Pages                    = {1611--1640},
  Volume                   = {39},

  Abstract                 = {Variability models represent the common and variable features of products in a product line. Since the introduction of FODA in 1990, several variability modeling languages have been proposed in academia and industry, followed by hundreds of research papers on variability models and modeling. However, little is known about the practical use of such languages. We study the constructs, semantics, usage, and associated tools of two variability modeling languages, Kconfig and CDL, which are independently developed outside academia and used in large and significant software projects. We analyze 128 variability models found in 12 open - source projects using these languages. Our study 1) supports variability modeling research with empirical data on the real-world use of its flagship concepts. However, we 2) also provide requirements for concepts and mechanisms that are not commonly considered in academic techniques, and 3) challenge assumptions about size and complexity of variability models made in academic papers. These results are of interest to researchers working on variability modeling and analysis techniques and to designers of tools, such as feature dependency checkers and interactive product configurators. {\textcopyright} 1976-2012 IEEE.},
  Doi                      = {10.1109/TSE.2013.34},
  ISSN                     = {00985589}
}

@InProceedings{Berger2010,
  Title                    = {Variability modeling in the real: A perspective from the operating systems domain},
  Author                   = {Berger, Thorsten and She, Steven and Lotufo, Rafael and Wa̧sowski, Andrzej and Czarnecki, Krzysztof},
  Year                     = {2010},
  Pages                    = {73--82},

  Abstract                 = {Variability models represent the common and variable features of products in a product line. Several variability modeling languages have been proposed in academia and industry; however, little is known about the practical use of such languages. We study and compare the constructs, semantics, usage and tools of two variability modeling languages, Kconfig and CDL. We provide empirical evidence for the real-world use of the concepts known from variability modeling research. Since variability models provide basis for automated tools (feature dependency checkers and product configurators), we believe that our findings will be of interest to variability modeling language and tool designers. {\textcopyright} 2010 ACM.},
  Doi                      = {10.1145/1858996.1859010},
  ISBN                     = {9781450301169}
}

@InProceedings{Bezerra2014,
  Title                    = {Measures for quality evaluation of feature models},
  Author                   = {Bezerra, Carla I M and Andrade, Rossana M C and Monteiro, Jos{\'{e}} Maria S},
  Year                     = {2014},
  Pages                    = {282--297},
  Publisher                = {Springer Verlag},
  Volume                   = {8919},

  Abstract                 = {In Software Product Lines (SPL), quality evaluation is a critical factor, because an error in a SPL can spread to various end products. However, it is often proved impractical to ensure the quality of all products of a given SPL both for economic reasons and the effort needed due to their large number. In this context, a strategy that can be used is to make quality assessments on the initial phases of the SPL development. This approach avoids having errors that could be propagated to the next SPL phases. So, taking into account the feature model, which is one of the most important artifacts in a SPL since its quality directly affects the quality of the SPL end products, to assure the quality of the feature model is one of the current strategies to assess the quality of a SPL. In this sense, one way to evaluate the feature model is to use measures, which could be associated with the feature model quality characteristics and their quality attributes. This paper presents a measures catalog, which can be used to support the quality evaluation of the feature model. In order to identify these measures, a systematic mapping is conducted and to validate the measures catalog, we perform a peer review with experts in software quality and SPL. Besides that, to evaluate the use of the proposed catalog, we apply the measures in three feature models in the domain of mobile applications. The results show that the proposed measures catalog can be effectively deployed to support the quality evaluation of the feature models.},
  ISBN                     = {9783319141299},
  ISSN                     = {16113349}
}

@InProceedings{Boskovic2011,
  Title                    = {Aspect-oriented feature models},
  Author                   = {Bo{\v{s}}kovi{\'{c}}, Marko and Mussbacher, Gunter and Bagheri, Ebrahim and Amyot, Daniel and Ga{\v{s}}evi{\'{c}}, Dragan and Hatala, Marek},
  Year                     = {2011},
  Pages                    = {110--124},
  Volume                   = {6627 LNCS},

  Abstract                 = {Software Product Lines (SPLs) have emerged as a prominent approach for software reuse. SPLs are sets of software systems called families that are usually developed as a whole and share many common features. Feature models are most typically used as a means for capturing commonality and managing variability of the family. A particular product from the family is configured by selecting the desired features of that product. Typically, feature models are considered monolithic entities that do not support modularization well. As industrial feature models tend to be large, their modularization has become an important research topic lately. However, existing modularization approaches do not support modularization of crosscutting concerns. In this paper, we introduce Aspect-oriented Feature Models (AoFM) and argue that using aspect-oriented techniques improves the manageability and reduces the maintainability effort of feature models. Particularly, we advocate an asymmetric approach that allows for the modularization of basic and crosscutting concerns in feature models. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-21210-9_11},
  ISBN                     = {9783642212093},
  ISSN                     = {03029743}
}

@InProceedings{Broneske2014,
  Title                    = {Software design approaches for mastering variability in database systems},
  Author                   = {Broneske, David and Dorok, Sebastian and K{\"{o}}ppen, Veit and Meister, Andreas},
  Year                     = {2014},
  Pages                    = {47--52},
  Publisher                = {CEUR-WS},
  Volume                   = {1313},

  Abstract                 = {For decades, database vendors have developed traditional database systems for different application domains with highly differing requirements. These systems are extended with additional functionalities to make them applicable for yet another data-driven domain. The database community observed that these "one size fits all" systems provide poor performance for special domains; systems that are tailored for a single domain usually perform better, have smaller memory footprint, and less energy consumption. These advantages do not only originate from different requirements, but also from differences within individual domains, such as using a certain storage device. However, implementing specialized systems means to reimplement large parts of a database system again and again, which is neither feasible for many customers nor efficient in terms of costs and time. To overcome these limitations, we envision applying techniques known from software product lines to database systems in order to provide tailor-made and robust database systems for nearly every application scenario with reasonable effort in cost and time. General Terms Database, Software Engineering.},
  ISSN                     = {16130073}
}

@InProceedings{Calvagna2013,
  Title                    = {Combinatorial testing for feature models using CitLab},
  Author                   = {Calvagna, Andrea and Gargantini, Angelo and Vavassori, Paolo},
  Year                     = {2013},
  Pages                    = {338--347},

  Abstract                 = {Feature models are commonly used to represent product lines and systems with a set of features interrelated each others. Test generation from feature models, i.e. generating a valid and representative subset of all the possible product configurations, is still an open challenge. A common approach is to build combinatorial interaction test suites, for instance achieving pair wise coverage among the features. In this paper we show how standard feature models can be translated to combinatorial interaction models in our framework CitLab, with all the advantages of having a combinatorial testing environment (in terms of a clear semantics, editing facilities, language for seeds and test goals, and generation algorithms). We present our translation which gives a precise semantics to feature models and it tries to minimize the number of parameter and constraints while preserving the original semantics of the feature model. Experiments show the advantages of our approach. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ICSTW.2013.45}
}

@Article{Capilla2014,
  Title                    = {An overview of Dynamic Software Product Line architectures and techniques: Observations from research and industry},
  Author                   = {Capilla, Rafael and Bosch, Jan and Trinidad, Pablo and Ruiz-Cort{\'{e}}s, Antonio and Hinchey, Mike},
  Year                     = {2014},

  Month                    = {may},
  Number                   = {1},
  Pages                    = {3--23},
  Volume                   = {91},

  Abstract                 = {Over the last two decades, software product lines have been used successfully in industry for building families of systems of related products, maximizing reuse, and exploiting their variable and configurable options. In a changing world, modern software demands more and more adaptive features, many of them performed dynamically, and the requirements on the software architecture to support adaptation capabilities of systems are increasing in importance. Today, many embedded system families and application domains such as ecosystems, service-based applications, and self-adaptive systems demand runtime capabilities for flexible adaptation, reconfiguration, and post-deployment activities. However, as traditional software product line architectures fail to provide mechanisms for runtime adaptation and behavior of products, there is a shift toward designing more dynamic software architectures and building more adaptable software able to handle autonomous decision-making, according to varying conditions. Recent development approaches such as Dynamic Software Product Lines (DSPLs) attempt to face the challenges of the dynamic conditions of such systems but the state of these solution architectures is still immature. In order to provide a more comprehensive treatment of DSPL models and their solution architectures, in this research work we provide an overview of the state of the art and current techniques that, partially, attempt to face the many challenges of runtime variability mechanisms in the context of Dynamic Software Product Lines. We also provide an integrated view of the challenges and solutions that are necessary to support runtime variability mechanisms in DSPL models and software architectures. {\textcopyright} 2014 Elsevier Inc.},
  Doi                      = {10.1016/j.jss.2013.12.038},
  ISSN                     = {01641212}
}

@InProceedings{Chen2011,
  Title                    = {Optimizing the product derivation process},
  Author                   = {Chen, Sheng and Erwig, Martin},
  Year                     = {2011},
  Pages                    = {35--44},

  Abstract                 = {Feature modeling is widely used in software product-line engineering to capture the commonalities and variabilities within an application domain. As feature models evolve, they can become very complex with respect to the number of features and the dependencies among them, which can cause the product derivation based on feature selection to become quite time consuming and error prone. We address this problem by presenting techniques to find good feature selection sequences that are based on the number of products that contain a particular feature and the impact of a selected feature on the selection of other features. Specifically, we identify a feature selection strategy, which brings up highly selective features early for selection. By prioritizing feature selection based on the selectivity of features our technique makes the feature selection process more efficient. Moreover, our approach helps with the problem of unexpected side effects of feature selection in later stages of the selection process, which is commonly considered a difficult problem. We have run our algorithm on the e-Shop and Berkeley DB feature models and also on some automatically generated feature models. The evaluation results demonstrate that our techniques can shorten the product derivation processes significantly. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/SPLC.2011.47},
  ISBN                     = {9780769544878}
}

@Article{Chuang2012,
  Title                    = {Epistatic interaction in software evolution and the solution},
  Author                   = {Chuang, Wang and Xiangwu, Meng},
  Year                     = {2012},

  Month                    = {apr},
  Number                   = {7},
  Pages                    = {234--241},
  Volume                   = {6},

  Abstract                 = {An algorithm is designed to solve the epistatic interaction problem in software evolution process of multi-version software. The interactions among software components complicate the decision problem of version chosen in the software evolution process. The software NK model is built based on the NK model and characteristics of software system. The theoretical analysis of the formal model is discussed. It is proved that some choices have no contribution to the optimal result, and these choices can be deleted to reduce the scale of the problem. The solving algorithms are provided based on these conclusions. The experiments verified the effectiveness of the proposed algorithm.},
  Doi                      = {10.4156/jdcta.vol6.issue7.29},
  ISSN                     = {19759339}
}

@InProceedings{Clarke2011,
  Title                    = {Variability modelling in the ABS language},
  Author                   = {Clarke, Dave and Muschevici, Radu and Proen{\c{c}}a, Jos{\'{e}} and Schaefer, Ina and Schlatte, Rudolf},
  Year                     = {2011},
  Pages                    = {204--224},
  Volume                   = {6957 LNCS},

  Abstract                 = {The HATS project aims at developing a model-centric methodology for the design, implementation and verification of highly configurable systems, such as software product lines, centred around the Abstract Behavioural Specification (ABS) modelling Language. This article describes the variability modelling features of the ABS Modelling framework. It consists of four languages, namely, $\mu$TVL for describing feature models at a high level of abstraction, the Delta Modelling Language DML for describing variability of the 'code' base in terms of delta modules, the Product Line Configuration Language CL for linking feature models and delta modules together and the Product Selection Language PSL for describing a specific product to extract from a product line. Both formal semantics and examples of each language are presented. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-25271-6_11},
  ISBN                     = {9783642252709},
  ISSN                     = {03029743}
}

@Article{Classen2011,
  Title                    = {A text-based approach to feature modelling: Syntax and semantics of TVL},
  Author                   = {Classen, Andreas and Boucher, Quentin and Heymans, Patrick},
  Year                     = {2011},

  Month                    = {dec},
  Number                   = {12},
  Pages                    = {1130--1143},
  Volume                   = {76},

  Abstract                 = {In the scientific community, feature models are the de-facto standard for representing variability in software product line engineering. This is different from industrial settings where they appear to be used much less frequently. We and other authors found that in a number of cases, they lack concision, naturalness and expressiveness. This is confirmed by industrial experience. When modelling variability, an efficient tool for making models intuitive and concise are feature attributes. Yet, the semantics of feature models with attributes is not well understood and most existing notations do not support them at all. Furthermore, the graphical nature of feature models' syntax also appears to be a barrier to industrial adoption, both psychological and rational. Existing tool support for graphical feature models is lacking or inadequate, and inferior in many regards to tool support for text-based formats. To overcome these shortcomings, we designed TVL, a text-based feature modelling language. In terms of expressiveness, TVL subsumes most existing dialects. The main goal of designing TVL was to provide engineers with a human-readable language with a rich syntax to make modelling easy and models natural, but also with a formal semantics to avoid ambiguity and allow powerful automation. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.scico.2010.10.005},
  ISSN                     = {01676423}
}

@InProceedings{Czarnecki2012,
  Title                    = {Cool features and tough decisions: A comparison of variability modeling approaches},
  Author                   = {Czarnecki, Krzysztof and Gr{\"{u}}nbacher, Paul and Rabiser, Rick and Schmid, Klaus and Wa̧sowski, Andrzej},
  Year                     = {2012},
  Pages                    = {173--182},

  Abstract                 = {Variability modeling is essential for defining and managing the commonalities and variabilities in software product lines. Numerous variability modeling approaches exist today to support domain and application engineering activities. Most are based on feature modeling (FM) or decision modeling (DM), but so far no systematic comparison exists between these two classes of approaches. Over the last two decades many new features have been added to both FM and DM and it is tough to decide which approach to use for what purpose. This paper clarifies the relation between FM and DM. We aim to systematize the research field of variability modeling and to explore potential synergies. We compare multiple aspects of FM and DM ranging from historical origins and rationale, through syntactic and semantic richness, to tool support, identifying commonalities and differences. We hope that this effort will improve the understanding of the range of approaches to variability modeling by discussing the possible variations. This will provide insights to users considering adopting variability modeling in practice and to designers of new languages, such as the new OMG Common Variability Language. Copyright 2012 ACM.},
  Doi                      = {10.1145/2110147.2110167},
  ISBN                     = {9781450310581}
}

@InProceedings{Davril2013,
  Title                    = {Feature model extraction from large collections of informal product descriptions},
  Author                   = {Davril, Jean Marc and Delfosse, Edouard and Hariri, Negar and Acher, Mathieu and Cleland-Huang, Jane and Heymans, Patrick},
  Year                     = {2013},
  Pages                    = {290--300},

  Abstract                 = {Feature Models (FMs) are used extensively in software product line engineering to help generate and validate individual product configurations and to provide support for domain analysis. As FM construction can be tedious and time-consuming, researchers have previously developed techniques for extracting FMs from sets of formally specified individual configurations, or from software requirements specifications for families of existing products. However, such artifacts are often not available. In this paper we present a novel, automated approach for constructing FMs from publicly available product descriptions found in online product repositories and marketing websites such as SoftPedia and CNET. While each individual product description provides only a partial view of features in the domain, a large set of descriptions can provide fairly comprehensive coverage. Our approach utilizes hundreds of partial product descriptions to construct an FM and is described and evaluated against antivirus product descriptions mined from SoftPedia.},
  Doi                      = {10.1145/2491411.2491455},
  ISBN                     = {9781450322379}
}

@InProceedings{DeMello2012,
  Title                    = {Checklist-based inspection technique for feature models review},
  Author                   = {{De Mello}, Rafael M. and Teixeira, Eldanae N. and Schots, Marcelo and Werner, Cl{\'{a}}udia M L and Travassos, Guilherme Horta},
  Year                     = {2012},
  Pages                    = {140--149},

  Abstract                 = {Software Product Line Engineering aims to ensure the correctness, completeness and consistency among its artifacts and the specified domain, in order to prevent the spread of defects for the products derived from this domam. Among initial artifacts of a software product line, feature models are artifacts generated in various domain engineering approaches. Although software inspection is highlighted as an effective review activity for detection of defects in software artifacts, mainly in the early models of software projects, a recent quasi-systematic review of literature indicated a lack of techniques to support the inspection of software product line artifacts, which include features models. Thus, this paper presents FMCheck, a checklist-based inspection technique to support the detection of defects on feature models. This technique was developed to be configurable and to be applied on several extensions of the original feature model notation presented by FODA approach, including the Odyssey-FEX notation, in particular. FMCheck was submitted to a proof of concept and to a further in vitro feasibility study, in which it could be seen the feasibility of FMCheck application and also that inspections applying FMCheck are more effective than ad-hoc inspections, when applied on four distinct domains. {\textcopyright}2012 IEEE.},
  Doi                      = {10.1109/SBCARS.2012.25},
  ISBN                     = {9780769549170}
}

@Article{Del-Rio-Ortega2013,
  Title                    = {On the definition and design-time analysis of process performance indicators},
  Author                   = {Del-R{\'{i}}o-Ortega, Adela and Resinas, Manuel and Cabanillas, Cristina and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2013},
  Number                   = {4},
  Pages                    = {470--490},
  Volume                   = {38},

  Abstract                 = {A key aspect in any process-oriented organisation is the evaluation of process performance for the achievement of its strategic and operational goals. Process Performance Indicators (PPIs) are a key asset to carry out this evaluation, and, therefore, having an appropriate definition of these PPIs is crucial. After a careful review of the literature related and a study of the current picture in different real organisations, we conclude that there not exists any proposal that allows to define PPIs in a way that is unambiguous and highly expressive, understandable by technical and non-technical users and traceable with the Business Process (BP). In addition, like other activities carried out during the BP lifecycle, the management of PPIs is considered time-consuming and error-prone. Therefore, providing an automated support for them is very appealing from a practical point of view. In this paper, we propose the PPINOT metamodel, which allows such an advanced definition of PPIs and is independent of the language used to model the business process. Furthermore, we provide an automatic semantic mapping from the metamodel to Description Logics (DL) that allows the implementation of design-time analysis operations in such a way that DL reasoners' facilities can be leveraged. These operations provide information that can assist process analysts in the definition and instrumentation of PPIs. Finally, to validate the usefulness of our proposal, we have used the PPINOT metamodel at the core of a software tool called the PPINOT Tool Suite and we have applied it in several real scenarios. {\textcopyright} 2012 Elsevier Ltd.},
  Doi                      = {10.1016/j.is.2012.11.004},
  ISSN                     = {03064379}
}

@Article{Dermeval2015,
  Title                    = {Ontology-based feature modeling: An empirical study in changing scenarios},
  Author                   = {Dermeval, Diego and Ten{\'{o}}rio, Thyago and Bittencourt, Ig Ibert and Silva, Alan and Isotani, Seiji and Ribeiro, M{\'{a}}rcio},
  Year                     = {2015},

  Month                    = {jul},
  Number                   = {11},
  Pages                    = {4950--4964},
  Volume                   = {42},

  Abstract                 = {A software product line (SPL) is a set of software systems that have a particular set of common features and that satisfy the needs of a particular market segment or mission. Feature modeling is one of the key activities involved in the design of SPLs. The feature diagram produced in this activity captures the commonalities and variabilities of SPLs. In some complex domains (e.g.; ubiquitous computing, autonomic systems and context-aware computing), it is difficult to foresee all functionalities and variabilities a specific SPL may require. Thus, Dynamic Software Product Lines (DSPLs) bind variation points at runtime to adapt to fluctuations in user needs as well as to adapt to changes in the environment. In this context, relying on formal representations of feature models is important to allow them to be automatically analyzed during system execution. Among the mechanisms used for representing and analyzing feature models, description logic (DL) based approaches demand to be better investigated in DSPLs since it provides capabilities, such as automated inconsistency detection, reasoning efficiency, scalability and expressivity. Ontology is the most common way to represent feature models knowledge based on DL reasoners. Previous works conceived ontologies for feature modeling either based on OWL classes and properties or based on OWL individuals. However, considering change or evolution scenarios of feature models, we need to compare whether a class-based or an individual-based feature modeling style is recommended to describe feature models to support SPLs, and especially its capabilities to deal with changes in feature models, as required by DSPLs. In this paper, we conduct a controlled experiment to empirically compare two approaches based on each one of these modeling styles in several changing scenarios (e.g.; add/remove mandatory feature, add/remove optional feature and so on). We measure time to perform changes, structural impact of changes (flexibility) and correctness for performing changes in our experiment. Our results indicate that using OWL individuals requires less time to change and is more flexible than using OWL classes and properties. These results provide insightful assumptions towards the definition of an approach relying on reasoning capabilities of ontologies that can effectively support products reconfiguration in the context of DSPL.},
  Doi                      = {10.1016/j.eswa.2015.02.020},
  ISSN                     = {09574174},
  Publisher                = {Elsevier Ltd}
}

@InProceedings{Dhungana2011,
  Title                    = {Configuration of multi product lines by bridging heterogeneous variability modeling approaches},
  Author                   = {Dhungana, Deepak and Seichter, Dominik and Botterweck, Goetz and Rabiser, Rick and Gr{\"{u}}nbacher, Paul and Benavides, David and Galindo, Jos{\'{e}} A.},
  Year                     = {2011},
  Pages                    = {120--129},

  Abstract                 = {In industrial settings, products are rarely developed by one organization alone. Software vendors and suppliers typically maintain their own product lines, which can contribute to a larger (multi) product line. The teams involved often use different approaches and tools to manage the variability of their systems. It is unrealistic to assume that all participating units can use a standardized and prescribed variability modeling technique. The configuration of products based on several models in different notations and with different semantics is not well supported by existing approaches. In this paper we present an integrative approach that provides a unified perspective to users configuring products in multi product line environments, regardless of the different modeling methods and tools used internally. We also present a technical infrastructure and a prototypic implementation based on Web Services. We show the feasibility of the approach and its implementation by using it with two different variability modeling approaches (one feature-based and one decision-oriented approach) on an example derived from industrial experience. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/SPLC.2011.22},
  ISBN                     = {9780769544878}
}

@InProceedings{Dhungana2013,
  Title                    = {Automated verification of interactive rule-based configuration systems},
  Author                   = {Dhungana, Deepak and Tang, Ching Hoo and Weidenbach, Christoph and Wischnewski, Patrick},
  Year                     = {2013},
  Pages                    = {551--561},

  Abstract                 = {Rule-based specifications of systems have again become common in the context of product line variability modeling and configuration systems. In this paper, we define a logical foundation for rule-based specifications that has enough expressivity and operational behavior to be practically useful and at the same time enables decidability of important overall properties such as consistency or cycle-freeness. Our logic supports rule-based interactive user transitions as well as the definition of a domain theory via rule transitions. As a running example, we model DOPLER, a rule-based configuration system currently in use at Siemens. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ASE.2013.6693112},
  ISBN                     = {9781479902156}
}

@InProceedings{Dubslaff2015,
  Title                    = {Probabilistic model checking for feature-oriented systems},
  Author                   = {Dubslaff, Clemens and Baier, Christel and Kl{\"{u}}ppelholz, Sascha},
  Year                     = {2015},
  Pages                    = {180--220},
  Publisher                = {Springer Verlag},
  Volume                   = {8989},

  Abstract                 = {Within product lines, collections of several related products are defined through their commonalities in terms of features rather than specifying them individually one-by-one. In this paper we present a compositional framework for modeling dynamic product lines by a statebased formalism with both probabilistic and nondeterministic behaviors. Rules for feature changes in products made during runtime are formalized by a coordination component imposing constraints on possible feature activations and deactivations. Our framework supports large-scaled product lines described through multi-features, i.e., where products may involve multiple instances of a feature. To establish temporal properties for products in a product line, verification techniques have to face a combinatorial blow-up that arises when reasoning about several feature combinations. This blow-up can be avoided by family-based approaches exploiting common feature behaviors. We adapt such approaches to our framework, allowing for a quantitative analysis in terms of probabilistic model checking to reason, e.g., about energy and memory consumption, monetary costs, or the reliability of products. Our framework can also be used to compute strategies how to trigger feature changes for optimizing quantitative objectives using probabilistic model-checking techniques. We present a natural and conceptually simple translation of product lines into the input language of the prominent probabilistic model checker Prism and show feasibility of this translation within a case study on an energy-aware server platform product line comprising thousands of products. To cope with the arising complexity, we follow the family-based analysis scheme and apply symbolic methods for a compact state-space representation.},
  Doi                      = {10.1007/978-3-662-46734-3_5},
  ISBN                     = {9783662467336},
  ISSN                     = {16113349}
}

@InProceedings{Dubslaff2014,
  Title                    = {Probabilistic model checking for energy analysis in software product lines},
  Author                   = {Dubslaff, Clemens and Kl{\"{u}}ppelholz, Sascha and Baier, Christel},
  Year                     = {2014},
  Pages                    = {169--180},
  Publisher                = {Association for Computing Machinery},

  Abstract                 = {In a software product line (SPL), a collection of software products is defined by their commonalities in terms of features rather than explicitly specifying all products one-by-one. Several verification techniques were adapted to establish temporal properties of SPLs. Symbolic and family-based model checking have been proven to be successful for tackling the combinatorial blow-up arising when reasoning about several feature combinations. However, most formal verification approaches for SPLs presented in the literature focus on the static SPLs, where the features of a product are fixed and cannot be changed during runtime. This is in contrast to dynamic SPLs, allowing to adapt feature combinations of a product dynamically after deployment. The main contribution of the paper is a compositional modeling framework for dynamic SPLs, which supports probabilistic and nondeterministic choices and allows for quantitative analysis. We specify the feature changes during runtime within an automata-based coordination component, enabling to reason over strategies how to trigger dynamic feature changes for optimizing various quantitative objectives, e.g., energy or monetary costs and reliability. For our framework there is a natural and conceptually simple translation into the input language of the prominent probabilistic model checker PRISM. This facilitates the application of PRISM's powerful symbolic engine to the operational behavior of dynamic SPLs and their family-based analysis against various quantitative queries. We demonstrate feasibility of our approach by a case study issuing an energy-aware bonding network device. Copyright {\textcopyright} 2014 ACM. Copyright {\textcopyright} 2014 ACM.},
  Doi                      = {10.1145/2577080.2577095}
}

@Article{Duran2016,
  Title                    = {Investigation of feature run-time conflicts on goal model-based reuse},
  Author                   = {Duran, Mustafa Berk and Mussbacher, Gunter},
  Year                     = {2016},

  Month                    = {oct},
  Number                   = {5},
  Pages                    = {855--875},
  Volume                   = {18},

  Abstract                 = {A fundamental task when reusing software artifacts is to determine the most appropriate artifact for the current reuse context. Goal modeling allows modelers to capture the advantages and disadvantages of reusable candidate artifacts, which in turn helps reason about the most appropriate candidate artifact. However, goal models are rarely used in isolation for the description of an artifact, but are combined with other models that impose additional constraints on the most appropriate candidate. Furthermore, reusable artifacts are assembled into reuse hierarchies to realize an application. This paper presents a novel goal model evaluation mechanism for the selection of the most appropriate candidate, which (i) takes into account additional configuration constraints expressed with feature models and run-time constraints expressed with workflow models that may affect the selection of reusable software artifacts, (ii) considers reuse hierarchies, and (iii) establishes a history of design decisions. Furthermore, a proof-of-concept implementation of the novel evaluation mechanism is discussed.},
  Doi                      = {10.1007/s10796-016-9657-7},
  ISSN                     = {15729419},
  Publisher                = {Springer New York LLC}
}

@Article{Eichelberger2014,
  Title                    = {Mapping the design-space of textual variability modeling languages: a refined analysis},
  Author                   = {Eichelberger, Holger and Schmid, Klaus},
  Year                     = {2014},

  Month                    = {dec},
  Number                   = {5},
  Pages                    = {559--584},
  Volume                   = {17},

  Abstract                 = {Variability modeling is a major part of modern product line engineering. Graphical or table-based approaches to variability modeling are focused around abstract models and specialized tools to interact with these models. However, more recently textual variability modeling languages, comparable to some extent to programming languages, were introduced. We consider the recent trend in product line engineering towards textual variability modeling languages as a phenomenon, which deserves deeper analysis. In this article, we report on the results and approach of a literature survey combined with an expert study. In the literature survey, we identified 11 languages, which enable the textual specification of product line variability and which are sufficiently described for an in-depth analysis. We provide a classification scheme, useful to describe the range of capabilities of such languages. Initially, we identified the relevant capabilities of these languages from a literature survey. The result of this has been refined, validated and partially improved by the expert survey. A second recent phenomenon in product line variability modeling is the increasing scale of variability models. Some authors of textual variability modeling languages argue that these languages are more appropriate for large-scale models. As a consequence, we would expect specific capabilities addressing scalability in the languages. Thus, we compare the capabilities of textual variability modeling techniques, if compared to graphical variability modeling approaches and in particular to analyze their specialized capabilities for large-scale models.},
  Doi                      = {10.1007/s10009-014-0362-x},
  ISSN                     = {14332787},
  Publisher                = {Springer Verlag}
}

@InProceedings{ElDammagh2011,
  Title                    = {Feature modeling tools: Evaluation and lessons learned},
  Author                   = {{El Dammagh}, Mohammed and {De Troyer}, Olga},
  Year                     = {2011},
  Pages                    = {120--129},
  Volume                   = {6999 LNCS},

  Abstract                 = {This paper presents an evaluation of feature modeling tools. The purpose of the evaluation was to gain insight in the aspects that influence the quality and more in the particular usability. The evaluation focused on the quality criteria: usability, safety, and the support for functional usability requirements. The study involved 9 feature-modeling tools and was done using an experimental evaluation and an investigation by the authors of the paper. From the results, recommendations are formulated that can be taken into consideration in future tool design for these kind of modeling tools. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-24574-9_17},
  ISBN                     = {9783642245732},
  ISSN                     = {03029743}
}

@InProceedings{Ernst2011,
  Title                    = {Finding incremental solutions for evolving requirements},
  Author                   = {Ernst, Neil A. and Borgida, Alexander and Jureta, Ivan},
  Year                     = {2011},
  Pages                    = {15--24},

  Abstract                 = {This paper investigates aspects of the problem of software evolution resulting from top-level requirements change. In particular, while most research on design for software focuses on finding some correct solution, this ignores that such a solution is often only correct in a particular, and often short-lived, context. Using a logic-based goal-oriented requirements modeling language, the paper poses the problem of finding desirable solutions as the requirements change. Among other possible criteria of desirability, we consider minimizing the effort required to implement the new solution, which involves reusing parts of the old solution. In general, the solution of requirements problems is viewed as an exploration using a "requirements engineering knowledge base" (REKB), whose specification is formalized. The paper reports on experience implementing the REKB on top of a so-called "reason-maintenance system", and provides evidence that incremental solution finding is indeed more efficient. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/RE.2011.6051656},
  ISBN                     = {9781457709234}
}

@InCollection{Felfernig2014,
  Title                    = {Configuration-Related Research Challenges},
  Author                   = {Felfernig, Alexander and Hotz, Lothar and Bagley, Claire and Tiihonen, Juha},
  Publisher                = {Elsevier Inc.},
  Year                     = {2014},
  Month                    = {apr},
  Pages                    = {191--195},

  Abstract                 = {In this part on advanced topics in configuration, we took a look at the issues of configuration knowledge engineering (testing and debugging and redundancy detection) and intelligent configurator user interfaces (personalized configuration and consumer decision-making). To stimulate further configuration-related research, we conclude this part with a discussion of issues for future research. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
  Doi                      = {10.1016/B978-0-12-415817-7.00015-3},
  ISBN                     = {9780124158177}
}

@Article{Fernandez-Amoros2014,
  Title                    = {A Scalable Approach to Exact Model and Commonality Counting for Extended Feature Models},
  Author                   = {Fernandez-Amoros, David and Heradio, Ruben and Cerrada, Jose A. and Cerrada, Carlos},
  Year                     = {2014},

  Month                    = {sep},
  Number                   = {9},
  Pages                    = {895--910},
  Volume                   = {40},

  Abstract                 = {A software product line is an engineering approach to efficient development of software product portfolios. Key to the success of the approach is to identify the common and variable features of the products and the interdependencies between them, which are usually modeled using feature models. Implicitly, such models also include valuable information that can be used by economic models to estimate the payoffs of a product line. Unfortunately, as product lines grow, analyzing large feature models manually becomes impracticable. This paper proposes an algorithm to compute the total number of products that a feature model represents and, for each feature, the number of products that implement it. The inference of both parameters is helpful to describe the standardization/parameterization balance of a product line, detect scope flaws, assess the product line incremental development, and improve the accuracy of economic models. The paper reports experimental evidence that our algorithm has better runtime performance than existing alternative approaches.},
  Doi                      = {10.1109/TSE.2014.2331073},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@Article{Ferrer2016,
  Title                    = {Intelligent testing of traffic light programs: Validation in smart mobility scenarios},
  Author                   = {Ferrer, Javier and Garc{\'{i}}a-Nieto, Jos{\'{e}} and Alba, Enrique and Chicano, Francisco},
  Year                     = {2016},
  Volume                   = {2016},

  Abstract                 = {In smart cities, the use of intelligent automatic techniques to find efficient cycle programs of traffic lights is becoming an innovative front for traffic flow management. However, this automatic programming of traffic lights requires a validation process of the generated solutions, since they can affect the mobility (and security) of millions of citizens. In this paper, we propose a validation strategy based on genetic algorithms and feature models for the automatic generation of different traffic scenarios checking the robustness of traffic light cycle programs. We have concentrated on an extensive urban area in the city of Malaga (in Spain), in which we validate a set of candidate cycle programs generated by means of four optimization algorithms: Particle Swarm Optimization for Traffic Lights, Differential Evolution for Traffic Lights, random search, and Sumo Cycle Program Generator. We can test the cycles of traffic lights considering the different states of the city, weather, congestion, driver expertise, vehicle's features, and so forth, but prioritizing the most relevant scenarios among a large and varied set of them. The improvement achieved in solution quality is remarkable, especially for C O 2 emissions, in which we have obtained a reduction of 126.99{\%} compared with the experts' solutions.},
  Doi                      = {10.1155/2016/3871046},
  ISSN                     = {15635147},
  Publisher                = {Hindawi Publishing Corporation}
}

@Article{Filho2014,
  Title                    = {Generating counterexamples of model-based software product lines},
  Author                   = {Filho, Jo{\~{a}}o Bosco Ferreira and Barais, Olivier and Acher, Mathieu and {Le Noir}, J{\'{e}}r{\^{o}}me and Legay, Axel and Baudry, Benoit},
  Year                     = {2014},

  Month                    = {aug},
  Number                   = {5},
  Pages                    = {585--600},
  Volume                   = {17},

  Abstract                 = {In a model-based software product line (MSPL), the variability of the domain is characterized in a variability model and the core artifacts are base models conforming to a modeling language (also called metamodel). A realization model connects the features of the variability model to the base model elements, triggering operations over these elements based on a configuration. The design space of an MSPL is extremely complex to manage for the engineer, since the number of variants may be exponential and the derived product models have to be conforming to numerous well-formedness and business rules. In this paper, the objective is to provide a way to generate MSPLs, called counterexamples (also called antipatterns), that can produce invalid product models despite a valid configuration in the variability model. We describe the foundations and motivate the usefulness of counterexamples (e.g., inference of guidelines or domain-specific rules to avoid earlier the specification of incorrect mappings; testing oracles for increasing the robustness of derivation engines given a modeling language). We provide a generic process, based on the common variability language (CVL) to randomly search the space of MSPLs for a specific modeling language. We develop LineGen a tool on top of CVL and modeling technologies to support the methodology and the process. LineGen targets different scenarios and is flexible to work either with just a domain metamodel as input or also with pre-defined variability models and base models. We validate the effectiveness of this process for three formalisms at different scales (up to 247 metaclasses and 684 rules). We also apply the approach in the context of a real industrial scenario involving a large-scale metamodel.},
  Doi                      = {10.1007/s10009-014-0341-2},
  ISSN                     = {14332787},
  Publisher                = {Springer Verlag}
}

@InProceedings{Font2015,
  Title                    = {Addressing metamodel revisions in model-based Software Product Lines},
  Author                   = {Font, Jaime and Arcega, Lorena and Haugen, {\O}ystein and Cetina, Carlos},
  Year                     = {2015},
  Month                    = {oct},
  Pages                    = {161--170},
  Publisher                = {Association for Computing Machinery, Inc},

  Abstract                 = {Metamodels evolve over time, which can break the conformance between the models and the metamodel. Model migration strategies aim to co-evolve models and metamodels together, but their application is not fully automatizable and is thus cumbersome and error prone. We introduce the Variable MetaModel (VMM) strategy to address the evolution of the reusable model assets of a model-based Software Product Line. TheVMMstrategy applies variability modeling ideas to express the evolution of the metamodel in terms of commonalities and variabilities. When the metamodel evolves, the models continue to conform to the VMM, avoiding the need for migration. We have applied both the traditional migration strategy and the VMM strategy to a retrospective case study that includes 13 years of evolution of our industrial partner, an induction hobs manufacturer. The comparison between the two strategies shows better results for the VMM strategy in terms of model indirection, automation, and trust leak.},
  Doi                      = {10.1145/2814204.2814214},
  ISBN                     = {9781450336871}
}

@Article{Gomez2014,
  Title                    = {A framework for variable content document generation with multiple actors},
  Author                   = {G{\'{o}}mez, Abel and Penad{\'{e}}s, M. Carmen and Can{\'{o}}s, Jos{\'{e}} H. and Borges, Marcos R S and Llavador, Manuel},
  Year                     = {2014},
  Number                   = {9},
  Pages                    = {1101--1121},
  Volume                   = {56},

  Abstract                 = {Context Advances in customization have highlighted the need for tools supporting variable content document management and generation in many domains. Current tools allow the generation of highly customized documents that are variable in both content and layout. However, most frameworks are technology-oriented, and their use requires advanced skills in implementation-related tools, which means their use by end users (i.e. document designers) is severely limited. Objective Starting from past and current trends for customized document authoring, our goal is to provide a document generation alternative in which variants are specified at a high level of abstraction and content reuse can be maximized in high variability scenarios. Method Based on our experience in Document Engineering, we identified areas in the variable content document management and generation field open to further improvement. We first classified the primary sources of variability in document composition processes and then developed a methodology, which we called DPL - based on Software Product Lines principles - to support document generation in high variability scenarios. Results In order to validate the applicability of our methodology we implemented a tool - DPLfw - to carry out DPL processes. After using this in different scenarios, we compared our proposal with other state-of-the-art tools for variable content document management and generation. Conclusion The DPLfw showed a good capacity for the automatic generation of variable content documents equal to or in some cases surpassing other currently available approaches. To the best of our knowledge, DPLfw is the only framework that combines variable content and document workflow facilities, easing the generation of variable content documents in which multiple actors play different roles. {\textcopyright} 2014 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2013.12.006},
  ISSN                     = {09505849},
  Publisher                = {Elsevier}
}

@InProceedings{Gunther2012,
  Title                    = {RbFeatures: Feature-oriented programming with Ruby},
  Author                   = {G{\"{u}}nther, Sebastian and Sunkle, Sagar},
  Year                     = {2012},
  Month                    = {mar},
  Number                   = {3},
  Pages                    = {152--173},
  Volume                   = {77},

  Abstract                 = {Features are pieces of core functionality of a program that is relevant to particular stakeholders. Features pose dependencies and constraints among each other. These dependencies and constraints describe the possible number of variants of the program: A valid feature configuration generates a specific variant with unique behavior. Feature-Oriented Programming is used to implement features as program units. This paper introduces rbFeatures, a feature-oriented programming language implemented on top of the dynamic programming language Ruby. With rbFeatures, programmers use software product lines, variants, and features as first-class entities. This allows several runtime reflection and modification capabilities, including the extension of the product line with new features and the provision of multiple variants. The paper gives a broad overview to the implementation and application of rbFeatures. We explain how features as first-class entities are designed and implemented, and discuss how the semantics of features are carefully added to Ruby programs. We show two case studies: The expression product line, a common example in feature-oriented programming, and a web application. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.scico.2010.12.007},
  ISSN                     = {01676423}
}

@InProceedings{Galindo2014,
  Title                    = {A variability-based testing approach for synthesizing video sequences},
  Author                   = {Galindo, Jos{\'{e}} A. and Alf{\'{e}}rez, Mauricio and Acher, Mathieu and Baudry, Benoit and Benavides, David},
  Year                     = {2014},
  Month                    = {jul},
  Pages                    = {293--303},
  Publisher                = {Association for Computing Machinery, Inc},

  Abstract                 = {A key problem when developing video processing software is the difficulty to test different input combinations. In this paper, we present VANE, a variability-based testing approach to derive video sequence variants. The ideas of VANE are i) to encode in a variability model what can vary within a video sequence; ii) to exploit the variability model to generate testable configurations; iii) to synthesize variants of video sequences corresponding to configurations. VANE computes T-wise covering sets while optimizing a function over attributes. Also, we present a preliminary validation of the scalability and practicality of VANE in the context of an industrial project involving the test of video processing algorithms.},
  ISBN                     = {9781450326452}
}

@InProceedings{Galindo2010,
  Title                    = {Debian packages repositories as software product line models. Towards automated analysis},
  Author                   = {Galindo, Jos{\'{e}} A. and Benavides, David and Segura, Sergio},
  Year                     = {2010},
  Pages                    = {29--34},
  Volume                   = {688},

  Abstract                 = {The automated analysis of variability models in general and feature models in particular is a thriving research topic. There have been numerous contributions along the last twenty years in this area including both, research papers and tools. However, the lack of realistic variability models to evaluate those techniques and tools is recognized as a major problem by the community. To address this issue, we looked for large-scale variability models in the open source community. We found that the Debian package dependency language can be interpreted as software product line variability model. Moreover, we found that those models can be automatically analysed in a software product line variability model-like style. In this paper, we take a first step towards the automated analysis of Debian package dependency language. We provide a mapping from these models to propositional formulas. We also show how this could allow us to perform analysis operations on the repositories like the detection of anomalies (e.g. packages that cannot be installed).},
  ISSN                     = {16130073}
}

@Article{Galindo2015,
  Title                    = {Supporting distributed product configuration by integrating heterogeneous variability modeling approaches},
  Author                   = {Galindo, Jos{\'{e}} A. and Dhungana, Deepak and Rabiser, Rick and Benavides, David and Botterweck, Goetz and Gr{\"{u}}nbacher, Paul},
  Year                     = {2015},
  Number                   = {1},
  Pages                    = {78--100},
  Volume                   = {62},

  Abstract                 = {Context: In industrial settings products are developed by more than one organization. Software vendors and suppliers commonly typically maintain their own product lines, which contribute to a larger (multi) product line or software ecosystem. It is unrealistic to assume that the participating organizations will agree on using a specific variability modeling technique - they will rather use different approaches and tools to manage the variability of their systems. Objective: We aim to support product configuration in software ecosystems based on several variability models with different semantics that have been created using different notations. Method: We present an integrative approach that provides a unified perspective to users configuring products in multi product line environments, regardless of the different modeling methods and tools used internally. We also present a technical infrastructure and a prototype implementation based on web services. Results: We show the feasibility of the approach and its implementation by using it with the three most widespread types of variability modeling approaches in the product line community, i.e., feature-based, OVM-style, and decision-oriented modeling. To demonstrate the feasibility and flexibility of our approach, we present an example derived from industrial experience in enterprise resource planning. We further applied the approach to support the configuration of privacy settings in the Android ecosystem based on multiple variability models. We also evaluated the performance of different model enactment strategies used in our approach. Conclusions: Tools and techniques allowing stakeholders to handle variability in a uniform manner can considerably foster the initiation and growth of software ecosystems from the perspective of software reuse and configuration.},
  Doi                      = {10.1016/j.infsof.2015.02.002},
  ISSN                     = {09505849},
  Publisher                = {Elsevier}
}

@Article{Galster2014,
  Title                    = {Variability in software systems-A systematic literature review},
  Author                   = {Galster, Matthias and Weyns, Danny and Tofan, Dan and Michalik, Bartosz and Avgeriou, Paris},
  Year                     = {2014},
  Number                   = {3},
  Pages                    = {282--306},
  Volume                   = {40},

  Abstract                 = {Context: Variability (i.e., the ability of software systems or artifacts to be adjusted for different contexts) became a key property of many systems. Objective: We analyze existing research on variability in software systems. We investigate variability handling in major software engineering phases (e.g., requirements engineering, architecting). Method: We performed a systematic literature review. A manual search covered 13 premium software engineering journals and 18 premium conferences, resulting in 15,430 papers searched and 196 papers considered for analysis. To improve reliability and to increase reproducibility, we complemented the manual search with a targeted automated search. Results: Software quality attributes have not received much attention in the context of variability. Variability is studied in all software engineering phases, but testing is underrepresented. Data to motivate the applicability of current approaches are often insufficient; research designs are vaguely described. Conclusions: Based on our findings we propose dimensions of variability in software engineering. This empirically grounded classification provides a step towards a unifying, integrated perspective of variability in software systems, spanning across disparate or loosely coupled research themes in the software engineering community. Finally, we provide recommendations to bridge the gap between research and practice and point to opportunities for future research. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/TSE.2013.56},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@InProceedings{Garcia-Galan2016,
  Title                    = {User-centric adaptation analysis of multi-tenant services},
  Author                   = {Garc{\'{i}}a-Gal{\'{a}}n, Jes{\'{u}}s and Pasquale, Liliana and Trinidad, Pablo and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2016},
  Month                    = {feb},
  Number                   = {4},
  Publisher                = {Association for Computing Machinery},
  Volume                   = {10},

  Abstract                 = {Multi-tenancy is a key pillar of cloud services. It allows different users to share computing and virtual resources transparently, meanwhile guaranteeing substantial cost savings. Due to the tradeoff between scalability and customization, one of the major drawbacks of multi-tenancy is limited configurability. Since users may often have conflicting configuration preferences, offering the best user experience is an open challenge for service providers. In addition, the users, their preferences, and the operational environment may change during the service operation, thus jeopardizing the satisfaction of user preferences. In this article, we present an approach to support user-centric adaptation of multi-tenant services. We describe how to engineer the activities of the Monitoring, Analysis, Planning, Execution (MAPE) loop to support user-centric adaptation, and we focus on adaptation analysis. Our analysis computes a service configuration that optimizes user satisfaction, complies with infrastructural constraints, and minimizes reconfiguration obtrusiveness when user- or service-related changes take place. To support our analysis, we model multitenant services and user preferences by using feature and preference models, respectively. We illustrate our approach by utilizing different cases of virtual desktops. Our results demonstrate the effectiveness of the analysis in improving user preferences satisfaction in negligible time.},
  Doi                      = {10.1145/2790303},
  ISSN                     = {15564703}
}

@InProceedings{Garcia-Galan2014,
  Title                    = {User-centric adaptation of multi-tenant services: Preference-based analysis for service reconfiguration},
  Author                   = {Garc{\'{i}}a-Gal{\'{a}}n, Jes{\'{u}}s and Pasquale, Liliana and Trinidad, Pablo and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2014},
  Pages                    = {65--74},
  Publisher                = {Association for Computing Machinery},

  Abstract                 = {Multi-tenancy is a key pillar of cloud services. It allows different tenants to share computing resources transparently and, at the same time, guarantees substantial cost savings for the providers. However, from a user perspective, one of the major drawbacks of multi-tenancy is lack of configurability. Depending on the isolation degree, the same service instance and even the same service configuration may be shared among multiple tenants (i.e. shared multi-tenant service). Moreover tenants usually have different - and in most of the cases - conicting configuration preferences. To over-come this limitation, this paper introduces a novel approach to support user-centric adaptation in shared multi-tenant services. The adaptation objective aims to maximise tenants' satisfaction, even when tenants and their preferences change during the service life-time. This paper describes how to engineer the activities of the MAPE loop to support user-centric adaptation, and focuses on the analysis of tenants' preferences. In particular, we use a game theoretic analysis to identify a service configuration that maximises tenants' preferences satisfaction. We illustrate and motivate our approach by utilising a multi-tenant desktop scenario. Obtained experimental results demonstrate the feasibility of the proposed analysis.},
  Doi                      = {10.1145/2593929.2593930},
  ISBN                     = {9781450328647}
}

@InProceedings{Garcia-Galan2013,
  Title                    = {Migrating to the Cloud: A software product line based analysis},
  Author                   = {Garc{\'{i}}a-Gal{\'{a}}n, Jes{\'{u}}s and Rana, Omer and Trinidad, Pablo and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2013},
  Pages                    = {416--426},

  Abstract                 = {Identifying which part of a local system should be migrated to a public Cloud environment is often a difficult and error prone process. With the significant (and increasing) number of commercial Cloud providers, choosing a provider whose capability best meets requirements is also often difficult. Most Cloud service providers offer large amounts of configurable resources, which can be combined in a number of different ways. In the case of small and medium companies, finding a suitable configuration with the minimum cost is often an essential requirement to migrate, or even to initiate the decision process for migration. We interpret this need as a problem associated with variability management and analysis. Variability techniques and models deal with large configuration spaces, and have been proposed previously to support configuration processes in industrial cases. Furthermore, this is a mature field which has a large catalog of analysis operations to extract valuable information in an automated way. Some of these operations can be used and tailored for Cloud environments. We focus in this work on Amazon Cloud services, primarily due to the large number of possible configurations available by this service provider and its popularity. Our approach can also be adapted to other providers offering similar capabilities.},
  ISBN                     = {9789898565525}
}

@Article{Garcia-Galan2016a,
  Title                    = {Automated configuration support for infrastructure migration to the cloud},
  Author                   = {Garc{\'{i}}a-Gal{\'{a}}n, Jes{\'{u}}s and Trinidad, Pablo and Rana, Omer F. and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2016},

  Month                    = {feb},
  Pages                    = {200--212},
  Volume                   = {55},

  Abstract                 = {With an increasing number of cloud computing offerings in the market, migrating an existing computational infrastructure to the cloud requires comparison of different offers in order to find the most suitable configuration. Cloud providers offer many configuration options, such as location, purchasing mode, redundancy, and extra storage. Often, the information about such options is not well organised. This leads to large and unstructured configuration spaces, and turns the comparison into a tedious, error-prone search problem for the customers. In this work we focus on supporting customer decision making for selecting the most suitable cloud configuration - in terms of infrastructural requirements and cost. We achieve this by means of variability modelling and analysis techniques. Firstly, we structure the configuration space of an IaaS using feature models, usually employed for the modelling of variability-intensive systems, and present the case study of the Amazon EC2. Secondly, we assist the configuration search process. Feature models enable the use of different analysis operations that, among others, automate the search of optimal configurations. Results of our analysis show how our approach, with a negligible analysis time, outperforms commercial approaches in terms of expressiveness and accuracy.},
  Doi                      = {10.1016/j.future.2015.03.006},
  ISSN                     = {0167739X},
  Publisher                = {Elsevier}
}

@Article{Gheyi2011,
  Title                    = {Automatically checking feature model refactorings},
  Author                   = {Gheyi, Rohit and Massoni, Tiago and Borba, Paulo},
  Year                     = {2011},
  Number                   = {5},
  Pages                    = {684--711},
  Volume                   = {17},

  Abstract                 = {A feature model (FM) defines the valid combinations of features, whose combinations correspond to a program in a Software Product Line (SPL). FMs may evolve, for instance, during refactoring activities. Developers may use a catalog of refactorings as support. However, the catalog is incomplete in principle. Additionally, it is non-trivial to propose correct refactorings. To our knowledge, no previous analysis technique for FMs is used for checking properties of general FM refactorings (a transformation that can be applied to a number of FMs) containing a representative number of features. We propose an efficient encoding of FMs in the Alloy formal specification language. Based on this encoding, we show how the Alloy Analyzer tool, which performs analysis on Alloy models, can be used to automatically check whether encoded general and specific FM refactorings are correct. Our approach can analyze general transformations automatically to a significant scale in a few seconds. In order to evaluate the analysis performance of our encoding, we evaluated in automatically generated FMs ranging from 500 to 2,000 features. Furthermore, we analyze the soundness of general transformations. {\textcopyright} J.UCS.},
  ISSN                     = {0958695X}
}

@Article{Guo2012,
  Title                    = {Consistency maintenance for evolving feature models},
  Author                   = {Guo, Jianmei and Wang, Yinglin and Trinidad, Pablo and Benavides, David},
  Year                     = {2012},

  Month                    = {apr},
  Number                   = {5},
  Pages                    = {4987--4998},
  Volume                   = {39},

  Abstract                 = {Software product line (SPL) techniques handle the construction of customized systems. One of the most common representations of the decisions a customer can make in SPLs is feature models (FMs). An FM represents the relationships among common and variable features in an SPL. Features are a representation of the characteristics in a system that are relevant to customers. FMs are subject to change since the set of features and their relationships can change along an SPL lifecycle. Due to this evolution, the consistency of FMs may be compromised. There exist some approaches to detect and explain inconsistencies in FMs, however this process can take a long time for large FMs. In this paper we present a complementary approach to dealing with inconsistencies in FM evolution scenarios that improves the performance for existing approaches reducing the impact of change to the smallest part of an FM that changes. To achieve our goal, we formalize FMs from an ontological perspective and define constraints that must be satisfied in FMs to be consistent. We define a set of primitive operations that modify FMs and which are responsible for the FM evolution, analyzing their impact on the FM consistency. We propose a set of predefined strategies to keep the consistency for error-prone operations. As a proof-of-concept we present the results of our experiments, where we check for the effectiveness and efficiency of our approach in FMs with thousands of features. Although our approach is limited by the kinds of consistency constraints and the primitive operations we define, the experiments present a significant improvement in performance results in those cases where they are applicable. {\textcopyright} 2011 Elsevier Ltd. All rights reserved.},
  Doi                      = {10.1016/j.eswa.2011.10.014},
  ISSN                     = {09574174}
}

@InProceedings{Guo2014,
  Title                    = {Scaling exact multi-objective combinatorial optimization by parallelization},
  Author                   = {Guo, Jianmei and Zulkoski, Edward and Olaechea, Rafael and Rayside, Derek and Czarnecki, Krzysztof and Apel, Sven and Atlee, Joanne M.},
  Year                     = {2014},
  Pages                    = {409--420},
  Publisher                = {Association for Computing Machinery, Inc},

  Abstract                 = {Multi-Objective Combinatorial Optimization (MOCO) is fundamental to the development and optimization of software systems. We propose five novel parallel algorithms for solving MOCO problems exactly and efficiently. Our algorithms rely on off-the-shelf solvers to search for exact Pareto-optimal solutions, and they parallelize the search via collaborative communication, divide-and-conquer, or both. We demonstrate the feasibility and performance of our algorithms by experiments on three case studies of software-system designs. A key finding is that one algorithm, which we call FS-GIA, achieves substantial (even super-linear) speedups that scale well up to 64 cores. Furthermore, we analyze the performance bottlenecks and opportunities of our parallel algorithms, which facilitates further research on exact, parallel MOCO.},
  Doi                      = {10.1145/2642937.2642971},
  ISBN                     = {9781450330138}
}

@InProceedings{Haslinger2013,
  Title                    = {On extracting feature models from sets of valid feature combinations},
  Author                   = {Haslinger, Evelyn Nicole and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
  Year                     = {2013},
  Pages                    = {53--67},
  Volume                   = {7793 LNCS},

  Abstract                 = {Rather than developing individual systems, Software Product Line Engineering develops families of systems. The members of the software family are distinguished by the features they implement and Feature Models (FMs) are the de facto standard for defining which feature combinations are considered valid members. This paper presents an algorithm to automatically extract a feature model from a set of valid feature combinations, an essential development step when companies, for instance, decide to convert their existing product variations portfolio into a Software Product Line. We performed an evaluation on 168 publicly available feature models, with 9 to 38 features and up to 147456 feature combinations. From the generated feature combinations of each of these examples, we reverse engineered an equivalent feature model with a median performance in the low milliseconds. {\textcopyright} 2013 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-37057-1_5},
  ISBN                     = {9783642370564},
  ISSN                     = {03029743}
}

@InProceedings{Haslinger2011,
  Title                    = {Reverse engineering feature models from programs' feature sets},
  Author                   = {Haslinger, Evelyn Nicole and Lopez-Herrejon, Roberto E. and Egyed, Alexander},
  Year                     = {2011},
  Pages                    = {308--312},

  Abstract                 = {Successful software is more and more rarely developed as a one-of-a-kind system. Instead, different system variants are built from a common set of assets and customized for catering to the different functionality or technology needs of the distinct clients and users. The Software Product Line Engineering (SPLE) paradigm has proven effective to cope with the variability described for this scenario. However, evolving a Software Product Line (SPL) from a family of systems is not a simple endeavor. A crucial requirement is accurately capturing the variability present in the family of systems and representing it with Feature Models (FMs), the de facto standard for variability modeling. Current research has focused on extracting FMs from configuration scripts, propositional logic expressions or natural language. In contrast, in this short paper we present an algorithm that reverse engineers a basic feature model from the feature sets which describe the features each system provides. We perform an evaluation of our approach using several case studies and outline the issues that still need to be addressed. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/WCRE.2011.45},
  ISBN                     = {9780769545820},
  ISSN                     = {10951350}
}

@Article{Heider2012,
  Title                    = {Facilitating the evolution of products in product line engineering by capturing and replaying configuration decisions},
  Author                   = {Heider, Wolfgang and Rabiser, Rick and Gr{\"{u}}nbacher, Paul},
  Year                     = {2012},
  Number                   = {5},
  Pages                    = {613--630},
  Volume                   = {14},

  Abstract                 = {Software product lines rely on developing reusable artifacts and defining their variability in models to support and accelerate the derivation of individual products. A major challenge in product lines is the continuous evolution of both the reusable artifacts and derived products. Products that have been derived from a product line have to be updated regularly, e. g., after bugfixes or the development of new features. Changes to reusable artifacts and variability models have to be propagated to derived products. The aim of our research is to provide automated support for the evolution of products derived from product lines by capturing and replaying configuration decisions. Our PUPLE (Product Updates in Product Line Engineering) approach supports updating derived products after changes to the product line they have been derived from. It exploits the structure of variability models and uses change-tracking data to minimize user intervention. The paper first explores how different types of product line changes influence the derived products. It then presents extensions to our decision-oriented product line approach DOPLER to support product line evolution. We evaluate the feasibility of the PUPLE approach with evolution tasks that were performed by engineers of an industry partner on a product line of an Eclipse-based tool suite with six derived products. We conclude with lessons learned and limitations of our approach. {\textcopyright} 2012 Springer-Verlag.},
  Doi                      = {10.1007/s10009-012-0229-y},
  ISSN                     = {14332779}
}

@InProceedings{Henard2015,
  Title                    = {Combining multi-objective search and constraint solving for configuring large software product lines},
  Author                   = {Henard, Christopher and Papadakis, Mike and Harman, Mark and {Le Traon}, Yves},
  Year                     = {2015},
  Month                    = {aug},
  Pages                    = {517--528},
  Publisher                = {IEEE Computer Society},
  Volume                   = {1},

  Abstract                 = {Software Product Line (SPL) feature selection involves the optimization of multiple objectives in a large and highly constrained search space. We introduce SATIBEA, that augments multi-objective search-based optimization with constraint solving to address this problem, evaluating it on five large real-world SPLs, ranging from 1,244 to 6,888 features with respect to three different solution quality indicators and two diversity metrics. The results indicate that SATIBEA statistically significantly outperforms the current state-of-the-art (p {\textless} 0.01) for all five SPLs on all three quality indicators and with maximal effect size ({\^{A}}12 = 1:0). We also present results that demonstrate the importance of combining constraint solving with searchbased optimization and the significant improvement SATIBEA produces over pure constraint solving. Finally, we demonstrate the scalability of SATIBEA: within less than half an hour, it finds thousands of constraint-satisfying optimized software products, even for the largest SPL considered in the literature to date.},
  Doi                      = {10.1109/ICSE.2015.69},
  ISBN                     = {9781479919345},
  ISSN                     = {02705257}
}

@InProceedings{Henard2014,
  Title                    = {Mutation-based generation of software product line test configurations},
  Author                   = {Henard, Christopher and Papadakis, Mike and {Le Traon}, Yves},
  Year                     = {2014},
  Pages                    = {92--106},
  Publisher                = {Springer Verlag},
  Volume                   = {8636 LNCS},

  Abstract                 = {Software Product Lines (SPLs) are families of software products that can be configured and managed through a combination of features. Such products are usually represented with a Feature Model (FM). Testing the entire SPL may not be conceivable due to economical or time constraints and, more simply, because of the large number of potential products. Thus, defining methods for generating test configurations is required, and is now a very active research topic for the testing community. In this context, mutation has recently being advertised as a promising technique. Mutation evaluates the ability of the test suite to detect defective versions of the FM, called mutants. In particular, it has been shown that existing test configurations achieving the mutation criterion correlate with fault detection. Despite the potential benefit of mutation, there is no approach which aims at generating test configurations for SPL with respect to the mutation criterion. In this direction, we introduce a search-based approach which explores the SPL product space to generate product test configurations with the aim of detecting mutants. {\textcopyright} 2014 Springer International Publishing Switzerland.},
  Doi                      = {10.1007/978-3-319-09940-8_7},
  ISBN                     = {9783319099392},
  ISSN                     = {16113349}
}

@Article{Henard2014a,
  Title                    = {Bypassing the combinatorial explosion: Using similarity to generate and prioritize t-wise test configurations for software product lines},
  Author                   = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and Heymans, Patrick and Traon, Yves Le},
  Year                     = {2014},

  Month                    = {jul},
  Number                   = {7},
  Pages                    = {650--670},
  Volume                   = {40},

  Abstract                 = {Large Software Product Lines (SPLs) are common in industry, thus introducing the need of practical solutions to test them. To this end, t-wise can help to drastically reduce the number of product configurations to test. Current t-wise approaches for SPLs are restricted to small values of t. In addition, these techniques fail at providing means to finely control the configuration process. In view of this, means for automatically generating and prioritizing product configurations for large SPLs are required. This paper proposes (a) a search-based approach capable of generating product configurations for large SPLs, forming a scalable and flexible alternative to current techniques and (b) prioritization algorithms for any set of product configurations. Both these techniques employ a similarity heuristic. The ability of the proposed techniques is assessed in an empirical study through a comparison with state of the art tools. The comparison focuses on both the product configuration generation and the prioritization aspects. The results demonstrate that existing t-wise tools and prioritization techniques fail to handle large SPLs. On the contrary, the proposed techniques are both effective and scalable. Additionally, the experiments show that the similarity heuristic can be used as a viable alternative to t-wise. {\textcopyright} 1976-2012 IEEE.},
  Doi                      = {10.1109/TSE.2014.2327020},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@InProceedings{Henard2013,
  Title                    = {Multi-objective test generation for software product lines},
  Author                   = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and {Le Traon}, Yves},
  Year                     = {2013},
  Pages                    = {62--71},

  Abstract                 = {Software Products Lines (SPLs) are families of products sharing common assets representing code or functionalities of a software product. These assets are represented as features, usually organized into Feature Models (FMs) from which the user can configure software products. Generally, few features are sufficient to allow configuring millions of software products. As a result, selecting the products matching given testing objectives is a difficult problem. The testing process usually involves multiple and potentially conflicting testing objectives to fulfill, e.g. maximizing the number of optional features to test while at the same time both minimizing the number of products and minimizing the cost of testing them. However, most approaches for generating products usually target a single objective, like testing the maximum amount of feature interactions. While focusing on one objective may be sufficient in certain cases, this practice does not reflect real-life testing situations. The present paper proposes a genetic algorithm to handle multiple conflicting objectives in test generation for SPLs. Experiments conducted on FMs of different sizes demonstrate the effectiveness, feasibility and practicality of the introduced approach. {\textcopyright} 2013 ACM.},
  Doi                      = {10.1145/2491627.2491635},
  ISBN                     = {9781450319683}
}

@InProceedings{Henard2013a,
  Title                    = {Towards automated testing and fixing of re-engineered Feature Models},
  Author                   = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and {Le Traon}, Yves},
  Year                     = {2013},
  Pages                    = {1245--1248},

  Abstract                 = {Mass customization of software products requires their efficient tailoring performed through combination of features. Such features and the constraints linking them can be represented by Feature Models (FMs), allowing formal analysis, derivation of specific variants and interactive configuration. Since they are seldom present in existing systems, techniques to re-engineer FMs have been proposed. There are nevertheless error-prone and require human intervention. This paper introduces an automated search-based process to test and fix FMs so that they adequately represent actual products. Preliminary evaluation on the Linux kernel FM exhibit erroneous FM constraints and significant reduction of the inconsistencies. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ICSE.2013.6606689},
  ISBN                     = {9781467330763},
  ISSN                     = {02705257}
}

@InProceedings{Henard2013b,
  Title                    = {Assessing software product line testing via model-based mutation: An application to similarity testing},
  Author                   = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and Traon, Yves Le},
  Year                     = {2013},
  Pages                    = {188--197},

  Abstract                 = {Needs for mass customization and economies of scale have pushed engineers to develop Software Product Lines (SPLs). SPLs are families of products sharing commonalities and exhibiting differences, built by reusing software assets abstractly represented by features. Feature models describe the constraints that link the features and allow the configuration of tailored software products. Common SPLs involve hundreds, even thousands of features, leading to billions of possible software products. As a result, testing a product line is challenging due to the enormous size of the possible products. Existing techniques focus on testing based on the product line's feature model by selecting a limited set of products to test. Being created manually or reverse-engineered, feature models are prone to errors impacting the generated test suites. In this paper, we examine ability of test suites to detect such errors. In particular, we propose two mutation operators to derive erroneous feature models (mutants) from an original feature model and assess the capability of the generated original test suite to kill the mutants. Experimentation on real feature models demonstrate that dissimilar tests suites have a higher mutant detection ability than similar ones, thus validating the relevance of similarity-driven product line testing. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ICSTW.2013.30}
}

@Article{Heradio2013,
  Title                    = {A literature review on feature diagram product counting and its usage in software product line economic models},
  Author                   = {Heradio, Ruben and Fernandez-Amoros, David and Cerrada, Jose A. and Abad, Ismael},
  Year                     = {2013},

  Month                    = {oct},
  Number                   = {8},
  Pages                    = {1177--1204},
  Volume                   = {23},

  Abstract                 = {In software product line engineering, feature diagrams are a popular means to represent the similarities and differences within a family of related systems. In addition, feature diagrams implicitly model valuable information that can be used in economic models to estimate the cost savings of a product line. In particular, this paper reviews existing proposals on computing the total number of products modeled with a feature diagram and, given a feature, the number of products that implement it. This paper also reviews the economic information that can be estimated when such numbers are known. Thus, this paper contributes by bringing together previously-disparate streams of work: the automated analysis of feature diagrams and economic models for product lines. {\textcopyright} 2013 World Scientific Publishing Company.},
  Doi                      = {10.1142/S0218194013500368},
  ISSN                     = {02181940}
}

@Article{Heradio2012,
  Title                    = {Improving the accuracy of COPLIMO to estimate the payoff of a software product line},
  Author                   = {Heradio, Ruben and Fernandez-Amoros, David and Torre-Cubillo, Luis and {Perez Garcia-Plaza}, Alberto},
  Year                     = {2012},

  Month                    = {jul},
  Number                   = {9},
  Pages                    = {7919--7928},
  Volume                   = {39},

  Abstract                 = {Software product line engineering pursues the efficient development of families of similar products. COPLIMO is an economic model that relies on COCOMO II to estimate the benefits of adopting a product line approach compared to developing the products one by one. Although COPLIMO is an ideal economic model to support decision making on the incremental development of a product line, it makes some simplifying assumptions that may produce high distortions in the estimates (e.g.; COPLIMO takes for granted that all the products have the same size). This paper proposes a COPLIMO reformulation that avoids such assumptions and, consequently, improves the accuracy of the estimates. To support our proposal, we present an algorithm that infers the additional information that our COPLIMO reformulation requires from feature diagrams, which is a widespread notation to model the domain of a product line. {\textcopyright} 2012 Elsevier Ltd. All rights reserved.},
  Doi                      = {10.1016/j.eswa.2012.01.109},
  ISSN                     = {09574174}
}

@Article{Heradio2016,
  Title                    = {Augmenting measure sensitivity to detect essential, dispensable and highly incompatible features in mass customization},
  Author                   = {Heradio, Ruben and Perez-Morago, Hector and Alf{\'{e}}rez, Mauricio and Fernandez-Amoros, David and Alf{\'{e}}rez, Germ{\'{a}}n H.},
  Year                     = {2016},

  Month                    = {feb},
  Number                   = {3},
  Pages                    = {1066--1077},
  Volume                   = {248},

  Abstract                 = {Mass customization is the new frontier in business competition for both manufacturing and service industries. To improve customer satisfaction, reduce lead-times and shorten costs, families of similar products are built jointly by combining reusable parts that implement the features demanded by the customers. To guarantee the validity of the products derived from mass customization processes, feature dependencies and incompatibilities are usually specified with a variability model. As market demand grows and evolves, variability models become increasingly complex. In such entangled models it is hard to identify which features are essential, dispensable, highly required by other features, or highly incompatible with the remaining features. This paper exposes the limitations of existing approaches to gather such knowledge and provides efficient algorithms to retrieve that information from variability models.},
  Doi                      = {10.1016/j.ejor.2015.08.005},
  ISSN                     = {03772217},
  Publisher                = {Elsevier}
}

@Article{Heradio2016a,
  Title                    = {A bibliometric analysis of 20 years of research on software product lines},
  Author                   = {Heradio, Ruben and Perez-Morago, Hector and Fernandez-Amoros, David and {Javier Cabrerizo}, Francisco and Herrera-Viedma, Enrique},
  Year                     = {2016},

  Month                    = {apr},
  Pages                    = {1--15},
  Volume                   = {72},

  Abstract                 = {Context: Software product line engineering has proven to be an efficient paradigm to developing families of similar software systems at lower costs, in shorter time, and with higher quality. Objective: This paper analyzes the literature on product lines from 1995 to 2014, identifying the most influential publications, the most researched topics, and how the interest in those topics has evolved along the way. Method: Bibliographic data have been gathered from ISI Web of Science and Scopus. The data have been examined using two prominent bibliometric approaches: science mapping and performance analysis. Results: According to the study carried out, (i) software architecture was the initial motor of research in SPL; (ii) work on systematic software reuse has been essential for the development of the area; and (iii) feature modeling has been the most important topic for the last fifteen years, having the best evolution behavior in terms of number of published papers and received citations. Conclusion: Science mapping has been used to identify the main researched topics, the evolution of the interest in those topics and the relationships among topics. Performance analysis has been used to recognize the most influential papers, the journals and conferences that have published most papers, how numerous is the literature on product lines and what is its distribution over time.},
  Doi                      = {10.1016/j.infsof.2015.11.004},
  ISSN                     = {09505849},
  Publisher                = {Elsevier}
}

@Article{Heradio-Gil2011,
  Title                    = {Supporting commonality-based analysis of software product lines},
  Author                   = {Heradio-Gil, R. and Fernandez-Amoros, D. and Cerrada, J. A. and Cerrada, C.},
  Year                     = {2011},

  Month                    = {dec},
  Number                   = {6},
  Pages                    = {496--509},
  Volume                   = {5},

  Abstract                 = {Software product line (SPL) engineering is a cost-effective approach to developing families of similar products. Key to the success of this approach is to correctly scope the domain of the SPL, identifying the common and variable features of the products and the interdependencies between features. In this study, the authors show how the commonality of a feature (i.e. the reuse ratio of the feature among the products) can be used to detect scope flaws in the early stages of development. SPL domains are usually modelled by means of feature diagrams following the feature-oriented domain analysis (FODA) notation. The authors extend classical FODA trees with unrestricted cardinalities, and present an algorithm to compute the number of products modelled by a feature diagram and the commonality of the features. Finally, the authors compare the performance of their algorithm with two other approaches built on top of boolean logic satisfiability (SAT)-solver technology such as cachet and relsat. {\textcopyright} 2011 The Institution of Engineering and Technology.},
  Doi                      = {10.1049/iet-sen.2010.0022},
  ISSN                     = {17518806}
}

@InProceedings{Hervieu2011,
  Title                    = {PACOGEN: Automatic generation of pairwise test configurations from feature models},
  Author                   = {Hervieu, Aymeric and Baudry, Benoit and Gotlieb, Arnaud},
  Year                     = {2011},
  Pages                    = {120--129},

  Abstract                 = {Feature models are commonly used to specify variability in software product lines. Several tools support feature models for variability management at different steps in the development process. However, tool support for test configuration generation is currently limited. This test generation task consists in systematically selecting a set of configurations that represent a relevant sample of the variability space and that can be used to test the product line. In this paper we propose PACOGEN to analyze feature models and automatically generate a set of configurations that cover all pair wise interactions between features. PACOGEN relies on constraint programming to generate configurations that satisfy all constraints imposed by the feature model and to minimize the set of the tests configurations. This work also proposes an extensive experiment, based on the state-of-the art SPLOT feature models repository, showing that PACOGEN scales over variability spaces with millions of configurations and covers pair wise with less configurations than other available tools. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ISSRE.2011.31},
  ISBN                     = {9780769545684},
  ISSN                     = {10719458}
}

@Article{Heymans2012,
  Title                    = {A code tagging approach to software product line development: An application to satellite communication libraries},
  Author                   = {Heymans, Patrick and Boucher, Quentin and Classen, Andreas and Bourdoux, Arnaud and Demonceau, Laurent},
  Year                     = {2012},
  Number                   = {5},
  Pages                    = {553--566},
  Volume                   = {14},

  Abstract                 = {Software product line engineering seeks to systematise reuse when developing families of similar software systems so as to minimise development time, cost and defects. To realise variability at the code level, product line methods classically advocate usage of inheritance, components, frameworks, aspects or generative techniques. However, these might require unaffordable paradigm shifts for developers if the software was not thought at the outset as a product line. Furthermore, these techniques can be conflicting with a company's coding practices or external regulations. These concerns were the motivation for the industry-university collaboration described in this paper in which we developed a minimally intrusive coding technique based on tags. The approach was complemented with traceability from code to feature diagrams which were exploited for automated configuration. It is supported by a toolchain and is now in use in the partner company for the development of flight-grade satellite communication software libraries. {\textcopyright} 2012 Springer-Verlag.},
  Doi                      = {10.1007/s10009-012-0242-1},
  ISSN                     = {14332779}
}

@InCollection{Hotz2014,
  Title                    = {Configuration Knowledge Representation and Reasoning},
  Author                   = {Hotz, Lothar and Felfernig, Alexander and Stumptner, Markus and Ryabokon, Anna and Bagley, Claire and Wolter, Katharina},
  Publisher                = {Elsevier Inc.},
  Year                     = {2014},
  Month                    = {apr},
  Pages                    = {41--72},

  Abstract                 = {Configuration models specify the set of possible configurations (solutions). A configuration model together with a defined set of (customer) requirements are the major elements of a configuration task (problem). In this chapter, we discuss different knowledge representations that can be used for the definition of a configuration model. We provide examples that help to further develop the understanding of the underlying concepts and include a UML-based personal computer (PC) configuration model that is used as a reference example throughout this book. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
  Doi                      = {10.1016/B978-0-12-415817-7.00006-2},
  ISBN                     = {9780124158177}
}

@InCollection{Hubaux2013,
  Title                    = {Separating concerns in feature models: Retrospective and support for multi-views},
  Author                   = {Hubaux, Arnaud and Acher, Mathieu and Tun, Thein Than and Heymans, Patrick and Collet, Philippe and Lahire, Philippe},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2013},
  Month                    = {jan},
  Pages                    = {3--28},

  Abstract                 = {Feature models (FMs) are a popular formalism to describe the commonality and variability of a set of assets in a software product line (SPL). SPLs usually involve large and complex FMs that describe thousands of features whose legal combinations are governed by many and often complex rules. The size and complexity of these models is partly explained by the large number of concerns considered by SPL practitioners when managing and configuring FMs. In this chapter, we first survey concerns and their separation in FMs, highlighting the need for more modular and scalable techniques. We then revisit the concept of view as a simplified representation of an FM. We finally describe a set of techniques to specify, visualise and verify the coverage of a set of views. These techniques are implemented in complementary tools providing practical support for feature-based configuration and large-scale management of FMs.},
  Doi                      = {10.1007/978-3-642-36654-3_1},
  ISBN                     = {9783642366543}
}

@Article{Hubaux2013a,
  Title                    = {Supporting multiple perspectives in feature-based configuration},
  Author                   = {Hubaux, Arnaud and Heymans, Patrick and Schobbens, Pierre Yves and Deridder, Dirk and Abbasi, Ebrahim Khalil},
  Year                     = {2013},

  Month                    = {jul},
  Number                   = {3},
  Pages                    = {641--663},
  Volume                   = {12},

  Abstract                 = {Feature diagrams have become commonplace in software product line engineering as a means to document variability early in the life cycle. Over the years, their application has also been extended to assist stakeholders in the configuration of software products. However, existing feature-based configuration techniques offer little support for tailoring configuration views to the profiles of the various stakeholders. In this paper, we propose a lightweight, yet formal and flexible, mechanism to leverage multidimensional separation of concerns in feature-based configuration. We propose a technique to specify concerns in feature diagrams and to generate automatically concern-specific configuration views. Three alternative visualisations are proposed. Our contributions are motivated and illustrated through excerpts from a real web-based meeting management application which was also used for a preliminary evaluation. We also report on the progress made in the development of a tool supporting multi-view feature-based configuration. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/s10270-011-0220-1},
  ISSN                     = {16191366}
}

@Article{Hubaux2013b,
  Title                    = {Separation of concerns in feature diagram languages: A systematic survey},
  Author                   = {Hubaux, Arnaud and Tun, Thein Than and Heymans, Patrick},
  Year                     = {2013},

  Month                    = {aug},
  Number                   = {4},
  Volume                   = {45},

  Abstract                 = {The need for flexible customization of large feature-rich software systems, according to requirements of various stakeholders, has become an important problem in software development. Among the many software engineering approaches dealing with variability management, the notion of Software Product Line (SPL) has emerged as a major unifying concept. Drawing from established disciplines of manufacturing, SPL approaches aim to design repertoires of software artifacts, from which customized software systems for specific stakeholder requirements can be developed. A major difficulty SPL approaches attempt to address is the modularization of software artifacts, which reconciles the user's needs for certain features and the development and technical constraints. Towards this end, many SPL approaches use feature diagrams to describe possible configurations of a feature set. There have been several proposals for feature diagram languages with varying degrees of expressiveness, intuitiveness, and precision. However, these feature diagram languages have limited scalability when applied to realistic software systems. This article provides a systematic survey of various concerns of feature diagrams and ways in which concerns have been separated. The survey shows how the uncertainty in the purpose of feature diagram languages creates both conceptual and practical limitations to scalability of those languages. {\textcopyright} 2013 ACM.},
  Doi                      = {10.1145/2501654.2501665},
  ISSN                     = {03600300}
}

@InProceedings{Kastner2011,
  Title                    = {Variability-aware parsing in the presence of lexical macros and conditional compilation},
  Author                   = {K{\"{a}}stner, Christian and Giarrusso, Paolo G. and Rendel, Tillmann and Erdweg, Sebastian and Ostermann, Klaus and Berger, Thorsten},
  Year                     = {2011},
  Pages                    = {805--824},

  Abstract                 = {In many projects, lexical preprocessors are used to manage different variants of the project (using conditional compilation) and to define compile-time code transformations (using macros). Unfortunately, while being a simple way to implement variability, conditional compilation and lexical macros hinder automatic analysis, even though such analysis is urgently needed to combat variability-induced complexity. To analyze code with its variability, we need to parse it without preprocessing it. However, current parsing solutions use unsound heuristics, support only a subset of the language, or suffer from exponential explosion. As part of the TypeChef project, we contribute a novel variability-aware parser that can parse almost all unpreprocessed code without heuristics in practicable time. Beyond the obvious task of detecting syntax errors, our parser paves the road for further analysis, such as variability-aware type checking. We implement variability-aware parsers for Java and GNU C and demonstrate practicability by parsing the product line MobileMedia and the entire X86 architecture of the Linux kernel with 6065 variable features. Copyright is held by the author / owner(s).},
  Doi                      = {10.1145/2048066.2048128},
  ISBN                     = {9781450309400}
}

@InProceedings{Kastner2012,
  Title                    = {A variability-aware module system},
  Author                   = {K{\"{a}}stner, Christian and Ostermann, Klaus and Erdweg, Sebastian},
  Year                     = {2012},
  Pages                    = {773--791},

  Abstract                 = {Module systems enable a divide and conquer strategy to software development. To implement compile-time variability in software product lines, modules can be composed in different combinations. However, this way, variability dictates a dominant decomposition. As an alternative, we introduce a variability-aware module system that supports compile-time variability inside a module and its interface. So, each module can be considered a product line that can be type checked in isolation. Variability can crosscut multiple modules. The module system breaks with the antimodular tradition of a global variability model in product-line development and provides a path toward software ecosystems and product lines of product lines developed in an open fashion. We discuss the design and implementation of such a module system on a core calculus and provide an implementation for C as part of the TypeChef project. Our implementation supports variability inside modules from {\#}ifdef preprocessor directives and variable linking at the composition level. With our implementation, we type check all configurations of all modules of the open source product line Busybox with 811 compile-time options, perform linker check of all configurations, and report found type and linker errors - without resorting to a brute-force strategy.},
  Doi                      = {10.1145/2384616.2384673},
  ISBN                     = {9781450315616}
}

@InProceedings{Kastner2012a,
  Title                    = {A variability-aware module system},
  Author                   = {K{\"{a}}stner, Christian and Ostermann, Klaus and Erdweg, Sebastian},
  Year                     = {2012},
  Month                    = {oct},
  Number                   = {10},
  Pages                    = {773--791},
  Volume                   = {47},

  Abstract                 = {Module systems enable a divide and conquer strategy to software development. To implement compile-time variability in software product lines, modules can be composed in different combinations. However, this way, variability dictates a dominant decomposition. As an alternative, we introduce a variability-aware module system that supports compile-time variability inside a module and its interface. So, each module can be considered a product line that can be type checked in isolation. Variability can crosscut multiple modules. The module system breaks with the antimodular tradition of a global variability model in product-line development and provides a path toward software ecosystems and product lines of product lines developed in an open fashion. We discuss the design and implementation of such a module system on a core calculus and provide an implementation for C as part of the TypeChef project. Our implementation supports variability inside modules from {\#}ifdef preprocessor directives and variable linking at the composition level. With our implementation, we type check all configurations of all modules of the open source product line Busybox with 811 compile-time options, perform linker check of all configurations, and report found type and linker errors - without resorting to a brute-force strategy. Copyright {\textcopyright} 2012 ACM.},
  Doi                      = {10.1145/2398857.2384673},
  ISSN                     = {15232867}
}

@InProceedings{Karatas2013,
  Title                    = {From extended feature models to constraint logic programming},
  Author                   = {Karataş, Ahmet Serkan and Oǧuzt{\"{u}}z{\"{u}}n, Halit and Doǧru, Ali},
  Year                     = {2013},
  Month                    = {dec},
  Number                   = {12},
  Pages                    = {2295--2312},
  Volume                   = {78},

  Abstract                 = {Since feature models for realistic product families may be quite complicated, the automated analysis of feature models is desirable. Although several approaches reported in the literature address this issue, complex cross-tree relationships involving attributes in extended feature models have not been handled. In this article, we introduce a mapping from extended feature models to constraint logic programming over finite domains. This mapping is used to translate into constraint logic programs; basic, cardinality-based and extended feature models, which can include complex cross-tree relationships involving attributes. This translation enables the use of off-the-shelf constraint solvers for the automated analysis of extended feature models involving such complex relationships. We also present the performance results of some well-known analysis operations on an example translated model. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.scico.2012.06.004},
  ISSN                     = {01676423}
}

@InProceedings{Karatas2010,
  Title                    = {Mapping extended feature models to constraint logic programming over finite domains},
  Author                   = {Karataş, Ahmet Serkan and Oǧuzt{\"{u}}z{\"{u}}n, Halit and Doǧru, Ali},
  Year                     = {2010},
  Pages                    = {286--299},
  Volume                   = {6287 LNCS},

  Abstract                 = {As feature models for realistic product families may be quite complicated, automated analysis of feature models is desirable. Although several approaches reported in the literature addressed this issue, complex feature-attribute and attribute-attribute relationships in extended feature models were not handled effectively. In this article, we introduce a mapping from extended feature models to constraint logic programming over finite domains. This mapping is used to translate basic, cardinality-based, and extended feature models, which may include complex feature-feature, feature-attribute and attribute-attribute cross-tree relationships, into constraint logic programs. It thus enables use of off-the-shelf constraint solvers for the automated analysis of extended feature models involving such complex relationships. We also briefly discuss the ramifications of including feature-attribute relationships in operations of analysis. We believe that this proposal will be effective for further leveraging of constraint logic programming for automated analysis of feature models. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-15579-6_20},
  ISBN                     = {3642155782},
  ISSN                     = {03029743}
}

@InProceedings{Karatas2010a,
  Title                    = {Global constraints on feature models},
  Author                   = {Karataş, Ahmet Serkan and Oǧuzt{\"{u}}z{\"{u}}n, Halit and Doǧru, Ali},
  Year                     = {2010},
  Pages                    = {537--551},
  Volume                   = {6308 LNCS},

  Abstract                 = {Feature modeling has been found very effective for modeling and managing variability in Software Product Lines. The nature of feature models invites, sometimes even requires, the use of global constraints. This paper lays the groundwork for the inclusion of global constraints in automated reasoning on feature models. We present a mapping from extended feature models to constraint logic programming over finite domains, and show that this mapping enables using global constraints on feature attributes, as well as features, for a variety of analysis operations on feature models. We also present performance test results and discuss the benefits of using global constraints. {\textcopyright} 2010 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-15396-9_43},
  ISBN                     = {364215395X},
  ISSN                     = {03029743}
}

@Article{Kastner2014,
  Title                    = {Variability mining: Consistent semi-automatic detection of product-line features},
  Author                   = {Kastner, Christian and Dreiling, Alexander and Ostermann, Klaus},
  Year                     = {2014},
  Number                   = {1},
  Pages                    = {67--82},
  Volume                   = {40},

  Abstract                 = {Software product line engineering is an efficient means to generate a set of tailored software products from a common implementation. However, adopting a product-line approach poses a major challenge and significant risks, since typically legacy code must be migrated toward a product line. Our aim is to lower the adoption barrier by providing semi-automatic tool support-called variability mining-to support developers in locating, documenting, and extracting implementations of product-line features from legacy code. Variability mining combines prior work on concern location, reverse engineering, and variability-aware type systems, but is tailored specifically for the use in product lines. Our work pursues three technical goals: (1) we provide a consistency indicator based on a variability-aware type system, (2) we mine features at a fine level of granularity, and (3) we exploit domain knowledge about the relationship between features when available. With a quantitative study, we demonstrate that variability mining can efficiently support developers in locating features. {\textcopyright} 2014 IEEE.},
  Doi                      = {10.1109/TSE.2013.45},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@InProceedings{Kumara2013,
  Title                    = {Sharing with a difference: Realizing service-based SaaS applications with runtime sharing and variation in dynamic software product lines},
  Author                   = {Kumara, Indika and Han, Jun and Colman, Alan and Nguyen, Tuan and Kapuruge, Malinda},
  Year                     = {2013},
  Pages                    = {567--574},

  Abstract                 = {A single-instance multi-tenant (SIMT) SaaS application enables a SaaS provider to achieve economies of scale through runtime sharing. However, runtime sharing can make tenant-specific variations difficult to achieve in such an application. In this paper, we propose an approach to realizing SIMT SaaS applications, which is based on Dynamic Software Product Lines (DSPL) and supports runtime sharing and variation. With the collaboration among a subset of services as the unit of composition, the commonality among the tenants' requirements is realized in the DSPL architecture by sharing collaboration units, and their variability is realized by composing different collaboration units, all at runtime. In addition, we adopt a feature-based high-level representation of the commonality and variability between the tenants' requirements to facilitate the runtime creation and reconfiguration of their application variants. We compare our approach with two alternative approaches in terms of development effort and degree of sharing. We further quantify the runtime overhead incurred by our multi-tenancy support. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/SCC.2013.30},
  ISBN                     = {9780768550268}
}

@InProceedings{Linsbauer2014,
  Title                    = {Feature model synthesis with genetic programming},
  Author                   = {Linsbauer, Lukas and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
  Year                     = {2014},
  Pages                    = {153--167},
  Publisher                = {Springer Verlag},
  Volume                   = {8636 LNCS},

  Abstract                 = {Search-Based Software Engineering (SBSE) has proven successful on several stages of the software development life cycle. It has also been applied to different challenges in the context of Software Product Lines (SPLs) like generating minimal test suites. When reverse engineering SPLs from legacy software an important challenge is the reverse engineering of variability, often expressed in the form of Feature Models (FMs). The synthesis of FMs has been studied with techniques such as Genetic Algorithms. In this paper we explore the use of Genetic Programming for this task. We sketch our general workflow, the GP pipeline employed, and its evolutionary operators. We report our experience in synthesizing feature models from sets of feature combinations for 17 representative feature models, and analyze the results using standard information retrieval metrics. {\textcopyright} 2014 Springer International Publishing Switzerland.},
  Doi                      = {10.1007/978-3-319-09940-8_11},
  ISBN                     = {9783319099392},
  ISSN                     = {16113349}
}

@InProceedings{Lopez-Herrejon2013,
  Title                    = {Multi-objective optimal test suite computation for software product line pairwise testing},
  Author                   = {Lopez-Herrejon, Roberto E. and Chicano, Francisco and Ferrer, Javier and Egyed, Alexander and Alba, Enrique},
  Year                     = {2013},
  Pages                    = {404--407},

  Abstract                 = {Software Product Lines (SPLs) are families of related software products, which usually provide a large number of feature combinations, a fact that poses a unique set of challenges for software testing. Recently, many SPL testing approaches have been proposed, among them pair wise combinatorial techniques that aim at selecting products to test based on the pairs of feature combinations such products provide. These approaches regard SPL testing as an optimization problem where either coverage (maximize) or test suite size (minimize) are considered as the main optimization objective. Instead, we take a multi-objective view where the two objectives are equally important. In this exploratory paper we propose a zero-one mathematical linear program for solving the multi-objective problem and present an algorithm to compute the true Pareto front, hence an optimal solution, from the feature model of a SPL. The evaluation with 118 feature models revealed an interesting trade-off between reducing the number of constraints in the linear program and the runtime which opens up several venues for future research. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ICSM.2013.58}
}

@InProceedings{Lopez-Herrejon2013a,
  Title                    = {SBSE4VM: Search based software engineering for variability management},
  Author                   = {Lopez-Herrejon, Roberto E. and Egyed, Alexander},
  Year                     = {2013},
  Pages                    = {441--444},

  Abstract                 = {SBSE4VM is an ongoing Lise Meitner Fellowship project sponsored by the Austrian Science Fund (FWF) that runs for two years. The driving goal of the project is to explore the application of Search Based Software Engineering techniques to reverse engineer, evolve, and fix inconsistencies in systems with variability. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/CSMR.2013.67},
  ISBN                     = {9780769549484},
  ISSN                     = {15345351}
}

@InProceedings{Lopez-Herrejon2011,
  Title                    = {C2MV2: Consistency and composition for managing variability in multi-view systems},
  Author                   = {Lopez-Herrejon, Roberto E. and Egyed, Alexander},
  Year                     = {2011},
  Pages                    = {347--350},

  Abstract                 = {C2MV2 is an ongoing FP7-People Intra-European Marie Curie Fellowship project that runs for two years. The driving goal of the project is to apply and extend work on incremental consistency management to Software Product Lines that are developed with compositional approaches. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/CSMR.2011.49},
  ISBN                     = {9780769543437},
  ISSN                     = {15345351}
}

@InProceedings{Lopez-Herrejon2010,
  Title                    = {On the need of safe software product line architectures},
  Author                   = {Lopez-Herrejon, Roberto E. and Egyed, Alexander},
  Year                     = {2010},
  Pages                    = {493--496},
  Volume                   = {6285 LNCS},

  Abstract                 = {A Software Product Line (SPL) is a family of related software systems distinguished by the different sets of features each system provides. Over the last decade, the substantial benefits of SPL practices have been extensively documented and corroborated both in academia and industry. Several architecture methods have been proposed that employ different artifacts for expressing the components of a SPL, their properties and relationships. Of crucial importance for any SPL architecture method is to guarantee that the variability, for instance as expressed in feature models, is not only preserved but also kept consistent across all artifacts used. In this research challenge paper we argue that Safe Composition - the guarantee that all programs of a product line are type safe - can be leveraged to address this guarantee for structural properties of SPL architectures and the challenges that that entails. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-15114-9_48},
  ISBN                     = {3642151132},
  ISSN                     = {03029743}
}

@InProceedings{Lopez-Herrejon2014,
  Title                    = {Comparative analysis of classical multi-objective evolutionary algorithms and seeding strategies for pairwise testing of Software Product Lines},
  Author                   = {Lopez-Herrejon, Roberto E. and Ferrer, Javier and Chicano, Francisco and Egyed, Alexander and Alba, Enrique},
  Year                     = {2014},
  Month                    = {sep},
  Pages                    = {387--396},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {Software Product Lines (SPLs) are families of related software products, each with its own set of feature combinations. Their commonly large number of products poses a unique set of challenges for software testing as it might not be technologically or economically feasible to test of all them individually. SPL pairwise testing aims at selecting a set of products to test such that all possible combinations of two features are covered by at least one selected product. Most approaches for SPL pairwise testing have focused on achieving full coverage of all pairwise feature combinations with the minimum number of products to test. Though useful in many contexts, this single-objective perspective does not reflect the prevailing scenario where software engineers do face trade-offs between the objectives of maximizing the coverage or minimizing the number of products to test. In contrast and to address this need, our work is the first to propose a classical multi-objective formalisation where both objectives are equally important. In this paper, we study the application to SPL pairwise testing of four classical multi-objective evolutionary algorithms. We developed three seeding strategies - techniques that leverage problem domain knowledge - and measured their performance impact on a large and diverse corpus of case studies using two well-known multi-objective quality measures. Our study identifies the performance differences among the algorithms and corroborates that the more domain knowledge leveraged the better the search results. Our findings enable software engineers to select not just one solution (as in the case of single-objective techniques) but instead to select from an array of test suite possibilities the one that best matches the economical and technological constraints of their testing context.},
  Doi                      = {10.1109/CEC.2014.6900473},
  ISBN                     = {9781479914883}
}

@InProceedings{Lopez-Herrejon2014a,
  Title                    = {A parallel evolutionary algorithm for prioritized pairwise testing of software product lines},
  Author                   = {Lopez-Herrejon, Roberto E. and Ferrer, Javier and Chicano, Francisco and Haslinger, Evelyn Nicole and Egyed, Alexander and Alba, Enrique},
  Year                     = {2014},
  Pages                    = {1255--1262},
  Publisher                = {Association for Computing Machinery},

  Abstract                 = {Software Product Lines (SPLs) are families of related software systems, which provide different feature combinations. Different SPL testing approaches have been proposed. However, despite the extensive and successful use of evolutionary computation techniques for software testing, their application to SPL testing remains largely unexplored. In this paper we present the Parallel Prioritized product line Genetic Solver (PPGS), a parallel genetic algorithm for the generation of prioritized pairwise testing suites for SPLs. We perform an extensive and comprehensive analysis of PPGS with 235 feature models from a wide range of number of features and products, using 3 different priority assignment schemes and 5 product prioritization selection strategies. We also compare PPGS with the greedy algorithm prioritized-ICPL. Our study reveals that overall PPGS obtains smaller covering arrays with an acceptable performance difference with prioritized-ICPL. {\textcopyright} 2014 ACM.},
  Doi                      = {10.1145/2576768.2598305},
  ISBN                     = {9781450326629}
}

@InProceedings{Lopez-Herrejon2012,
  Title                    = {Reverse engineering feature models with evolutionary algorithms: An exploratory study},
  Author                   = {Lopez-Herrejon, Roberto Erick and Galindo, Jos{\'{e}} A. and Benavides, David and Segura, Sergio and Egyed, Alexander},
  Year                     = {2012},
  Pages                    = {168--182},
  Volume                   = {7515 LNCS},

  Abstract                 = {Successful software evolves, more and more commonly, from a single system to a set of system variants tailored to meet the similiar and yet different functionality required by the distinct clients and users. Software Product Line Engineering (SPLE) is a software development paradigm that has proven effective for coping with this scenario. At the core of SPLE is variability modeling which employs Feature Models (FMs) as the de facto standard to represent the combinations of features that distinguish the systems variants. Reverse engineering FMs consist in constructing a feature model from a set of products descriptions. This research area is becoming increasingly active within the SPLE community, where the problem has been addressed with different perspectives and approaches ranging from analysis of configuration scripts, use of propositional logic or natural language techniques, to ad hoc algorithms. In this paper, we explore the feasibility of using Evolutionary Algorithms (EAs) to synthesize FMs from the feature sets that describe the system variants. We analyzed 59 representative case studies of different characteristics and complexity. Our exploratory study found that FMs that denote proper supersets of the desired feature sets can be obtained with a small number of generations. However, reducing the differences between these two sets with an effective and scalable fitness function remains an open question. We believe that this work is a first step towards leveraging the extensive wealth of Search-Based Software Engineering techniques to address this and other variability management challenges. {\textcopyright} 2012 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-33119-0_13},
  ISBN                     = {9783642331183},
  ISSN                     = {03029743}
}

@Misc{Lopez-Herrejon2015,
  Title                    = {A systematic mapping study of search-based software engineering for software product lines},

  Author                   = {Lopez-Herrejon, Roberto E. and Linsbauer, Lukas and Egyed, Alexander},
  Month                    = {may},
  Year                     = {2015},

  Abstract                 = {Context Search-Based Software Engineering (SBSE) is an emerging discipline that focuses on the application of search-based optimization techniques to software engineering problems. Software Product Lines (SPLs) are families of related software systems whose members are distinguished by the set of features each one provides. SPL development practices have proven benefits such as improved software reuse, better customization, and faster time to market. A typical SPL usually involves a large number of systems and features, a fact that makes them attractive for the application of SBSE techniques which are able to tackle problems that involve large search spaces. Objective The main objective of our work is to identify the quantity and the type of research on the application of SBSE techniques to SPL problems. More concretely, the SBSE techniques that have been used and at what stage of the SPL life cycle, the type of case studies employed and their empirical analysis, and the fora where the research has been published. Method A systematic mapping study was conducted with five research questions and assessed 77 publications from 2001, when the term SBSE was coined, until 2014. Results The most common application of SBSE techniques found was testing followed by product configuration, with genetic algorithms and multi-objective evolutionary algorithms being the two most commonly used techniques. Our study identified the need to improve the robustness of the empirical evaluation of existing research, a lack of extensive and robust tool support, and multiple avenues worthy of further investigation. Conclusions Our study attested the great synergy existing between both fields, corroborated the increasing and ongoing interest in research on the subject, and revealed challenging open research questions.},
  Doi                      = {10.1016/j.infsof.2015.01.008},
  ISSN                     = {09505849},
  Pages                    = {33--51},
  Publisher                = {Elsevier},
  Volume                   = {61}
}

@InProceedings{Lopez-Herrejon2015a,
  Title                    = {An assessment of search-based techniques for reverse engineering feature models},
  Author                   = {Lopez-Herrejon, Roberto E. and Linsbauer, Lukas and Galindo, Jos{\'{e}} A. and Parejo, Jos{\'{e}} A. and Benavides, David and Segura, Sergio and Egyed, Alexander},
  Year                     = {2015},
  Month                    = {may},
  Pages                    = {353--369},
  Publisher                = {Elsevier Inc.},
  Volume                   = {103},

  Abstract                 = {Successful software evolves from a single system by adding and changing functionality to keep up with users' demands and to cater to their similar and different requirements. Nowadays it is a common practice to offer a system in many variants such as community, professional, or academic editions. Each variant provides different functionality described in terms of features. Software Product Line Engineering (SPLE) is an effective software development paradigm for this scenario. At the core of SPLE is variability modelling whose goal is to represent the combinations of features that distinguish the system variants using feature models, the de facto standard for such task. As SPLE practices are becoming more pervasive, reverse engineering feature models from the feature descriptions of each individual variant has become an active research subject. In this paper we evaluated, for this reverse engineering task, three standard search based techniques (evolutionary algorithms, hill climbing, and random search) with two objective functions on 74 SPLs. We compared their performance using precision and recall, and found a clear trade-off between these two metrics which we further reified into a third objective function based on F$\beta$, an information retrieval measure, that showed a clear performance improvement. We believe that this work sheds light on the great potential of search-based techniques for SPLE tasks.},
  Doi                      = {10.1016/j.jss.2014.10.037},
  ISSN                     = {01641212}
}

@Article{Lopez-Herrejon2015b,
  Title                    = {An assessment of search-based techniques for reverse engineering feature models},
  Author                   = {Lopez-Herrejon, Roberto E. and Linsbauer, Lukas and Galindo, Jos{\'{e}} A. and Parejo, Jos{\'{e}} A. and Benavides, David and Segura, Sergio and Egyed, Alexander},
  Year                     = {2015},
  Number                   = {C},
  Pages                    = {353--369},
  Volume                   = {103},

  Abstract                 = {Successful software evolves from a single system by adding and changing functionality to keep up with users' demands and to cater to their similar and different requirements. Nowadays it is a common practice to offer a system in many variants such as community, professional, or academic editions. Each variant provides different functionality described in terms of features. Software Product Line Engineering (SPLE) is an effective software development paradigm for this scenario. At the core of SPLE is variability modelling whose goal is to represent the combinations of features that distinguish the system variants using feature models, the de facto standard for such task. As SPLE practices are becoming more pervasive, reverse engineering feature models from the feature descriptions of each individual variant has become an active research subject. In this paper we evaluated, for this reverse engineering task, three standard search based techniques (evolutionary algorithms, hill climbing, and random search) with two objective functions on 74 SPLs. We compared their performance using precision and recall, and found a clear trade-off between these two metrics which we further reified into a third objective function based on F{\textless}inf{\textgreater}$\beta${\textless}/inf{\textgreater}, an information retrieval measure, that showed a clear performance improvement. We believe that this work sheds light on the great potential of search-based techniques for SPLE tasks.},
  Doi                      = {10.1016/jjss.2014.10.037},
  ISSN                     = {01641212},
  Publisher                = {Elsevier Inc.}
}

@InProceedings{Lopez-Herrejon2011a,
  Title                    = {From requirements to features: An exploratory study of feature-oriented refactoring},
  Author                   = {Lopez-Herrejon, Roberto E. and Montalvillo-Mendizabal, Leticia and Egyed, Alexander},
  Year                     = {2011},
  Pages                    = {181--190},

  Abstract                 = {More and more frequently successful software systems need to evolve into families of systems, known as Software Product Lines (SPLs), to be able to cater to the different functionality requirements demanded by different customers while at the same time aiming to exploit as much common functionality as possible. As a first step, this evolution demands a clear understanding of how the functional requirements map into the features of the original system. Using this knowledge, features can be refactored so that they are reused for building the new systems of the evolved SPL. In this paper we present our experience in refactoring features based on the requirements specifications of a small and a medium size systems. Our work identified eight refactoring patterns that describe how to extract the elements of features which were subsequently implemented using Feature Oriented Software Development (FOSD) a novel modularization paradigm whose driving goal is to effectively modularize features for the development of variable systems. We argue that the identification of refactoring patterns are a stepping stone towards automating Feature-Oriented Refactoring, and present some open issues that should be addressed to that avail. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/SPLC.2011.52},
  ISBN                     = {9780769544878}
}

@Misc{Machado2014,
  Title                    = {On strategies for testing software product lines: A systematic literature review},

  Author                   = {Machado, Ivan Do Carmo and McGregor, John D. and Cavalcanti, Yguarat{\~{a}} Cerqueira and {De Almeida}, Eduardo Santana},
  Year                     = {2014},

  Abstract                 = {Context Testing plays an important role in the quality assurance process for software product line engineering. There are many opportunities for economies of scope and scale in the testing activities, but techniques that can take advantage of these opportunities are still needed. Objective The objective of this study is to identify testing strategies that have the potential to achieve these economies, and to provide a synthesis of available research on SPL testing strategies, to be applied towards reaching higher defect detection rates and reduced quality assurance effort. Method We performed a literature review of two hundred seventy-six studies published from the year 1998 up to the 1st semester of 2013. We used several filters to focus the review on the most relevant studies and we give detailed analyses of the core set of studies. Results The analysis of the reported strategies comprised two fundamental aspects for software product line testing: the selection of products for testing, and the actual test of products. Our findings indicate that the literature offers a large number of techniques to cope with such aspects. However, there is a lack of reports on realistic industrial experiences, which limits the inferences that can be drawn. Conclusion This study showed a number of leveraged strategies that can support both the selection of products, and the actual testing of products. Future research should also benefit from the problems and advantages identified in this study. {\textcopyright} 2014 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2014.04.002},
  ISSN                     = {09505849},
  Number                   = {10},
  Pages                    = {1183--1199},
  Publisher                = {Elsevier},
  Volume                   = {56}
}

@Article{MaianideMello2014,
  Title                    = {Verification of Software Product Line artefacts: A checklist to support feature model inspections},
  Author                   = {{Maiani de Mello}, Rafael and {Nogueira Teixeira}, Eld{\^{a}}nae and Schots, Marcelo and {Lima Werner}, Cl{\'{a}}udia Maria and Travassos, Guilherme Horta},
  Year                     = {2014},
  Number                   = {5},
  Pages                    = {720--745},
  Volume                   = {20},

  Abstract                 = {Software Product Line Engineering (SPL) should ensure the correctness, completeness and consistency of its artefacts and related domain to prevent the propagation of defects in derived products. Software inspection techniques are effective in detecting defects in software artefacts and avoiding their propagation throughout the software development process. However, the results of a quasi-systematic review of the technical literature reported in this paper pointed to a lack of such techniques to support the inspection of SPL artefacts, including techniques to support the inspection of feature models (FMs) that are largely used in domain modelling. Therefore, a checklist-based inspection technique (FMCheck) has been developed to support the detection of defects on FMs. FMCheck is configurable and can be applied to the original feature model notation (the FODA approach) and its extensions, including the Odyssey-FEX notation. The inspection technique was empirically evaluated, having indicated its feasibility and effectiveness. It is possible to see that inspectors applying FMCheck to inspect FMs can be more effective than those applying ad-hoc techniques, regarding four distinct domains. {\textcopyright} J.UCS.},
  ISSN                     = {09486968},
  Publisher                = {IICM}
}

@InProceedings{Marinho2011,
  Title                    = {A verification mechanism of feature models for mobile and context-aware software product lines},
  Author                   = {Marinho, Fabiana G. and Andrade, Rossana M C and Werner, Cl{\'{a}}udia},
  Year                     = {2011},
  Pages                    = {1--10},

  Abstract                 = {Software Product Lines (SPLs) have been used to develop mobile and context-aware applications, which provide services and data for their users from anywhere and at any time using context information. In SPLs, commonality and variability of a system family are identified and often documented in a feature model. However, the development of a feature model for mobile and context-aware SPLs is not trivial, since it should comprise system and context information. Furthermore, the consistency check of feature models in the considered domain is also complex and demands advanced skills of software engineers. This paper proposes a mechanism to formalize and verify the correctness and consistency of feature models for mobile and context-aware SPLs based on a profile enriched with OCL specifications. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/SBCARS.2011.9},
  ISBN                     = {9780769546261}
}

@InProceedings{Mazo2012,
  Title                    = {VariaMos: A tool for product line driven systems engineering with a constraint based approach},
  Author                   = {Mazo, Ra{\'{u}}l and Salinesi, Camille and Diaz, Daniel},
  Year                     = {2012},
  Pages                    = {147--154},
  Publisher                = {CEUR-WS},
  Volume                   = {855},

  Abstract                 = {The creation of error-free variability models and their usage in product line analysis and product derivation is central to product line engineering (PLE). The complexity of these tasks makes tool support a success-critical factor. Tools supporting the core activities of PLE are a challenge and a real need for academics, industrial researchers, and practitioners of the PLE domain. In this paper, we present a tool for variability modeling, model integration, verification and analysis, derivation requirements specification and product derivation.},
  ISSN                     = {16130073}
}

@Article{Mazo2012a,
  Title                    = {Constraints: The heart of domain and application engineering in the product lines engineering strategy},
  Author                   = {Mazo, Ra{\'{u}}l and Salinesi, Camille and Diaz, Daniel and Djebbi, Olfa and Lora-Michiels, Alberto},
  Year                     = {2012},

  Month                    = {apr},
  Number                   = {2},
  Pages                    = {33--68},
  Volume                   = {3},

  Abstract                 = {Drawing from an analogy between features based Product Line (PL) models and Constraint Programming (CP), this paper explores the use of CP in the Domain Engineering and Application Engineering activities that are put in motion in a Product Line Engineering strategy. Specifying a PL as a constraint program instead of a feature model carries out two important qualities of CP: expressiveness and direct automation. On the one hand, variables in CP can take values over boolean, integer, real or even complex domains and not only boolean values as in most PL languages such as the Feature-Oriented Domain Analysis (FODA). Specifying boolean, arithmetic, symbolic and reified constraint, provides a power of expression that spans beyond that provided by the boolean dependencies in FODA models. On the other hand, PL models expressed as constraint programs can directly be executed and analyzed by off-the-shelf solvers. This paper explores the issues of (a) how to specify a PL model using CP, including in the presence of multi-model representation, (b) how to verify PL specifications, (c) how to specify configuration requirements, and (d) how to support the product configuration activity. Tests performed on a benchmark of 50 PL models show that the approach is efficient and scales up easily to very large and complex PL specifications. Copyright {\textcopyright} 2012, IGI Global.},
  Doi                      = {10.4018/jismd.2012040102},
  ISSN                     = {19478186}
}

@InProceedings{Mazo2011,
  Title                    = {Transforming attribute and clone-enabled feature models into constraint programs over finite domains},
  Author                   = {Mazo, Ra{\'{u}}l and Salinesi, Camille and Diaz, Daniel and Lora-Michiels, Alberto},
  Year                     = {2011},
  Pages                    = {188--199},

  Abstract                 = {Product line models are important artefacts in product line engineering. One of the most popular languages to model the variability of a product line is the feature notation. Since the initial proposal of feature models in 1990, the notation has evolved in different aspects. One of the most important improvements allows specify the number of instances that a feature can have in a particular product. This improvement implies an important increase on the number of variables needed to represent a feature model. Another improvement consists in allowing features to have attributes, which can take values on a different domain than the boolean one. These two extensions have increased the complexity of feature models and therefore have made more difficult the manually or even automated reasoning on feature models. To the best of our knowledge, very few works exist in literature to address this problem. In this paper we show that reasoning on extended feature models is easy and scalable by using constraint programming over integer domains. The aim of the paper is double (a) to show the rules for transforming extended feature models into constraint programs, and (b) to demonstrate, by means of 11 reasoning operations over feature models, the usefulness and benefits of our approach. We evaluated our approach by transforming 60 feature models of sizes up to 2000 features and by comparing it with 2 other approaches available in the literature. The evaluation showed that our approach is correct, useful and scalable to industry size models.},
  ISBN                     = {9789898425577}
}

@InProceedings{Metzger2014,
  Title                    = {Software product line engineering and variability management: Achievements and challenges},
  Author                   = {Metzger, Andreas and Pohl, Klaus},
  Year                     = {2014},
  Month                    = {may},
  Pages                    = {70--84},
  Publisher                = {Association for Computing Machinery, Inc},

  Abstract                 = {Software product line engineering has proven to empower organizations to develop a diversity of similar software-intensive systems (applications) at lower cost, in shorter time, and with higher quality when compared with the development of single systems. Over the last decade the software product line engineering research community has grown significantly. It has produced impressive research results both in terms of quality as well as quantity. We identified over 600 relevant research and experience papers published within the last seven years in established conferences and journals. We briefly summarize the major research achievements of these past seven years. We structure this research summary along a standardized software product line framework. Further, we outline current and future research challenges anticipated from major trends in software engineering and technology.},
  Doi                      = {10.1145/2593882.2593888},
  ISBN                     = {9781450328654}
}

@InProceedings{Millo2013,
  Title                    = {Compositional verification of software product lines},
  Author                   = {Millo, Jean Vivien and Ramesh, S. and Krishna, Shankara Narayanan and Narwane, Ganesh Khandu},
  Year                     = {2013},
  Pages                    = {109--123},
  Volume                   = {7940 LNCS},

  Abstract                 = {This paper presents a novel approach to the design verification of Software Product Lines (SPL). The proposed approach assumes that the requirements and designs at the feature level are modeled as finite state machines with variability information. The variability information at the requirement and design levels are expressed differently and at different levels of abstraction. Also the proposed approach supports verification of SPL in which new features and variability may be added incrementally. Given the design and requirements of an SPL, the proposed design verification method ensures that every product at the design level behaviourally conforms to a product at the requirement level. The conformance procedure is compositional in the sense that the verification of an entire SPL consisting of multiple features is reduced to the verification of the individual features. The method has been implemented and demonstrated in a prototype tool SPLEnD (SPL Engine for Design Verification) on a couple of fairly large case studies. {\textcopyright} 2013 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-38613-8_8},
  ISBN                     = {9783642386121},
  ISSN                     = {03029743}
}

@InCollection{Mohabbati2014,
  Title                    = {Software product line engineering to develop variant-rich web services},
  Author                   = {Mohabbati, Bardia and Asadi, Mohsen and Ga{\v{s}}evi{\'{c}}, Dragan and Lee, Jaejoon},
  Publisher                = {Springer New York},
  Year                     = {2014},
  Month                    = {oct},
  Pages                    = {535--562},

  Abstract                 = {Service-Oriented Architecture (SOA) enables enterprise for distributed and flexible software development. SOA aims at promoting effective software asset reuse by means of encapsulating functionalities as reusable services accessible through well-defined interfaces. However, one of the challenging problems for the realization of this vision is an need for design and management of variants of SOA-based solutions. Such SOA-based solutions require customization to meet stakeholders' individual functional and non-functional requirements. In this chapter, a methodological foundation for modeling and developing variant-rich SOA-solutions by incorporating the principles of Software Product Line Engineering (SPLE) into the SOA development life cycle.},
  Doi                      = {10.1007/978-1-4614-7518-7_21},
  ISBN                     = {9781461475187}
}

@InProceedings{Moriz2014,
  Title                    = {Assisted design for automation systems - From formal requirements to final designs},
  Author                   = {Moriz, Natalia and B{\"{o}}ttcher, Bj{\"{o}}rn and Niggemann, Oliver and Lackhove, Josef},
  Year                     = {2014},
  Month                    = {jan},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {In this paper, the authors present an engineering approach for generating automation system solutions based on formalised requirements. This enables assistant systems which guide engineers during the design phase of todays more and more complex automation systems. A software prototype is used for the evaluation of this approach in practice. The main contribution is to directly use a formal requirements model as input for the automated synthesis of automation systems and to formalise the expert knowledge for this synthesis. The result are consistent, maintainable automation systems and with that shorter and reproducible development cycles.},
  Doi                      = {10.1109/ETFA.2014.7005288},
  ISBN                     = {9781479948468}
}

@InProceedings{Murguzur2014,
  Title                    = {Context-aware staged configuration of process variants@runtime},
  Author                   = {Murguzur, Aitor and {De Carlos}, Xabier and Trujillo, Salvador and Sagardui, Goiuria},
  Year                     = {2014},
  Pages                    = {241--255},
  Publisher                = {Springer Verlag},
  Volume                   = {8484 LNCS},

  Abstract                 = {Process-based context-aware applications are increasingly becoming more complex and dynamic. Besides the large sets of process variants to be managed in such dynamic systems, process variants need to be context sensitive in order to accommodate new user requirements and intrinsic complexity. This paradigm shift forces us to defer decisions to runtime where process variants must be customized and executed based on a recognized context. However, there exists a lack of deferral of the entire process variant configuration and execution to perform an automated decision of subsequent variation points at runtime. In this paper, we present a holistic methodology to automatically resolve process variability at runtime. The proposed solution performs a staged configuration considering static and dynamic context data to accomplish effective decision making. We demonstrate our approach by exemplifying a storage operation process in a smart logistics scenario. Our evaluation demonstrates the performance and scalability results of our methodology. {\textcopyright} 2014 Springer International Publishing.},
  Doi                      = {10.1007/978-3-319-07881-6_17},
  ISBN                     = {9783319078809},
  ISSN                     = {16113349}
}

@Article{Nohrer2013,
  Title                    = {C2O configurator: A tool for guided decision-making},
  Author                   = {N{\"{o}}hrer, Alexander and Egyed, Alexander},
  Year                     = {2013},
  Number                   = {2},
  Pages                    = {265--296},
  Volume                   = {20},

  Abstract                 = {Decision models are widely used in software engineering to describe and restrict decision-making (e.g., deriving a product from a product-line). Since decisions are typically interdependent, it is often neither obvious which decisions have the most significant impact nor which decisions might ultimately conflict. Unfortunately, the current state-of-the-art provides little support for dealing with such situations. On the one hand, some conflicts can be avoided by providing more freedom in which order decisions are made (i.e., most important decisions first). On the other hand, conflicts are unavoidable at times, and living with conflicts may be preferable over forcing the user to fix them right away - particularly because fixing conflicts becomes easier as more is known about a user's intentions. This paper introduces the C2O (Configurator 2.0) tool for guided decision-making. The tool allows the user to answer questions in an arbitrary order - with and without the presence of inconsistencies. While giving users those freedoms, it still supports and guides them by (i) rearranging the order of questions according to their potential to minimize user input, (ii) providing guidance to avoid follow-on conflicts, and (iii) supporting users in fixing conflicts at a later time. {\textcopyright} 2013 Springer Science+Business Media New York.},
  Doi                      = {10.1007/s10515-012-0117-4},
  ISSN                     = {09288910}
}

@Article{Nadi2015,
  Title                    = {Where do configuration constraints stem from? An extraction approach and an empirical study},
  Author                   = {Nadi, Sarah and Berger, Thorsten and K{\"{a}}stner, Christian and Czarnecki, Krzysztof},
  Year                     = {2015},

  Month                    = {aug},
  Number                   = {8},
  Pages                    = {820--841},
  Volume                   = {41},

  Abstract                 = {Highly configurable systems allow users to tailor software to specific needs. Valid combinations of configuration options are often restricted by intricate constraints. Describing options and constraints in a variability model allows reasoning about the supported configurations. To automate creating and verifying such models, we need to identify the origin of such constraints. We propose a static analysis approach, based on two rules, to extract configuration constraints from code. We apply it on four highly configurable systems to evaluate the accuracy of our approach and to determine which constraints are recoverable from the code. We find that our approach is highly accurate (93{\%} and 77{\%} respectively) and that we can recover 28{\%} of existing constraints. We complement our approach with a qualitative study to identify constraint sources, triangulating results from our automatic extraction, manual inspections, and interviews with 27 developers. We find that, apart from low-level implementation dependencies, configuration constraints enforce correct runtime behavior, improve users' configuration experience, and prevent corner cases. While the majority of constraints is extractable from code, our results indicate that creating a complete model requires further substantial domain knowledge and testing. Our results aim at supporting researchers and practitioners working on variability model engineering, evolution, and verification techniques.},
  Doi                      = {10.1109/TSE.2015.2415793},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@InProceedings{Nguyen2012,
  Title                    = {Enabling the delivery of customizable web services},
  Author                   = {Nguyen, Tuan and Colman, Alan and Han, Jun},
  Year                     = {2012},
  Pages                    = {138--145},

  Abstract                 = {Due to differences in consumer requirements, a Web service usually has multiple service variants for use in different business contexts. In such situations, delivering customizable services helps increase efficiency not only in service description and publication but also in service consumption. However, existing approaches for providing customizable services enforce the tight coupling between providers and consumers. Nor do they take into account recursive nature of service customization. Consequently, the approaches hamper the widespread use of customizable services in SOA. In this paper, we propose a language, namely Web Service Variability Description Language (WSVL), which formalizes the customization interface between providers and consumers using the XML technology to address these problems. We also describe a reference architecture for service deployment and a service engineering technique which together support the provisioning of WSVL-based customizable services. A proof-of-concept prototype system is introduced to demonstrate the feasibility of our approach. {\textcopyright} 2012 IEEE.},
  Doi                      = {10.1109/ICWS.2012.23},
  ISBN                     = {9780769547527}
}

@InProceedings{Nguyen2011,
  Title                    = {Modeling and managing variability in process-based service compositions},
  Author                   = {Nguyen, Tuan and Colman, Alan and Han, Jun},
  Year                     = {2011},
  Pages                    = {404--420},
  Volume                   = {7084 LNCS},

  Abstract                 = {Variability in process-based service compositions needs to be explicitly modeled and managed in order to facilitate service/process customization and increase reuse in service/process development. While related work has been able to capture variability and variability dependencies within a composition, these approaches fail to capture variability dependenciesbetween the composition and partner services. Consequently, these approaches cannot address the situation when a composite service is orchestrated from partner services some of which are customizable. In this paper, we propose a feature-based approach that is able to effectively model variability within and across compositions. The approach is supported by a process development methodology that enables the systematic reuse and management of variability. We develop a prototype system supporting extended BPMN 2.0 to demonstrate the feasibility of our approach. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-25535-9_27},
  ISBN                     = {9783642255342},
  ISSN                     = {03029743}
}

@Misc{Nualart-Vilaplana2014,
  Title                    = {How we draw texts: A review of approaches to text visualization and exploration},

  Author                   = {Nualart-Vilaplana, Jaume and P{\'{e}}rez-Montoro, Mario and Whitelaw, Mitchell},
  Month                    = {may},
  Year                     = {2014},

  Abstract                 = {This paper presents a review of approaches to text visualization and exploration. Text visualization and exploration, we argue, constitute a subfield of data visualization, and are fuelled by the advances being made in text analysis research and by the growing amount of accessible data in text format. We propose an original classification for a total of 49 cases based on the visual features of the approaches adopted, identified using an inductive process of analysis. We group the cases (published between 1994 and 2013) in two categories: single-text visualizations and text-collection visualizations, both of which can be explored and compared online.},
  Doi                      = {10.3145/epi.2014.may.02},
  ISSN                     = {16992407},
  Number                   = {3},
  Pages                    = {221--235},
  Publisher                = {El Profesional de la Informacion},
  Volume                   = {23}
}

@InProceedings{Nummenmaa2014,
  Title                    = {On the Use of LTSs to Analyze Software Product Line Products Composed of Features},
  Author                   = {Nummenmaa, Jyrki and Nummenmaa, Timo and Zhang, Zheying},
  Year                     = {2014},
  Pages                    = {531--541},
  Publisher                = {Springer Verlag},
  Volume                   = {214},

  Abstract                 = {In product line engineering, it is common to define the products as sets of features, where each feature has a related set of requirements. Typically, there is a common set of features/requirements, and some variable features/requirements for building different products. In an earlier proposal to use labeled transition systems (LTSs) to model and check the products, the products were composed using the feature-oriented approach and LTS models were analyzed using a related LTS analyzer tool. However, no further details or analysis about the models and possible conflicts were given. We investigate in more detail the types of conflicts that may arise and discuss the integration strategies for building an integrated LTS for the product composed of features. {\textcopyright} Springer-Verlag Berlin Heidelberg 2014.},
  Doi                      = {10.1007/978-3-642-37832-4_48},
  ISSN                     = {21945357}
}

@Article{Pascual2015,
  Title                    = {Applying multiobjective evolutionary algorithms to dynamic software product lines for reconfiguring mobile applications},
  Author                   = {Pascual, Gustavo G. and Lopez-Herrejon, Roberto E. and Pinto, M{\'{o}}nica and Fuentes, Lidia and Egyed, Alexander},
  Year                     = {2015},
  Number                   = {C},
  Pages                    = {392--411},
  Volume                   = {103},

  Abstract                 = {Mobile applications require dynamic reconfiguration services (DRS) to self-adapt their behavior to the context changes (e.g., scarcity of resources). Dynamic Software Product Lines (DSPL) are a well-accepted approach to manage runtime variability, by means of late binding the variation points at runtime. During the system's execution, the DRS deploys different configurations to satisfy the changing requirements according to a multiobjective criterion (e.g., insufficient battery level, requested quality of service). Search-based software engineering and, in particular, multiobjective evolutionary algorithms (MOEAs), can generate valid configurations of a DSPL at runtime. Several approaches use MOEAs to generate optimum configurations of a Software Product Line, but none of them consider DSPLs for mobile devices. In this paper, we explore the use of MOEAs to generate at runtime optimum configurations of the DSPL according to different criteria. The optimization problem is formalized in terms of a Feature Model (FM), a variability model. We evaluate six existing MOEAs by applying them to 12 different FMs, optimizing three different objectives (usability, battery consumption and memory footprint). The results are discussed according to the particular requirements of a DRS for mobile applications, showing that PAES and NSGA-II are the most suitable algorithms for mobile environments.},
  Doi                      = {10.1016/jjss.2014.12.041},
  ISSN                     = {01641212},
  Publisher                = {Elsevier Inc.}
}

@InProceedings{Pascual2015a,
  Title                    = {Applying multiobjective evolutionary algorithms to dynamic software product lines for reconfiguring mobile applications},
  Author                   = {Pascual, Gustavo G. and Lopez-Herrejon, Roberto E. and Pinto, M{\'{o}}nica and Fuentes, Lidia and Egyed, Alexander},
  Year                     = {2015},
  Month                    = {may},
  Pages                    = {392--411},
  Publisher                = {Elsevier Inc.},
  Volume                   = {103},

  Abstract                 = {Mobile applications require dynamic reconfiguration services (DRS) to self-adapt their behavior to the context changes (e.g., scarcity of resources). Dynamic Software Product Lines (DSPL) are a well-accepted approach to manage runtime variability, by means of late binding the variation points at runtime. During the system's execution, the DRS deploys different configurations to satisfy the changing requirements according to a multiobjective criterion (e.g., insufficient battery level, requested quality of service). Search-based software engineering and, in particular, multiobjective evolutionary algorithms (MOEAs), can generate valid configurations of a DSPL at runtime. Several approaches use MOEAs to generate optimum configurations of a Software Product Line, but none of them consider DSPLs for mobile devices. In this paper, we explore the use of MOEAs to generate at runtime optimum configurations of the DSPL according to different criteria. The optimization problem is formalized in terms of a Feature Model (FM), a variability model. We evaluate six existing MOEAs by applying them to 12 different FMs, optimizing three different objectives (usability, battery consumption and memory footprint). The results are discussed according to the particular requirements of a DRS for mobile applications, showing that PAES and NSGA-II are the most suitable algorithms for mobile environments.},
  Doi                      = {10.1016/j.jss.2014.12.041},
  ISSN                     = {01641212}
}

@InProceedings{Pascual2013,
  Title                    = {Run-time adaptation of mobile applications using genetic algorithms},
  Author                   = {Pascual, Gustavo G. and Pinto, M{\'{o}}nica and Fuentes, Lidia},
  Year                     = {2013},
  Pages                    = {73--82},

  Abstract                 = {Mobile applications run in environments where the context is continuously changing. Therefore, it is necessary to provide support for the run-time adaptation of these applications. This support is usually achieved by middleware platforms that offer a context-aware dynamic reconfiguration service. However, the main shortcoming of existing approaches is that both the list of possible configurations and the plans to adapt the application to a new configuration are usually specified at design-time. In this paper we present an approach that allows the automatic generation at run-time of application configurations and of reconfiguration plans. Moreover, the generated configurations are optimal regarding the provided functionality and, more importantly, without exceeding the available resources (e.g. battery). This is performed by: (1) having the information about the application variability available at runtime using feature models, and (2) using a genetic algorithm that allows generating an optimal configuration at runtime. We have specified a case study and evaluated our approach, and the results show that it is efficient enough as to be used on mobile devices without introducing an excessive overhead. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/SEAMS.2013.6595494},
  ISBN                     = {9781467344012},
  ISSN                     = {21572305}
}

@Article{Perrouin2012,
  Title                    = {Pairwise testing for software product lines: Comparison of two approaches},
  Author                   = {Perrouin, Gilles and Oster, Sebastian and Sen, Sagar and Klein, Jacques and Baudry, Benoit and le Traon, Yves},
  Year                     = {2012},

  Month                    = {sep},
  Number                   = {3-4},
  Pages                    = {605--643},
  Volume                   = {20},

  Abstract                 = {Software Product Lines (SPL) are difficult to validate due to combinatorics induced by variability, which in turn leads to combinatorial explosion of the number of derivable products. Exhaustive testing in such a large products space is hardly feasible. Hence, one possible option is to test SPLs by generating test configurations that cover all possible t feature interactions (t-wise). It dramatically reduces the number of test products while ensuring reasonable SPL coverage. In this paper, we report our experience on applying t-wise techniques for SPL with two independent toolsets developed by the authors. One focuses on generality and splits the generation problem according to strategies. The other emphasizes providing efficient generation. To evaluate the respective merits of the approaches, measures such as the number of generated test configurations and the similarity between them are provided. By applying these measures, we were able to derive useful insights for pairwise and t-wise testing of product lines. {\textcopyright} 2011 Springer Science+Business Media, LLC.},
  Doi                      = {10.1007/s11219-011-9160-9},
  ISSN                     = {09639314}
}

@Article{Perrouin2012a,
  Title                    = {Weaving variability into domain metamodels},
  Author                   = {Perrouin, Gilles and Vanwormhoudt, Gilles and Morin, Brice and Lahire, Philippe and Barais, Olivier and J{\'{e}}z{\'{e}}quel, Jean Marc},
  Year                     = {2012},

  Month                    = {jul},
  Number                   = {3},
  Pages                    = {361--383},
  Volume                   = {11},

  Abstract                 = {Domain-specific modeling languages (DSMLs) are the essence of MDE. A DSML describes the concepts of a particular domain in a metamodel, as well as their relationships. Using a DSML, it is possible to describe a wide range of different models that often share a common base and vary on some parts. On the one hand, some current approaches tend to distinguish the variability language from the DSMLs themselves, implying greater learning curve for DSMLs stakeholders and a significant overhead in product line engineering. On the other hand, approaches integrating variability in DSMLs lack generality and tool support. We argue that aspect-oriented modeling techniques enabling flexible metamodel composition and results obtained by the software product line community to manage and resolve variability form the pillars for a solution for integrating variability into DSMLs. In this article, we consider variability as an independent and generic aspect to be woven into the DSML. In particular, we detail how variability is woven and how to perform product line derivation. We validate our approach through the weaving of variability into two different metamodels: Ecore-widely used for DSML definition-and SmartAdapters, our aspect model weaver. These results emphasize how new abilities of the language can be provided by this means. {\textcopyright} 2010 Springer-Verlag.},
  Doi                      = {10.1007/s10270-010-0186-4},
  ISSN                     = {16191366}
}

@InProceedings{Pohl2011,
  Title                    = {A performance comparison of contemporary algorithmic approaches for automated analysis operations on feature models},
  Author                   = {Pohl, Richard and Lauenroth, Kim and Pohl, Klaus},
  Year                     = {2011},
  Pages                    = {313--322},

  Abstract                 = {The formalization of variability models (e.g. feature models) is a prerequisite for the automated analysis of these models. The efficient execution of the analysis operations depends on the selection of well-suited solver implementations. Regarding feature models, on the one hand, the formalization with Boolean expressions enables the use of SAT or BDD solvers. On the other hand, feature models can be transformed into a Constraint-Satisfaction Problem (CSP) in order to use CSP solvers for validation. This paper presents a performance comparison regarding nine contemporary high-performance solvers, three for each base problem structure (BDD, CSP, and SAT). Four operations on 90 feature models are run on each solver. The results will in turn clear the way for new improvements regarding the automatic verification of software product lines, since the efficient execution of analysis operations is essential to such automatic verification approaches. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ASE.2011.6100068},
  ISBN                     = {9781457716393}
}

@InProceedings{Pohl2013,
  Title                    = {Measuring the structural complexity of feature models},
  Author                   = {Pohl, Richard and Stricker, Vanessa and Pohl, Klaus},
  Year                     = {2013},
  Pages                    = {454--464},

  Abstract                 = {The automated analysis of feature models (FM) is based on SAT, BDD, and CSP - known NP-complete problems. Therefore, the analysis could have an exponential worst-case execution time. However, for many practical relevant analysis cases, state-of-the-art (SOTA) analysis tools quite successfully master the problem of exponential worst-case execution time based on heuristics. So far, however, very little is known about the structure of FMs that cause the cases in which the execution time (hardness) for analyzing a given FM increases unpredictably for SOTA analysis tools. In this paper, we propose to use width measures from graph theory to characterize the structural complexity of FMs as a basis for an estimation of the hardness of analysis operations on FMs with SOTA analysis tools. We present an experiment that we use to analyze the reasonability of graph width measures as metric for the structural complexity of FMs and the hardness of FM analysis. Such a complexity metric can be used as a basis for a unified method to systematically improve SOTA analysis tools. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ASE.2013.6693103},
  ISBN                     = {9781479902156}
}

@InProceedings{Quinton2013,
  Title                    = {Cardinality-based feature models with constraints: A pragmatic approach},
  Author                   = {Quinton, Cl{\'{e}}ment and Romero, Daniel and Duchien, Laurence},
  Year                     = {2013},
  Pages                    = {162--166},

  Abstract                 = {Feature models originating from Software Product Line Engineering are a well-known approach to variability modeling. In many situations, the variability does not apply only on features but also on the number of times these features can be cloned. In such a case, cardinality-based feature models are used to specify the number of clones for a given feature. Although previous works already investigated approaches for feature modeling with cardinality, there is still a lack of support for constraints in the presence of clones. To overcome this limitation, we present an abstract model to define constraints in cardinality-based feature models and propose a formal semantics for this kind of constraints. We illustrate the practical usage of our approach with examples from our recent experiences on cloud computing platform configuration. {\textcopyright} 2013 ACM.},
  Doi                      = {10.1145/2491627.2491638},
  ISBN                     = {9781450319683}
}

@InCollection{Rabiser2014,
  Title                    = {Configuring and Generating Technical Documents},
  Author                   = {Rabiser, Rick and Vierhauser, Michael and Lehofer, Martin and Gr{\"{u}}nbacher, Paul and M{\"{a}}nnist{\"{o}}, Tomi},
  Publisher                = {Elsevier Inc.},
  Year                     = {2014},
  Month                    = {apr},
  Pages                    = {241--250},

  Abstract                 = {In industrial software development salespeople, product managers, or technical writers frequently create documents such as offers, contracts, user manuals, or technical documentation. For products that are configured specifically for different customers, the documentation also needs to be adapted to match the product. Such adaptation of documents is tedious and error-prone and can easily lead to inconsistencies. Stakeholders thus need configuration support for adapting documents. We describe a flexible approach for automatically generating product-specific documents based on product line variability models. We report on an industrial case example of applying the approach to support configuring and generating product-specific documents in an automation software product line. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
  Doi                      = {10.1016/B978-0-12-415817-7.00020-7},
  ISBN                     = {9780124158177}
}

@InProceedings{Ramos2014,
  Title                    = {Automated enterprise-level analysis of archimate models},
  Author                   = {Ramos, Andres and Gomez, Paola and S{\'{a}}nchez, Mario and Villalobos, Jorge},
  Year                     = {2014},
  Pages                    = {439--453},
  Publisher                = {Springer Verlag},
  Volume                   = {175 LNBIP},

  Abstract                 = {Around the world, Enterprise Architecture (EA) practices are been formed in large and medium companies that see in IT either a competitive advantage or a requirement for survival. These EA practices produce models that conceptualize the enterprise, and are commonly used only for communication purposes. Using these models also for analysis purposes is desirable, but this is hard to do because of the complexity and size of these models. Automated analysis tools seem to be adequate mechanisms to solve this issue, but currently there is a problem of mismatch between the information available in the models, and the information that the automated mechanisms require. To address this, this paper proposes a characterization of analysis functions, which makes explicit the information that each one requires to be executable (among other things). Furthermore, the paper presents ArchiAnalysis, an extensible tool for applying analysis functions over ArchiMate models. {\textcopyright} Springer-Verlag Berlin Heidelberg 2014.},
  Doi                      = {10.1007/978-3-662-43745-2},
  ISBN                     = {9783662437445},
  ISSN                     = {18651348}
}

@InProceedings{Regnell2011,
  Title                    = {Exploring Software Product Management decision problems with constraint solving - Opportunities for prioritization and release planning},
  Author                   = {Regnell, Bj{\"{o}}rn and Kuchcinski, Krzysztof},
  Year                     = {2011},
  Pages                    = {47--56},

  Abstract                 = {Decision-making is central to Software Product Management (SPM) and includes deciding on requirements priorities and the content of coming releases. Several algorithms for prioritization and release planning have been proposed, where humans with or without machine support enact a series of steps to produce a decision outcome. Instead of applying some specific algorithm to find an acceptable solution to a decision problem, we propose to model SPM decision-making as a Constraint Satisfaction Problem (CSP), where relative and absolute priorities, interdependencies, and other constraints are expressed as relations among variables representing entities such as feature priorities, stakeholder preferences, and resource constraints. The solution space is then explored with the help of a constraint solver without humans needing to care about specific algorithms. This paper discusses advantages and limitations of CSP modeling in SPM and gives principal examples as a proof-of-concept of CSP modeling in requirements prioritization and release planning. A discussion of further research on constraint solving in SPM is also given. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/IWSPM.2011.6046203},
  ISBN                     = {9781457711473}
}

@Article{Rincon2014,
  Title                    = {An ontological rule-based approach for analyzing dead and false optional features in feature models},
  Author                   = {Rinc{\'{o}}n, L. F. and Giraldo, G. L. and Mazo, R. and Salinesi, C.},
  Year                     = {2014},

  Month                    = {feb},
  Pages                    = {111--132},
  Volume                   = {302},

  Abstract                 = {Feature models are a common way to represent variability requirements of software product lines by expressing the set of feature combinations that software products can have. Assuring quality of feature models is thus of paramount importance for assuring quality in software product line engineering. However, feature models can have several types of defects that disminish benefits of software product line engineering.Two of such defects are dead features and false optional features. Several state-of-the-art techniques identify these defects, but only few of them tackle the problem of identifying their causes. Besides, the explanations they provide are cumbersome and hard to understand by humans. In this paper, we propose an ontological rule-based approach to: (a) identify dead and false optional features; (b)identify certain causes of these defects; and (c) explain these causes in natural language helping modelers to correct found defects. We represent our approach with a feature model taken from literature. A preliminary empirical evaluation of our approach over 31 FMs shows that our proposal is effective, accurate and scalable to 150 features. {\textcopyright} 2014 Elsevier B.V.},
  Doi                      = {10.1016/j.entcs.2014.01.023},
  ISSN                     = {15710661}
}

@InCollection{Rock2015,
  Title                    = {Variability management},
  Author                   = {Rock, Georg and Theis, Karsten and Wischnewski, Patrick},
  Publisher                = {Springer International Publishing},
  Year                     = {2015},
  Month                    = {jan},
  Pages                    = {491--519},

  Abstract                 = {The global market, different and changing environmental laws, the customer wish for individualization, time-to-market, product costs, and the pressure on manufacturers to discover new product niches, to name only a few variability drivers, result in an ever increasing number of product variants in nearly all engineering disciplines as, for example, in car manufacturing. Mastering the related increasing product complexity throughout the whole product lifecycle is and remains one of the key advantages in competition for the future. Currently for a manufacturer, as for any other discipline, it is no option not to invest in an efficient and effective variability handling machinery able to cope with the arising challenges. Not only the task to invent, develop, introduce and manage new variants is important but also to decide which variant to develop, which to remove and which to not develop at all. The consequences of such decisions with respect to productline variability have to be computed based on formalized bases such that an optimized product variability can assure on the one hand customer satisfaction and on the other hand cost reduction within the variability-related engineering processes. This chapter presents current research in the field of product variability configuration, analysis and visualisation. It presents solution sketches based on formal logic that were illustrated by some real world examples.},
  Doi                      = {10.1007/978-3-319-13776-6_17},
  ISBN                     = {9783319137766}
}

@Article{Roos-Frantz2012,
  Title                    = {Quality-aware analysis in product line engineering with the orthogonal variability model},
  Author                   = {Roos-Frantz, Fabricia and Benavides, David and Ruiz-Cort{\'{e}}s, Antonio and Heuer, A. and Lauenroth, Kim},
  Year                     = {2012},

  Month                    = {sep},
  Number                   = {3-4},
  Pages                    = {519--565},
  Volume                   = {20},

  Abstract                 = {Software product line engineering is about producing a set of similar products in a certain domain. A variability model documents the variability amongst products in a product line. The specification of variability can be extended with quality information, such as measurable quality attributes (e. g., CPU and memory consumption) and constraints on these attributes (e. g., memory consumption should be in a range of values). However, the wrong use of constraints may cause anomalies in the specification which must be detected (e. g., the model could represent no products). Furthermore, based on such quality information, it is possible to carry out quality-aware analyses, i. e., the product line engineer may want to verify whether it is possible to build a product that satisfies a desired quality. The challenge for quality-aware specification and analysis is threefold. First, there should be a way to specify quality information in variability models. Second, it should be possible to detect anomalies in the variability specification associated with quality information. Third, there should be mechanisms to verify the variability model to extract useful information, such as the possibility to build a product that fulfils certain quality conditions (e. g., is there any product that requires less than 512 MB of memory?). In this article, we present an approach for quality-aware analysis in software product lines using the orthogonal variability model (OVM) to represent variability. We propose to map variability represented in the OVM associated with quality information to a constraint satisfaction problem and to use an off-the-shelf constraint programming solver to automatically perform the verification task. To illustrate our approach, we use a product line in the automotive domain which is an example that was created in a national project by a leading car company. We have developed a prototype tool named FaMa-OVM, which works as a proof of concepts. We were able to identify void models, dead and false optional elements, and check whether the product line example satisfies quality conditions. {\textcopyright} 2011 Springer Science+Business Media, LLC.},
  Doi                      = {10.1007/s11219-011-9156-5},
  ISSN                     = {09639314}
}

@InProceedings{Sabouri2012,
  Title                    = {Scheduling and analysis of real-time software families},
  Author                   = {Sabouri, Hamideh and Jaghoori, Mohammad Mahdi and {De Boer}, Frank and Khosravi, Ramtin},
  Year                     = {2012},
  Pages                    = {680--689},

  Abstract                 = {A software product line describes explicitly the commonalities of and differences between different products in a family of (software) systems. A formalization of these commonalities and differences amounts to reduced development, analysis and maintenance costs in the practice of software engineering. An important feature common to next-generation real-time software systems is the need of application-level control over scheduling for optimized utilization of resources provided by for example many-core and cloud infrastructures. In this paper, we introduce a formal model of real-time software product lines which supports variability in scheduling policies and rigorous and efficient techniques for modular schedulability analysis. {\textcopyright} 2012 IEEE.},
  Doi                      = {10.1109/COMPSAC.2012.95},
  ISBN                     = {9780769547367},
  ISSN                     = {07303157}
}

@Article{Sabouri2014,
  Title                    = {Reducing the verification cost of evolving product families using static analysis techniques},
  Author                   = {Sabouri, Hamideh and Khosravi, Ramtin},
  Year                     = {2014},

  Month                    = {apr},
  Pages                    = {35--55},
  Volume                   = {83},

  Abstract                 = {Software product line engineering enables proactive reuse among a set of related products through explicit modeling of commonalities and differences among them. Software product lines are intended to be used in a long period of time. As a result, they evolve over time, due to the changes in the requirements. Having several individual products in a software family, verification of the entire family may take a considerable effort. In this paper we aim to decrease this cost by reducing the number of verified products using static analysis techniques. Furthermore, to reduce model checking costs after product line evolution, we restrict the number of products that should be re-verified by reusing the previous verification result. All proposed techniques are based on static analysis of the product family model with respect to the property and can be automated. To show the effectiveness of these techniques we apply them on a set of case studies and present the results. {\textcopyright} 2013 Elsevier B.V.},
  Doi                      = {10.1016/j.scico.2013.06.009},
  ISSN                     = {01676423}
}

@Article{Sabouri2013,
  Title                    = {Modeling and verification of reconfigurable actor families},
  Author                   = {Sabouri, Hamideh and Khosravi, Ramtin},
  Year                     = {2013},
  Number                   = {2},
  Pages                    = {207--232},
  Volume                   = {19},

  Abstract                 = {Software product line engineering enables proactive reuse among a set of related products through explicit modeling of commonalities and differences among them. Features are usually used to distinguish different products as a product is identified by its supported feature set that is represented by a configuration. Dynamic product lines enhance flexibility of a product by allowing run-time reconfiguration. In this paper, we focus on modeling and verification of families of concurrent and distributed systems that are reconfigurable. To this end, we introduce the notion of variability in actor models to achieve family of reconfigurable actors. Then, we present our methodology to model this concept using the actor-based modeling language Rebeca. The model checking backbone of Rebeca enables us to ensure establishment of certain constraints on reconfigurations. We show the applicability and effectiveness of our approach by applying it on a set of case studies. {\textcopyright} J.UCS.},
  ISSN                     = {0948695X}
}

@Article{Saeed2016,
  Title                    = {Empirical validating the cognitive effectiveness of a new feature diagrams visual syntax},
  Author                   = {Saeed, Mazin and Saleh, Faisal and Al-Insaif, Sadiq and El-Attar, Mohamed},
  Year                     = {2016},

  Month                    = {mar},
  Pages                    = {1--26},
  Volume                   = {71},

  Abstract                 = {Context Feature models are commonly used to capture and communicate the commonality and variability of features in a Software Product Line. The core component of Feature models is feature diagrams, which graphically depict features in a hierarchical form. In previous work we have proposed a new notation that aims to improve the cognitive effectiveness of feature diagrams. Objective The objective of this paper is to empirically validate the cognitive effectiveness of the new feature diagrams notation in comparison to its original form. Methods We use two distinct empirical user-studies to validate the new notation. The first empirical study uses the survey approach while the second study is a subject-based experiment. The survey study investigates the semantic transparency of the new notation while the second study investigates the speed and accuracy of reading the notation. Results The results of the studies indicate that the proposed changes have significantly improved its cognitive effectiveness. Conclusions The cognitive effectiveness of feature diagrams has been improved, however there remains further research for full acceptance of the new notation by its potential user community.},
  Doi                      = {10.1016/j.infsof.2015.10.012},
  ISSN                     = {09505849},
  Publisher                = {Elsevier}
}

@InProceedings{Sanchez2014,
  Title                    = {A Comparison of test case prioritization criteria for software product lines},
  Author                   = {Sanchez, Ana B. and Segura, Sergio and Ruiz-Cortes, Antonio},
  Year                     = {2014},
  Pages                    = {41--50},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {Software Product Line (SPL) testing is challenging due to the potentially huge number of derivable products. To alleviate this problem, numerous contributions have been proposed to reduce the number of products to be tested while still having a good coverage. However, not much attention has been paid to the order in which the products are tested. Test case prioritization techniques reorder test cases to meet a certain performance goal. For instance, testers may wish to order their test cases in order to detect faults as soon as possible, which would translate in faster feedback and earlier fault correction. In this paper, we explore the applicability of test case prioritization techniques to SPL testing. We propose five different prioritization criteria based on common metrics of feature models and we compare their effectiveness in increasing the rate of early fault detection, i.e. a measure of how quickly faults are detected. The results show that different orderings of the same SPL suite may lead to significant differences in the rate of early fault detection. They also show that our approach may contribute to accelerate the detection of faults of SPL test suites based on combinatorial testing. {\textcopyright} 2014 IEEE.},
  Doi                      = {10.1109/ICST.2014.15},
  ISBN                     = {9780769551852}
}

@InProceedings{Sanchez2013,
  Title                    = {Metrics on feature models to optimize configuration adaptation at run time},
  Author                   = {Sanchez, Luis Emiliano and Moisan, Sabine and Rigault, Jean Paul},
  Year                     = {2013},
  Pages                    = {39--44},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {Feature models are widely used to capture variability, commonalities and configuration rules of software systems. We apply this technique to model component-based systems with many variants during specification, implementation, or run time. This representation allows us to determine the set of valid configurations befitting a given context, especially at run time. A key challenge is to determine the configuration most suitable, especially with respect to non-functional aspects: quality of service, performance, reconfiguration time. We propose an algorithm for selecting the configuration that optimizes a given quality metrics. This algorithm is a variant of the Best-First Search algorithm, a heuristic technique suitable for feature model optimization. The algorithm is parameterized with several strategies and heuristics on feature models leading to different optimality and efficiency properties. We discuss the algorithm, its strategies and heuristics, and we present experimental results showing that the algorithm meets the requirements for our real time systems. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/CMSBSE.2013.6604435},
  ISBN                     = {9781467362849}
}

@InProceedings{Sannier2013,
  Title                    = {From comparison matrix to Variability Model: The Wikipedia case study},
  Author                   = {Sannier, Nicolas and Acher, Mathieu and Baudry, Benoit},
  Year                     = {2013},
  Pages                    = {580--585},

  Abstract                 = {Product comparison matrices (PCMs) provide a convenient way to document the discriminant features of a family of related products and now abound on the internet. Despite their apparent simplicity, the information present in existing PCMs can be very heterogeneous, partial, ambiguous, hard to exploit by users who desire to choose an appropriate product. Variability Models (VMs) can be employed to formulate in a more precise way the semantics of PCMs and enable automated reasoning such as assisted configuration. Yet, the gap between PCMs and VMs should be precisely understood and automated techniques should support the transition between the two. In this paper, we propose variability patterns that describe PCMs content and conduct an empirical analysis of 300+ PCMs mined from Wikipedia. Our findings are a first step toward better engineering techniques for maintaining and configuring PCMs. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ASE.2013.6693116},
  ISBN                     = {9781479902156}
}

@InProceedings{Sayyad2012,
  Title                    = {Software feature model recommendations using data mining},
  Author                   = {Sayyad, Abdel Salam and Ammar, Hany and Menzies, Tim},
  Year                     = {2012},
  Pages                    = {47--51},

  Abstract                 = {Feature Models are popular tools for describing software product lines. Analysis of feature models has traditionally focused on consistency checking (yielding a yes/no answer) and product selection assistance, interactive or offline. In this paper, we describe a novel approach to identify the most critical decisions in product selection/configuration by taking advantage of a large pool of randomly generated, generally inconsistent, product variants. Range Ranking, a data mining technique, is utilized to single out the most critical design choices, reducing the job of the human designer to making less consequential decisions. A large feature model is used as a case study; we show preliminary results of the new approach to illustrate its usefulness for practical product derivation. {\textcopyright} 2012 IEEE.},
  Doi                      = {10.1109/RSSE.2012.6233409},
  ISBN                     = {9781467317597}
}

@InProceedings{Sayyad2013,
  Title                    = {On parameter tuning in search based software engineering: A replicated empirical study},
  Author                   = {Sayyad, Abdel Salam and Goseva-Popstojanova, Katerina and Menzies, Tim and Ammar, Hany},
  Year                     = {2013},
  Pages                    = {84--90},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {Multiobjective Evolutionary Algorithms are increasingly used to solve optimization problems in software engineering. The choice of parameters for those algorithms usually follows the "default" settings, often accepted as "rule of thumb" or common wisdom. The fact is that each algorithms needs to be tuned for the problem at hand. Previous work [Arcuri and Fraser, 2011] has shown that variations in parameter values had large effects on the performance of the algorithms. This project seeks to partially replicate the statistical analysis performed by Arcuri and Fraser. We seek to investigate the effects of parameter tuning on the performance of the two algorithms: Indicator-Based Evolutionary Algorithm (IBEA), and Nondominated Sorting Genetic Algorithm (NSGA-II) when applied to the problem of configuring Software Product Lines (SPLs) in the presence of stakeholder preferences such as cost and reliability. The results of this study confirm and strengthen the findings in the original study by Arcuri and Fraser. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/RESER.2013.6},
  ISBN                     = {9780769551210}
}

@InProceedings{Sayyad2013a,
  Title                    = {Scalable product line configuration: A straw to break the camel's back},
  Author                   = {Sayyad, Abdel Salam and Ingram, Joseph and Menzies, Tim and Ammar, Hany},
  Year                     = {2013},
  Pages                    = {465--474},

  Abstract                 = {Software product lines are hard to configure. Techniques that work for medium sized product lines fail for much larger product lines such as the Linux kernel with 6000+ features. This paper presents simple heuristics that help the Indicator-Based Evolutionary Algorithm (IBEA) in finding sound and optimum configurations of very large variability models in the presence of competing objectives. We employ a combination of static and evolutionary learning of model structure, in addition to utilizing a pre-computed solution used as a 'seed' in the midst of a randomly-generated initial population. The seed solution works like a single straw that is enough to break the camel's back -given that it is a feature-rich seed. We show promising results where we can find 30 sound solutions for configuring upward of 6000 features within 30 minutes. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ASE.2013.6693104},
  ISBN                     = {9781479902156}
}

@InProceedings{Sayyad2013b,
  Title                    = {On the value of user preferences in search-based software engineering: A case study in software product lines},
  Author                   = {Sayyad, Abdel Salam and Menzies, Tim and Ammar, Hany},
  Year                     = {2013},
  Pages                    = {492--501},

  Abstract                 = {Software design is a process of trading off competing objectives. If the user objective space is rich, then we should use optimizers that can fully exploit that richness. For example, this study configures software product lines (expressed as feature maps) using various search-based software engineering methods. As we increase the number of optimization objectives, we find that methods in widespread use (e.g. NSGA-II, SPEA2) perform much worse than IBEA (Indicator-Based Evolutionary Algorithm). IBEA works best since it makes most use of user preference knowledge. Hence it does better on the standard measures (hypervolume and spread) but it also generates far more products with 0{\%} violations of domain constraints. Our conclusion is that we need to change our methods for search-based software engineering, particularly when studying complex decision spaces. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/ICSE.2013.6606595},
  ISBN                     = {9781467330763},
  ISSN                     = {02705257}
}

@Article{Schaefer2012,
  Title                    = {Software diversity: State of the art and perspectives},
  Author                   = {Schaefer, Ina and Rabiser, Rick and Clarke, Dave and Bettini, Lorenzo and Benavides, David and Botterweck, Goetz and Pathak, Animesh and Trujillo, Salvador and Villela, Karina},
  Year                     = {2012},
  Number                   = {5},
  Pages                    = {477--495},
  Volume                   = {14},

  Abstract                 = {Diversity is prevalent in modern software systems to facilitate adapting the software to customer requirements or the execution environment. Diversity has an impact on all phases of the software development process. Appropriate means and organizational structures are required to deal with the additional complexity introduced by software variability. This introductory article to the special section "Software Diversity-Modeling, Analysis and Evolution" provides an overview of the current state of the art in diverse systems development and discusses challenges and potential solutions. The article covers requirements analysis, design, implementation, verification and validation, maintenance and evolution as well as organizational aspects. It also provides an overview of the articles which are part of this special section and addresses particular issues of diverse systems development. {\textcopyright} 2012 Springer-Verlag.},
  Doi                      = {10.1007/s10009-012-0253-y},
  ISSN                     = {14332779}
}

@InProceedings{Schmid2011,
  Title                    = {A comparison of decision modeling approaches in product lines},
  Author                   = {Schmid, Klaus and Rabiser, Rick and Gr{\"{u}}nbacher, Paul},
  Year                     = {2011},
  Pages                    = {119--126},

  Abstract                 = {It has been shown that product line engineering can significantly improve the productivity, quality and time-to-market of software development by leveraging extensive reuse. Variability models are currently the most advanced approach to define, document and manage the commonalities and variabilities of reusable artifacts such as software components, requirements, test cases, etc. These models provide the basis for automating the derivation of new products and are thus the key artifact to leverage the flexibility and adaptability of systems in a product line. Among the existing approaches to variability modeling feature modeling and decision modeling have gained most importance. A significant amount of research exists on comparing and analyzing different feature modeling approaches. However, despite their significant role in product line research and practical applications, only little effort has been devoted to compare and analyze decision modeling approaches. In order to address this shortcoming and to provide a basis for more structured research on decision modeling in the future, we present a comparative analysis of representative approaches. We identify their major modeling concepts and present an analysis of their commonalities and variabilities. Copyright 2011 ACM.},
  Doi                      = {10.1145/1944892.1944907},
  ISBN                     = {9781450305709}
}

@InProceedings{Schroeter2012,
  Title                    = {Multi-perspectives on feature models},
  Author                   = {Schroeter, Julia and Lochau, Malte and Winkelmann, Tim},
  Year                     = {2012},
  Pages                    = {252--268},
  Volume                   = {7590 LNCS},

  Abstract                 = {Domain feature models concisely express commonality and variability among variants of a software product line. For supporting separation of concerns, e.g., due to legal restrictions, technical considerations and business requirements, multi-view approaches restrict the configuration choices on feature models for different stakeholders. However, recent approaches lack a formalization for precise, yet flexible specifications of views that ensure every derivable configuration perspective to obey feature model semantics. Here, we introduce a novel approach for preconfiguring feature models to create multi-perspectives. Such customized perspectives result from composition of various concern-relevant views. A structured view model is used to organize features in view groups, wherein a feature may be contained in multiple views. We provide formalizations for view composition and guaranteed consistency of perspectives w.r.t. feature model semantics. Thereupon, an efficient algorithm to verify consistency for entire multi-perspectives is provided. We present an implementation and evaluate our concepts by means of various experiments. {\textcopyright} 2012 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-33666-9_17},
  ISBN                     = {9783642336652},
  ISSN                     = {03029743}
}

@InProceedings{Schroeter2012a,
  Title                    = {Dynamic configuration management of cloud-based applications},
  Author                   = {Schroeter, Julia and Mucha, Peter and Muth, Marcel and Jugel, Kay and Lochau, Malte},
  Year                     = {2012},
  Pages                    = {171--178},
  Volume                   = {2},

  Abstract                 = {Cloud-based applications are multi-tenant aware, whereas customers (i.e. tenants) share hardware and software resources. Offering highly configurable applications to thousands of tenants in a shared cloud environment demands for scalable configuration management. Based on an example scenario taken from the Indenica project, we identify requirements for applying methods from software product line (SPL) engineering to configure cloud-based multi-tenant aware applications. Using an extended feature model (EFM) to express variability of functionality and service qualities, we propose a concept for dynamic configuration management to address the identified requirements. Our proposed configuration management includes an adaptive staged configuration process that is capable of adding and removing stakeholders dynamically and that allows for reconfiguration of variants as stakeholders' objectives change. Copyright 2012 ACM.},
  Doi                      = {10.1145/2364412.2364441},
  ISBN                     = {9781450310956}
}

@Article{Segura2011,
  Title                    = {Functional testing of feature model analysis tools: A test suite},
  Author                   = {Segura, S. and Benavides, D. and Ruiz-Cort{\'{e}}s, A.},
  Year                     = {2011},

  Month                    = {feb},
  Number                   = {1},
  Pages                    = {70--82},
  Volume                   = {5},

  Abstract                 = {A feature model is a compact representation of all the products of a software product line. Automated analysis of feature models is rapidly gaining importance: new operations of analysis have been proposed, new tools have been developed to support those operations and different logical paradigms and algorithms have been proposed to perform them. Implementing operations is a complex task that easily leads to errors in analysis solutions. In this context, the lack of specific testing mechanisms is becoming a major obstacle hindering the development of tools and affecting their quality and reliability. In this article, the authors present FaMa test suite, a set of implementation- independent test cases to validate the functionality of feature model analysis tools. This is an efficient and handy mechanism to assist in the development of tools, detecting faults and improving their quality. In order to show the effectiveness of their proposal, the authors evaluated the suite using mutation testing as well as real faults and tools. Their results are promising and directly applicable in the testing of analysis solutions. The authors intend this work to be a first step towards the development of a widely accepted test suite to support functional testing in the community of automated analysis of feature models. {\textcopyright} 2011 The Institution of Engineering and Technology.},
  Doi                      = {10.1049/iet-sen.2009.0096},
  ISSN                     = {17518806}
}

@Article{Segura2015,
  Title                    = {Automated metamorphic testing of variability analysis tools},
  Author                   = {Segura, Sergio and Dur{\'{a}}n, Amador and S{\'{a}}nchez, Ana B. and {Le Berre}, Daniel and Lonca, Emmanuel and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2015},

  Month                    = {mar},
  Number                   = {2},
  Pages                    = {138--163},
  Volume                   = {25},

  Abstract                 = {Variability determines the capability of software applications to be configured and customized. A common need during the development of variability-intensive systems is the automated analysis of their underlying variability models, for example, detecting contradictory configuration options. The analysis operations that are performed on variability models are often very complex, which hinders the testing of the corresponding analysis tools and makes difficult, often infeasible, to determine the correctness of their outputs, that is, the well-known oracle problem in software testing. In this article, we present a generic approach for the automated detection of faults in variability analysis tools overcoming the oracle problem. Our work enables the generation of random variability models together with the exact set of valid configurations represented by these models. These test data are generated from scratch using stepwise transformations and assuring that certain constraints (a.k.a. metamorphic relations) hold at each step. To show the feasibility and generalizability of our approach, it has been used to automatically test several analysis tools in three variability domains: feature models, common upgradeability description format documents and Boolean formulas. Among other results, we detected 19 real bugs in 7 out of the 15 tools under test.},
  Doi                      = {10.1002/stvr.1566},
  ISSN                     = {10991689},
  Publisher                = {John Wiley and Sons Ltd}
}

@Article{Segura2016,
  Title                    = {A Survey on Metamorphic Testing},
  Author                   = {Segura, Sergio and Fraser, Gordon and Sanchez, Ana B. and Ruiz-Cortes, Antonio},
  Year                     = {2016},

  Month                    = {sep},
  Number                   = {9},
  Pages                    = {805--824},
  Volume                   = {42},

  Abstract                 = {A test oracle determines whether a test execution reveals a fault, often by comparing the observed program output to the expected output. This is not always practical, for example when a program's input-output relation is complex and difficult to capture formally. Metamorphic testing provides an alternative, where correctness is not determined by checking an individual concrete output, but by applying a transformation to a test input and observing how the program output 'morphs' into a different one as a result. Since the introduction of such metamorphic relations in 1998, many contributions on metamorphic testing have been made, and the technique has seen successful applications in a variety of domains, ranging from web services to computer graphics. This article provides a comprehensive survey on metamorphic testing: It summarises the research results and application areas, and analyses common practice in empirical studies of metamorphic testing as well as the main open challenges.},
  Doi                      = {10.1109/TSE.2016.2532875},
  ISSN                     = {00985589},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.}
}

@InProceedings{Segura2012,
  Title                    = {BeTTy: Benchmarking and Testing on the automated analysis of feature models},
  Author                   = {Segura, Sergio and Galindo, Jos{\'{e}} A. and Benavides, David and Parejo, Jos{\'{e}} A. and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2012},
  Pages                    = {63--71},

  Abstract                 = {The automated analysis of feature models is a ourishing research topic that has called the attention of both researchers and practitioners during the last two decades. During this time, the number of tools and techniques enabling the analysis of feature models has increased and also their complexity. In this scenario, the lack of specific testing mechanisms to assess the correctness and good performance of analysis tools is becoming a major obstacle hindering the development of tools and affecting their quality and reliability. In this paper, we present BeTTy, a framework for BEnchmarking and TesTing on the analY sis of feature models. Among other features, BeTTy enables the automated detection of faults in feature model analysis tools. Also, it supports the generation of motivating test data to evaluate the performance of analysis tools in both average and pessimistic cases. Part of the functionality of the framework is provided through a web-based interface facilitating the random generation of both classic and attributed feature models. Copyright {\textcopyright} 2012.},
  Doi                      = {10.1145/2110147.2110155},
  ISBN                     = {9781450310581}
}

@Article{Segura2011a,
  Title                    = {Mutation testing on an object-oriented framework: An experience report},
  Author                   = {Segura, Sergio and Hierons, Robert M. and Benavides, David and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2011},

  Month                    = {oct},
  Number                   = {10},
  Pages                    = {1124--1136},
  Volume                   = {53},

  Abstract                 = {Context: The increasing presence of Object-Oriented (OO) programs in industrial systems is progressively drawing the attention of mutation researchers toward this paradigm. However, while the number of research contributions in this topic is plentiful, the number of empirical results is still marginal and mostly provided by researchers rather than practitioners. Objective: This article reports our experience using mutation testing to measure the effectiveness of an automated test data generator from a user perspective. Method: In our study, we applied both traditional and class-level mutation operators to FaMa, an open source Java framework currently being used for research and commercial purposes. We also compared and contrasted our results with the data obtained from some motivating faults found in the literature and two real tools for the analysis of feature models, FaMa and SPLOT. Results: Our results are summarized in a number of lessons learned supporting previous isolated results as well as new findings that hopefully will motivate further research in the field. Conclusion: We conclude that mutation testing is an effective and affordable technique to measure the effectiveness of test mechanisms in OO systems. We found, however, several practical limitations in current tool support that should be addressed to facilitate the work of testers. We also missed specific techniques and tools to apply mutation testing at the system level. {\textcopyright} 2011 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2011.03.006},
  ISSN                     = {09505849}
}

@Article{Segura2011b,
  Title                    = {Automated metamorphic testing on the analyses of feature models},
  Author                   = {Segura, Sergio and Hierons, Robert M. and Benavides, David and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2011},

  Month                    = {mar},
  Number                   = {3},
  Pages                    = {245--258},
  Volume                   = {53},

  Abstract                 = {Context: A feature model (FM) represents the valid combinations of features in a domain. The automated extraction of information from FMs is a complex task that involves numerous analysis operations, techniques and tools. Current testing methods in this context are manual and rely on the ability of the tester to decide whether the output of an analysis is correct. However, this is acknowledged to be time-consuming, error-prone and in most cases infeasible due to the combinatorial complexity of the analyses, this is known as the oracle problem. Objective: In this paper, we propose using metamorphic testing to automate the generation of test data for feature model analysis tools overcoming the oracle problem. An automated test data generator is presented and evaluated to show the feasibility of our approach. Method: We present a set of relations (so-called metamorphic relations) between input FMs and the set of products they represent. Based on these relations and given a FM and its known set of products, a set of neighbouring FMs together with their corresponding set of products are automatically generated and used for testing multiple analyses. Complex FMs representing millions of products can be efficiently created by applying this process iteratively. Results: Our evaluation results using mutation testing and real faults reveal that most faults can be automatically detected within a few seconds. Two defects were found in FaMa and another two in SPLOT, two real tools for the automated analysis of feature models. Also, we show how our generator outperforms a related manual suite for the automated analysis of feature models and how this suite can be used to guide the automated generation of test cases obtaining important gains in efficiency. Conclusion: Our results show that the application of metamorphic testing in the domain of automated analysis of feature models is efficient and effective in detecting most faults in a few seconds without the need for a human oracle. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2010.11.002},
  ISSN                     = {09505849}
}

@Article{Segura2014,
  Title                    = {Automated generation of computationally hard feature models using evolutionary algorithms},
  Author                   = {Segura, Sergio and Parejo, Jos{\'{e}} A. and Hierons, Robert M. and Benavides, David and Ruiz-Cort{\'{e}}s, Antonio},
  Year                     = {2014},

  Month                    = {jun},
  Number                   = {8},
  Pages                    = {3975--3992},
  Volume                   = {41},

  Abstract                 = {A feature model is a compact representation of the products of a software product line. The automated extraction of information from feature models is a thriving topic involving numerous analysis operations, techniques and tools. Performance evaluations in this domain mainly rely on the use of random feature models. However, these only provide a rough idea of the behaviour of the tools with average problems and are not sufficient to reveal their real strengths and weaknesses. In this article, we propose to model the problem of finding computationally hard feature models as an optimization problem and we solve it using a novel evolutionary algorithm for optimized feature models (ETHOM). Given a tool and an analysis operation, ETHOM generates input models of a predefined size maximizing aspects such as the execution time or the memory consumption of the tool when performing the operation over the model. This allows users and developers to know the performance of tools in pessimistic cases providing a better idea of their real power and revealing performance bugs. Experiments using ETHOM on a number of analyses and tools have successfully identified models producing much longer executions times and higher memory consumption than those obtained with random models of identical or even larger size. {\textcopyright} 2013 Elsevier Ltd. All rights reserved.},
  Doi                      = {10.1016/j.eswa.2013.12.028},
  ISSN                     = {09574174}
}

@InProceedings{Sengupta2011,
  Title                    = {Engineering multi-tenant Software-as-a-Service systems},
  Author                   = {Sengupta, Bikram and Roychoudhury, Abhik},
  Year                     = {2011},
  Pages                    = {15--21},

  Abstract                 = {Increasingly, Software-as-a-Service (SaaS) is becoming a dominant mechanism for the consumption of software by end users. From a vendor's perspective, the benefits of SaaS arise from leveraging economies of scale, by serving a large number of customers ("tenants") through a shared instance of a centrally hosted software service. Consequently, a SaaS provider would, in general, try to drive commonality amongst the requirements of different tenants, and at best, offer a fixed set of customization options. However, many tenants would also come with custom requirements, which may be a pre-requisite for them to adopt the SaaS system. These requirements should then be addressed by evolving the SaaS system in a controlled manner, while still supporting the needs of existing tenants. This need to balance tenant variability and commonality, and to optimize on development and testing effort, can make the evolution of multi-tenant SaaS systems an interesting engineering challenge; this has strong economic undertones as well, given the "pay-per-use" subscription model of SaaS, and the cost of incremental development and maintenance to cater to new tenant needs. In this paper, we outline a set of research issues in the design, testing and maintenance of multi-tenant SaaS systems, and highlight some of the interesting optimization questions that arise in the process. Presenting specific technical solutions is beyond the scope of this paper - instead, our goal is to help shape a research agenda for multi-tenant SaaS that can provide stimulus for further investigation into this area by the software and service engineering research community. {\textcopyright} 2011 ACM.},
  Doi                      = {10.1145/1985394.1985397},
  ISBN                     = {9781450305914},
  ISSN                     = {02705257}
}

@InProceedings{She2011,
  Title                    = {Reverse engineering feature models},
  Author                   = {She, Steven and Lotufo, Rafael and Berger, Thorsten and Wa̧sowski, Andrzej and Czarnecki, Krzysztof},
  Year                     = {2011},
  Pages                    = {461--470},

  Abstract                 = {Feature models describe the common and variable characteristics of a product line. Their advantages are well recognized in product line methods. Unfortunately, creating a feature model for an existing project is time-consuming and requires substantial effort from a modeler. We present procedures for reverse engineering feature models based on a crucial heuristic for identifying parents - the major challenge of this task. We also automatically recover constructs such as feature groups, mandatory features, and implies/excludes edges. We evaluate the technique on two large-scale software product lines with existing reference feature models - the Linux and eCos kernels - and FreeBSD, a project without a feature model. Our heuristic is effective across all three projects by ranking the correct parent among the top results for a vast majority of features. The procedures effectively reduce the information a modeler has to consider from thousands of choices to typically five or less. {\textcopyright} 2011 ACM.},
  Doi                      = {10.1145/1985793.1985856},
  ISBN                     = {9781450304450},
  ISSN                     = {02705257}
}

@Article{She2014,
  Title                    = {Efficient synthesis of feature models},
  Author                   = {She, Steven and Ryssel, Uwe and Andersen, Nele and Wa̧sowski, Andrzej and Czarnecki, Krzysztof},
  Year                     = {2014},
  Number                   = {9},
  Pages                    = {1122--1143},
  Volume                   = {56},

  Abstract                 = {Context Variability modeling, and in particular feature modeling, is a central element of model-driven software product line architectures. Such architectures often emerge from legacy code, but, creating feature models from large, legacy systems is a long and arduous task. We describe three synthesis scenarios that can benefit from the algorithms in this paper. Objective This paper addresses the problem of automatic synthesis of feature models from propositional constraints. We show that the decision version of the problem is NP-hard. We designed two efficient algorithms for synthesis of feature models from CNF and DNF formulas respectively. Method We performed an experimental evaluation of the algorithms against a binary decision diagram (BDD)-based approach and a formal concept analysis (FCA)-based approach using models derived from realistic models. Results Our evaluation shows a 10 to 1,000-fold performance improvement for our algorithms over the BDD-based approach. The performance of the DNF-based algorithm was similar to the FCA-based approach, with advantages for both techniques. We identified input properties that affect the runtimes of the CNF- and DNF-based algorithms. Conclusions Our algorithms are the first known techniques that are efficient enough to be used on dependencies extracted from real systems, opening new possibilities of creating reverse engineering and model management tools for variability models. {\textcopyright} 2014 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2014.01.012},
  ISSN                     = {09505849},
  Publisher                = {Elsevier}
}

@InProceedings{Simmonds2013,
  Title                    = {Variability in software process models: Requirements for adoption in industrial settings},
  Author                   = {Simmonds, Jocelyn and Bastarrica, Mar{\'{i}}a Cecilia and Silvestre, Luis and Quispe, Alcides},
  Year                     = {2013},
  Pages                    = {33--36},

  Abstract                 = {It is an increasing trend to apply Software Product Line (SPL) concepts and techniques for software process tailoring, generating a Software PRocess Line (SPrL). However, there are several aspects that must be addressed before SPrLs can be fully adopted by industry, a key aspect being how software process variability is specified and managed. In the literature, there are several general-purpose as well as domain-specific proposals for specifying process variability. In this paper, we analyze the benefits and drawbacks of two general-purpose (feature models and OVM) and two domain-specific (SPEM variability primitives and vSPEM) approaches, as well as discuss what hinders industry adoption in each case. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/PLEASE.2013.6608661},
  ISBN                     = {9781467364492}
}

@InProceedings{TerBeek2014,
  Title                    = {Software product line analysis with mCRL2},
  Author                   = {{Ter Beek}, Maurice H. and {De Vink}, Erik P.},
  Year                     = {2014},
  Month                    = {sep},
  Pages                    = {78--85},
  Publisher                = {Association for Computing Machinery},
  Volume                   = {2},

  Abstract                 = {The mCRL2 language and supporting software provide a state-of-the-art tool suite for the verification of distributed systems. In this paper, we present the general principles, extrapolated from [7,8], which make us believe that mCRL2 can also be used for behavioral variability analysis of product families. The mCRL2 data language allows to smoothly deal with feature sets and attributes, its process language is sufficiently rich to model feature selection, as well as product behavior based on an FTS-like semantics. Because of the feature-orientation, our modeling strategy allows a natural refactoring of the semantic model of a product family into a parallel composition of components that reflects coherent sets of features. This opens the way for dedicated abstraction and reduction techniques that strengthen the prospect of a scalable verification approach to software product lines. In this paper, we sketch how to model product families in mCRL2 and how to apply a modular verification method, preparing the ground to further assess the scalability of our approach, in particular regarding model checking. Copyright 2014 ACM.},
  Doi                      = {10.1145/2647908.2655970},
  ISBN                     = {9781450327398}
}

@InProceedings{TerBeek2014a,
  Title                    = {Using mCRL2 for the analysis of software product lines},
  Author                   = {{Ter Beek}, Maurice H. and {De Vink}, Erik P.},
  Year                     = {2014},
  Month                    = {jun},
  Pages                    = {31--37},
  Publisher                = {Association for Computing Machinery, Inc},

  Abstract                 = {We show how the formal specification language mCRL2 and its state-of-the-art toolset can be used successfully to model and analyze variability in software product lines. The mCRL2 toolset supports parametrized modeling, model reduction and quality assurance techniques like model checking. We present a proof-of-concept, which moreover illustrates the use of data in mCRL2 and also how to exploit its data language to manage feature attributes of software product lines and quantitative constraints between attributes and features.},
  Doi                      = {10.1145/2593489.2593493},
  ISBN                     = {9781450328531}
}

@Misc{Thum2014,
  Title                    = {A classification and survey of analysis strategies for software product lines},

  Author                   = {Th{\"{u}}m, Thomas and Apel, Sven and K{\"{a}}stner, Christian and Schaefer, Ina and Saake, Gunter},
  Year                     = {2014},

  Abstract                 = {Software-product-line engineering has gained considerable momentum in recent years, both in industry and in academia. A software product line is a family of software products that share a common set of features. Software product lines challenge traditional analysis techniques, such as type checking, model checking, and theorem proving, in their quest of ensuring correctness and reliability of software. Simply creating and analyzing all products of a product line is usually not feasible, due to the potentially exponential number of valid feature combinations. Recently, researchers began to develop analysis techniques that take the distinguishing properties of software product lines into account, for example, by checking feature-related code in isolation or by exploiting variability information during analysis. The emerging field of productline analyses is both broad and diverse, so it is difficult for researchers and practitioners to understand their similarities and differences. We propose a classification of product-line analyses to enable systematic research and application. Based on our insights with classifying and comparing a corpus of 123 research articles, we develop a research agenda to guide future research on product-line analyses. {\textcopyright} 2014 ACM.},
  Doi                      = {10.1145/2580950},
  ISSN                     = {15577341},
  Number                   = {1},
  Publisher                = {Association for Computing Machinery},
  Volume                   = {47}
}

@InProceedings{Thum2011,
  Title                    = {Abstract features in feature modeling},
  Author                   = {Th{\"{u}}m, Thomas and K{\"{a}}stner, Christian and Erdweg, Sebastian and Siegmund, Norbert},
  Year                     = {2011},
  Pages                    = {191--200},

  Abstract                 = {A software product line is a set of program variants, typically generated from a common code base. Feature models describe variability in product lines by documenting features and their valid combinations. In product-line engineering, we need to reason about variability and program variants for many different tasks. For example, given a feature model, we might want to determine the number of all valid feature combinations or compute specific feature combinations for testing. However, we found that contemporary reasoning approaches can only reason about feature combinations, not about program variants, because they do not take abstract features into account. Abstract features are features used to structure a feature model that, however, do not have any impact at implementation level. Using existing feature-model reasoning mechanisms for program variants leads to incorrect results. Hence, although abstract features represent domain decisions that do not affect the generation of a program variant. We raise awareness of the problem of abstract features for different kinds of analyses on feature models. We argue that, in order to reason about program variants, abstract features should be made explicit in feature models. We present a technique based on propositional formulas that enables to reason about program variants rather than feature combinations. In practice, our technique can save effort that is caused by considering the same program variant multiple times, for example, in product-line testing. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/SPLC.2011.53},
  ISBN                     = {9780769544878}
}

@InProceedings{Thum2012,
  Title                    = {Applying design by contract to feature-oriented programming},
  Author                   = {Th{\"{u}}m, Thomas and Schaefer, Ina and Kuhlemann, Martin and Apel, Sven and Saake, Gunter},
  Year                     = {2012},
  Pages                    = {255--269},
  Volume                   = {7212 LNCS},

  Abstract                 = {Feature-oriented programming (FOP) is an extension of ob- ject-oriented programming to support software variability by refining existing classes and methods. In order to increase the reliability of all implemented program variants, we integrate design by contract (DbC) with FOP. DbC is an approach to build reliable object-oriented software by specifying methods with contracts. Contracts are annotations that document and formally specify behavior, and can be used for formal verification of correctness or as test oracles. We present and discuss five approaches to define contracts of methods and their refinements in FOP. Furthermore, we share our insights gained by performing five case studies. This work is a foundation for research on the analysis of feature-oriented programs (e.g., for verifying functional correctness or for detecting feature interactions). {\textcopyright} 2012 Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/978-3-642-28872-2_18},
  ISBN                     = {9783642288715},
  ISSN                     = {03029743}
}

@InProceedings{Thum2011a,
  Title                    = {Proof composition for deductive verification of software product lines},
  Author                   = {Thum, Thomas and Schaefer, Ina and Kuhlemann, Martin and Apel, Sven},
  Year                     = {2011},
  Pages                    = {270--277},

  Abstract                 = {Software product line engineering aims at the efficient development of program variants that share a common set of features and that differ in other features. Product lines can be efficiently developed using feature-oriented programming. Given a feature selection and the code artifacts for each feature, program variants can be generated automatically. The quality of the program variants can be rigorously ensured by formal verification. However, verification of all program variants can be expensive and include redundant verification tasks. We introduce a classification of existing software product line verification approaches and propose proof composition as a novel approach. Proof composition generates correctness proofs of each program variant based on partial proofs of each feature. We present a case study to evaluate proof composition and demonstrate that it reduces the effort for verification. {\textcopyright} 2011 IEEE.},
  Doi                      = {10.1109/ICSTW.2011.48},
  ISBN                     = {9780769543451}
}

@InProceedings{Tran2014,
  Title                    = {An approach for decision support on the uncertainty in feature model evolution},
  Author                   = {Tran, Le Minh Sang and Massacci, Fabio},
  Year                     = {2014},
  Month                    = {sep},
  Pages                    = {93--102},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {Software systems could be seen as a hierarchy of features which are evolving due to the dynamic of the working environments. The companies who build software thus need to make an appropriate strategy, which takes into consideration of such dynamic, to select features to be implemented. In this work, we propose an approach to facilitate such selection by providing a means to capture the uncertainty of evolution in feature models. We also provide two analyses to support the decision makers. The approach is exemplified in the Smart Grid scenario.},
  Doi                      = {10.1109/RE.2014.6912251},
  ISBN                     = {9781479930333}
}

@InCollection{Turner2013,
  Title                    = {Building a cloud-based mobile application testbed},
  Author                   = {Turner, Hamilton and White, Jules and Reed, Jeff and Galindo, Jos{\'{e}} and Porter, Adam and Marathe, Madhav and Vullikanti, Anil and Gokhale, Aniruddha},
  Publisher                = {IGI Global},
  Year                     = {2013},
  Month                    = {feb},
  Pages                    = {879--899},
  Volume                   = {2-3},

  Abstract                 = {A proliferation of mobile smartphone platforms, including Android devices, has triggered a rise in mobile application development for a diverse set of situations. Testing of these smartphone applications can be exceptionally difficult, due to the challenges of orchestrating production-scale quantities of smartphones such as difficulty in managing thousands of sensory inputs to each individual smartphone device. This work presents the Android Tactical Application Assessment and Knowledge (ATAACK) Cloud, which utilizes a cloud computing environment to allow smartphone-based security, sensing, and social networking researchers to rapidly use model-based tools to provision experiments with a combination of 1,000+ emulated smartphone instances and tens of actual devices. The ATAACK Cloud provides a large-scale smartphone application research testbed.},
  Doi                      = {10.4018/978-1-4666-2919-6.ch040},
  ISBN                     = {9781466629202}
}

@InProceedings{Urli2014,
  Title                    = {Managing a software ecosystem using a multiple software product line: A case study on digital signage systems},
  Author                   = {Urli, Simon and Blay-Fornarino, Mireille and Collet, Philippe and Mosser, Sebastien and Riveill, Michel},
  Year                     = {2014},
  Month                    = {oct},
  Pages                    = {344--351},
  Publisher                = {Institute of Electrical and Electronics Engineers Inc.},

  Abstract                 = {With the advent of Web 2.0, the growth of developer teams and user communities increases the number of software ecosystems: software platforms developed and maintained in a decentralized way by external contributors. As complexity grows, these large software systems become more and more complex to manage and to adapt to specific user needs. In this paper, we report on a case study on the development of a digital signage software system called Your Cast. Based on several years experience evolving Your Cast from a single system to a medium-scale ecosystem, we show how organizing it as a multiple software product line helps in organizing the software platform, taming some management tasks for a growing community, and giving more capabilities to final users to build their own products.},
  Doi                      = {10.1109/SEAA.2014.23},
  ISBN                     = {9781479957941}
}

@InProceedings{Urli2013,
  Title                    = {How to exploit domain knowledge in Multiple Software Product Lines?},
  Author                   = {Urli, Simon and Mosser, S{\'{e}}bastien and Blay-Fornarino, Mireille and Collet, Philippe},
  Year                     = {2013},
  Pages                    = {13--16},

  Abstract                 = {As Software Product Lines (SPL) are inevitably moving towards a multiple form to tackle issues of reuse and complexity, variability management across the composed SPLs is still addressed with basic inter-constraints. Based on two disjoint case studies (digital signage and cloud computing), we identified this challenging problem for the SPL community. In this paper we describe how the domain knowledge needs to be exploited to support a more complete definition of Multiple Software Product Lines (MSPL). Such an exploitation implies the definition of a domain-driven definition of configuration and an order independent configuration process. {\textcopyright} 2013 IEEE.},
  Doi                      = {10.1109/PLEASE.2013.6608656},
  ISBN                     = {9781467364492}
}

@Article{Varela-Vaca2013,
  Title                    = {Towards the automatic and optimal selection of risk treatments for business processes using a constraint programming approach},
  Author                   = {Varela-Vaca, Angel Jesus and Gasca, Rafael M.},
  Year                     = {2013},

  Month                    = {nov},
  Number                   = {11},
  Pages                    = {1948--1973},
  Volume                   = {55},

  Abstract                 = {Context The use of Business Process Management Systems (BPMS) has emerged in the IT arena for the automation of business processes. In the majority of cases, the issue of security is overlooked by default in these systems, and hence the potential cost and consequences of the materialization of threats could produce catastrophic loss for organizations. Therefore, the early selection of security controls that mitigate risks is a real and important necessity. Nevertheless, there exists an enormous range of IT security controls and their configuration is a human, manual, time-consuming and error-prone task. Furthermore, configurations are carried out separately from the organization perspective and involve many security stakeholders. This separation makes difficult to ensure the effectiveness of the configuration with regard to organizational requirements. Objective In this paper, we strive to provide security stakeholders with automated tools for the optimal selection of IT security configurations in accordance with a range of business process scenarios and organizational multi-criteria. Method An approach based on feature model analysis and constraint programming techniques is presented, which enable the automated analysis and selection of optimal security configurations. Results A catalogue of feature models is determined by analyzing typical IT security controls for BPMSs for the enforcement of the standard goals of security: integrity, confidentiality, availability, authorization, and authentication. These feature models have been implemented through constraint programs, and Constraint Programming techniques based on optimized and non-optimized searches are used to automate the selection and generation of configurations. In order to compare the results of the determination of configuration a comparative analysis is given. Conclusion In this paper, we present innovative tools based on feature models, Constraint Programming and multi-objective techniques that enable the agile, adaptable and automatic selection and generation of security configurations in accordance with the needs of the organization. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
  Doi                      = {10.1016/j.infsof.2013.05.007},
  ISSN                     = {09505849}
}

@InProceedings{Vierhauser2010,
  Title                    = {Flexible and scalable consistency checking on product line variability models},
  Author                   = {Vierhauser, Michael and Gr{\"{u}}nbacher, Paul and Egyed, Alexander and Rabiser, Rick and Heider, Wolfgang},
  Year                     = {2010},
  Pages                    = {63--72},

  Abstract                 = {The complexity of product line variability models makes it hard to maintain their consistency over time regardless of the modeling approach used. Engineers thus need support for detecting and resolving inconsistencies. We describe experiences of applying a tool-supported approach for incremental consistency checking on variability models. Our approach significantly improves the overall performance and scalability compared to batch-oriented techniques and allows providing immediate feedback to modelers. It is extensible as new consistency constraints can easily be added. Furthermore, the approach is flexible as it is not limited to variability models and it also checks the consistency of the models with the underlying code base of the product line. We report the results of a thorough evaluation based on real-world product line models and discuss lessons learned. {\textcopyright} 2010 ACM.},
  Doi                      = {10.1145/1858996.1859009},
  ISBN                     = {9781450301169}
}

@Article{Vogel-Heuser2015,
  Title                    = {Evolution of software in automated production systems: Challenges and research directions},
  Author                   = {Vogel-Heuser, Birgit and Fay, Alexander and Schaefer, Ina and Tichy, Matthias},
  Year                     = {2015},

  Month                    = {dec},
  Pages                    = {54--84},
  Volume                   = {110},

  Abstract                 = {Coping with evolution in automated production systems implies a cross-disciplinary challenge along the system's life-cycle for variant-rich systems of high complexity. The authors from computer science and automation provide an interdisciplinary survey on challenges and state of the art in evolution of automated production systems. Selected challenges are illustrated on the case of a simple pick and place unit. In the first part of the paper, we discuss the development process of automated production systems as well as the different type of evolutions during the system's life-cycle on the case of a pick and place unit. In the second part, we survey the challenges associated with evolution in the different development phases and a couple of cross-cutting areas and review existing approaches addressing the challenges. We close with summarizing future research directions to address the challenges of evolution in automated production systems.},
  Doi                      = {10.1016/j.jss.2015.08.026},
  ISSN                     = {01641212},
  Publisher                = {Elsevier Inc.}
}

@InProceedings{VonRhein2015,
  Title                    = {Presence-condition simplification in highly configurable systems},
  Author                   = {{Von Rhein}, Alexander and Grebhahn, Alexander and Apel, Sven and Siegmund, Norbert and Beyer, Dirk and Berger, Thorsten},
  Year                     = {2015},
  Month                    = {aug},
  Pages                    = {178--188},
  Publisher                = {IEEE Computer Society},
  Volume                   = {1},

  Abstract                 = {For the analysis of highly configurable systems, analysis approaches need to take the inherent variability of these systems into account. The notion of presence conditions is central to such approaches. A presence condition specifies a subset of system configurations in which a certain artifact or a concern of interest is present (e.g., a defect associated with this subset). In this paper, we introduce and analyze the problem of presence-condition simplification. A key observation is that presence conditions often contain redundant information, which can be safely removed in the interest of simplicity and efficiency. We present a formalization of the problem, discuss application scenarios, compare different algorithms for solving the problem, and empirically evaluate the algorithms by means of a set of substantial case studies.},
  Doi                      = {10.1109/ICSE.2015.39},
  ISBN                     = {9781479919345},
  ISSN                     = {02705257}
}

@InProceedings{Wang2010,
  Title                    = {A dynamic-priority based approach to fixing inconsistent feature models},
  Author                   = {Wang, Bo and Xiong, Yingfei and Hu, Zhenjiang and Zhao, Haiyan and Zhang, Wei and Mei, Hong},
  Year                     = {2010},
  Number                   = {PART 1},
  Pages                    = {181--195},
  Volume                   = {6394 LNCS},

  Abstract                 = {In feature models' construction, one basic task is to ensure the consistency of feature models, which often involves detecting and fixing of inconsistencies in feature models. Several approaches have been proposed to detect inconsistencies, but few focus on the problem of fixing inconsistent feature models. In this paper, we propose a dynamic-priority based approach to fixing inconsistent feature models, with the purpose of helping domain analysts find solutions to inconsistencies efficiently. The basic idea of our approach is to first recommend a solution automatically, then gradually reach the desirable solution by dynamically adjusting priorities of constraints. To this end, we adopt the constraint hierarchy theory to express the degree of domain analysts' confidence on constraints (i.e. the priorities of constraints) and resolve inconsistencies among constraints. Two case studies have been conducted to demonstrate the usability and scalability of our approach. {\textcopyright} 2010 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-16145-2_13},
  ISBN                     = {3642161448},
  ISSN                     = {03029743}
}

@InProceedings{Wang2013,
  Title                    = {Developing a holistic modeling approach for search-based system architecting},
  Author                   = {Wang, Renzhong and Dagli, Cihan H.},
  Year                     = {2013},
  Pages                    = {206--215},
  Volume                   = {16},

  Abstract                 = {This paper proposes a holistic modeling approach that combines the capabilities of Object Process Methodology (OPM), Colored Petri Net (CPN), and feature model. The resultant holistic model not only can capture the structural, behavioral, and dynamic aspects of a system, allowing simulation and strong analysis methods to be applied, it can also specify the architectural design space. This modeling approach is developed to facilitate the implementation of search-based system architecting where search algorithms are used to explore design trade space for good architecture alternatives. Such architecting approach integrates certain model construction, alternative generation, simulation, and assessment processes into a coherent and automated framework. Both the proposed holistic modeling approach and the search-based architecting framework are generic. They are targeted at systems that can be specified by conceptual models using object-oriented or process-oriented paradigms. The broad applicability of the proposed approach is demonstrated with the configuration of reconfigurable manufacturing systems (RMSs) under multiobjective optimization as an example. The test results showed that the proposed modeling approach could cover a huge number of architecture alternatives and supported the assessment of several performance measures. A set of quality results was obtained after running the optimization algorithm following the proposed search-based architecting framework. {\textcopyright} 2013 The authors. Published by Elsevier B.V.},
  Doi                      = {10.1016/j.procs.2013.01.022},
  ISSN                     = {18770509}
}

@InProceedings{Wang2012,
  Title                    = {Computational System Architecture Development Using a Holistic Modeling Approach},
  Author                   = {Wang, Renzhong and Dagli, Cihan H.},
  Year                     = {2012},
  Pages                    = {13--20},
  Publisher                = {Elsevier},
  Volume                   = {12},

  Abstract                 = {This paper presents an innovative system architecture development framework that allows the search of optimum architecture solutions within large design space by automating certain model construction, alternative generation, simulation, and assessment tasks. Such framework is facilitated by a holistic modeling approach that combines the capabilities of Object Process Methodology (OPM), Colored Petri Net (CPN) and feature model. The resultant holistic model not only can capture the structural, behavior, and dynamic aspects of a system, allowing strong analysis methods to be applied, but also can specify the architectural design space allowing generation of architecture alternatives that cover it. The proposed framework and suggested implementation is generic targeted at systems that can be specified by logic models using object-oriented paradigm. A partial implementation of the proposed approaches is presented with the design of reconfigurable manufacturing systems (RMSs) as an example, which is formulated as a multi-objective optimization problem with the Genetic Algorithm (GA, particularly, NSGA-2) as the search algorithm. The RMS is a multi-part flow line structure with identical machines in each production stage. {\textcopyright} 2012 Published by Elsevier B.V.},
  Doi                      = {10.1016/j.procs.2012.09.023},
  ISSN                     = {18770509}
}

@InProceedings{Wang2015,
  Title                    = {Cost-effective test suite minimization in product lines using search techniques},
  Author                   = {Wang, Shuai and Ali, Shaukat and Gotlieb, Arnaud},
  Year                     = {2015},
  Month                    = {may},
  Pages                    = {370--391},
  Publisher                = {Elsevier Inc.},
  Volume                   = {103},

  Abstract                 = {Cost-effective testing of a product in a product line requires obtaining a set of relevant test cases from the entire test suite via test selection and minimization techniques. In this paper, we particularly focus on test minimization for product lines, which identifies and eliminates redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. However, such minimization may result in the minimized test suite with low test coverage, low fault revealing capability, low priority test cases, and require more time than the allowed testing budget (e.g., time) as compared to the original test suite. To deal with the above issues, we formulated the minimization problem as a search problem and defined a fitness function considering various optimization objectives based on the above issues. To assess the performance of our fitness function, we conducted an extensive empirical evaluation by investigating the fitness function with three weight-based Genetic Algorithms (GAs) and seven multi-objective search algorithms using an industrial case study and 500 artificial problems inspired from the industrial case study. The results show that Random-Weighted Genetic Algorithm (RWGA) significantly outperforms the other algorithms since RWGA can balance all the objectives together by dynamically updating weights during each generation. Based on the results of our empirical evaluation, we also implemented a tool called TEst Minimization using Search Algorithms (TEMSA) to support test minimization using various search algorithms in the context of product lines.},
  Doi                      = {10.1016/j.jss.2014.08.024},
  ISSN                     = {01641212}
}

@Article{Wang2015a,
  Title                    = {Cost-effective test suite minimization in product lines using search techniques},
  Author                   = {Wang, Shuai and Ali, Shaukat and Gotlieb, Arnaud},
  Year                     = {2015},
  Number                   = {C},
  Pages                    = {370--391},
  Volume                   = {103},

  Abstract                 = {Cost-effective testing of a product in a product line requires obtaining a set of relevant test cases from the entire test suite via test selection and minimization techniques. In this paper, we particularly focus on test minimization for product lines, which identifies and eliminates redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. However, such minimization may result in the minimized test suite with low test coverage, low fault revealing capability, low priority test cases, and require more time than the allowed testing budget (e.g., time) as compared to the original test suite. To deal with the above issues, we formulated the minimization problem as a search problem and defined a fitness function considering various optimization objectives based on the above issues. To assess the performance of our fitness function, we conducted an extensive empirical evaluation by investigating the fitness function with three weight-based Genetic Algorithms (GAs) and seven multi-objective search algorithms using an industrial case study and 500 artificial problems inspired from the industrial case study. The results show that Random-Weighted Genetic Algorithm (RWGA) significantly outperforms the other algorithms since RWGA can balance all the objectives together by dynamically updating weights during each generation. Based on the results of our empirical evaluation, we also implemented a tool called TEst Minimization using Search Algorithms (TEMSA) to support test minimization using various search algorithms in the context of product lines.},
  Doi                      = {10.1016/jjss.2014.08.024},
  ISSN                     = {01641212},
  Publisher                = {Elsevier Inc.}
}

@InProceedings{Wang2013a,
  Title                    = {Minimizing test suites in software product lines using weight-based genetic algorithms},
  Author                   = {Wang, Shuai and Ali, Shaukat and Gotlieb, Arnaud},
  Year                     = {2013},
  Pages                    = {1493--1500},

  Abstract                 = {Test minimization techniques aim at identifying and eliminating redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. In the context of software product line, we can save effort and cost in the selection and minimization of test cases for testing a specific product by modeling the product line. However, minimizing the test suite for a product requires addressing two potential issues: 1) the minimized test suite may not cover all test requirements compared with the original suite; 2) the minimized test suite may have less fault revealing capability than the original suite. In this paper, we apply weight-based Genetic Algorithms (GAs) to minimize the test suite for testing a product, while preserving fault detection capability and testing coverage of the original test suite. The challenge behind is to define an appropriate fitness function, which is able to preserve the coverage of complex testing criteria (e.g., Combinatorial Interaction Testing criterion). Based on the defined fitness function, we have empirically evaluated three different weight-based GAs on an industrial case study provided by Cisco Systems, Inc. Norway. We also presented our results of applying the three weight-based GAs on five existing case studies from the literature. Based on these case studies, we conclude that among the three weight-based GAs, Random-Weighted GA (RWGA) achieved significantly better performance than the other ones. Copyright {\textcopyright} 2013 ACM.},
  Doi                      = {10.1145/2463372.2463545},
  ISBN                     = {9781450319638}
}

@InProceedings{Wang2013b,
  Title                    = {Automated test case selection using feature model: An industrial case study},
  Author                   = {Wang, Shuai and Gotlieb, Arnaud and Ali, Shaukat and Liaaen, Marius},
  Year                     = {2013},
  Pages                    = {237--253},
  Volume                   = {8107 LNCS},

  Abstract                 = {Automated test case selection for a new product in a product line is challenging due to several reasons. First, the variability within the product line needs to be captured in a systematic way; second, the reusable test cases from the repository are required to be identified for testing a new product. The objective of such automated process is to reduce the overall effort for selection (e.g., selection time), while achieving an acceptable level of the coverage of testing functionalities. In this paper, we propose a systematic and automated methodology using a Feature Model for Testing (FM-T) to capture commonalities and variabilities of a product line and a Component Family Model for Testing (CFM-T) to capture the overall structure of test cases in the repository. With our methodology, a test engineer does not need to manually go through the repository to select a relevant set of test cases for a new product. Instead, a test engineer only needs to select a set of relevant features using FM-T at a higher level of abstraction for a product and a set of relevant test cases will be selected automatically. We applied our methodology to a product line of video conferencing systems called Saturn developed by Cisco and the results show that our methodology can reduce the selection effort significantly. Moreover, we conducted a questionnaire-based study to solicit the views of test engineers who were involved in developing FM-T and CFM-T. The results show that test engineers are positive about adapting our methodology and models (FM-T and CFM-T) in their current practice. {\textcopyright} 2013 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-41533-3_15},
  ISBN                     = {9783642415326},
  ISSN                     = {03029743}
}

@InProceedings{Wang2012a,
  Title                    = {Automatic selection of test execution plans from a video conferencing system product line},
  Author                   = {Wang, Shuai and Gotlieb, Arnaud and Liaaen, Marius and Briand, Lionel C.},
  Year                     = {2012},
  Pages                    = {32--37},

  Abstract                 = {The Cisco Video Conferencing Systems (VCS) Product Line is composed of many distinct products that can be configured in many different ways. The validation of this product line is currently performed manually during test plan design and test executions' scheduling. For example, the testing of a specific VCS product leads to the manual selection of a set of test cases to be executed and scheduled, depending on the functionalities that are available on the product. In this paper, we develop an alternative approach where the variability of the VCS Product Line is captured by a feature model, while the variability within the set of test cases is captured by a component family model. Using the well-known pure::variants tool approach that establishes links between those two models through restrictions, we can obtain relevant test cases automatically for the testing of a new VCS product. The novelty in this paper lies in the design of a large component family model that organizes a complex test cases structure. We envision a large gain in terms of man-power when a new product is issued and needs to be tested before being marketed. {\textcopyright} 2012 ACM.},
  Doi                      = {10.1145/2425415.2425422},
  ISBN                     = {9781450318099}
}

@Article{White2014,
  Title                    = {Evolving feature model configurations in software product lines},
  Author                   = {White, Jules and Galindo, Jose A. and Saxena, Tripti and Dougherty, Brian and Benavides, David and Schmidt, Douglas C.},
  Year                     = {2014},

  Month                    = {jan},
  Number                   = {1},
  Pages                    = {119--136},
  Volume                   = {87},

  Abstract                 = {The increasing complexity and cost of software-intensive systems has led developers to seek ways of reusing software components across development projects. One approach to increasing software reusability is to develop a software product-line (SPL), which is a software architecture that can be reconfigured and reused across projects. Rather than developing software from scratch for a new project, a new configuration of the SPL is produced. It is hard, however, to find a configuration of an SPL that meets an arbitrary requirement set and does not violate any configuration constraints in the SPL. Existing research has focused on techniques that produce a configuration of an SPL in a single step. Budgetary constraints or other restrictions, however, may require multi-step configuration processes. For example, an aircraft manufacturer may want to produce a series of configurations of a plane over a span of years without exceeding a yearly budget to add features. This paper provides three contributions to the study of multi-step configuration for SPLs. First, we present a formal model of multi-step SPL configuration and map this model to constraint satisfaction problems (CSPs). Second, we show how solutions to these SPL configuration problems can be automatically derived with a constraint solver by mapping them to CSPs. Moreover, we show how feature model changes can be mapped to our approach in a multi-step scenario by using feature model drift. Third, we present empirical results demonstrating that our CSP-based reasoning technique can scale to SPL models with hundreds of features and multiple configuration steps. {\textcopyright} 2013 Elsevier Inc.},
  Doi                      = {10.1016/j.jss.2013.10.010},
  ISSN                     = {01641212}
}

@InProceedings{Wieber2014,
  Title                    = {On the usage of tggs for automated model transformation testing},
  Author                   = {Wieber, Martin and Anjorin, Anthony and Sch{\"{u}}rr, Andy},
  Year                     = {2014},
  Pages                    = {1--16},
  Publisher                = {Springer Verlag},
  Volume                   = {8568 LNCS},

  Abstract                 = {As model transformations are fundamental to model-driven engineering, assuring their quality is a central task which can be achieved by testing with sufficiently adequate and large test suites. As the latter requirement can render manual testing prohibitively costly in practice, a high level of automation is advisable. Triple Graph Grammars (TGGs) have been shown to provide a promising solution to this challenge as not only test case generators, but also generic test oracles can be derived from them. It is, however, unclear if such generated test suites are indeed adequate and, as different strategies can be used to steer the test generation process, a systematic means of comparing and evaluating such test suites and strategies is required. In this paper, we extend existing work on TGG-based testing by(i) presenting a generic framework for TGG-based testing, (ii) describing a concrete instantiation of this framework with our TGG tool eMoflon, and (iii) exploring how the well-known technique of mutation analysis can be used to evaluate a set of test generation strategies by analyzing the generated test suites. {\textcopyright} 2014 Springer International Publishing Switzerland.},
  Doi                      = {10.1007/978-3-319-08789-4_1},
  ISBN                     = {9783319087887},
  ISSN                     = {16113349}
}

@InProceedings{Wittern2012,
  Title                    = {Cloud service selection based on variability modeling},
  Author                   = {Wittern, Erik and Kuhlenkamp, J{\"{o}}rn and Menzel, Michael},
  Year                     = {2012},
  Pages                    = {127--141},
  Volume                   = {7636 LNCS},

  Abstract                 = {The selection among Cloud services is a recent problem in research and practice. The diversity of decision-relevant criteria, configurability of Cloud services and the need to involve human decisionmakers require holistic support through models, methodologies and tools. Existing Cloud service selection approaches do not address all stated difficulties at the same time. We present an approach to capture capabilities of Cloud services and requirements using variability modeling. We use Cloud feature models (CFMs) as a representation mechanism and describe how they are utilized for requirements elicitation and filtering within a presented Cloud service selection process (CSSP) that includes human decision-makers. Filtering produces a reduced number of valid Cloud service configurations that can be further assessed with current multi-criteria decision making-based selection approaches. We present software tools that we use to demonstrate the applicability of our approach in a use case about selecting among Cloud storage services. {\textcopyright} Springer-Verlag Berlin Heidelberg 2012.},
  Doi                      = {10.1007/978-3-642-34321-6-9},
  ISBN                     = {9783642343209},
  ISSN                     = {03029743}
}

@InProceedings{Wittern2011,
  Title                    = {On the use of feature models for service design: The case of value representation},
  Author                   = {Wittern, Erik and Zirpins, Christian},
  Year                     = {2011},
  Pages                    = {110--118},
  Volume                   = {6569 LNCS},

  Abstract                 = {Current findings in the field of service science have revealed many specific characteristics of service systems, but these results have not yet been fully adopted by the service engineering discipline. In particular we are now aware that the value proposition of a service is not only vital for its success but also deeply depending on context and co-creation. So far, there is only limited work on considering this fact for the design of service systems. In this paper, we discuss the utilization of feature modeling, which is known from the software engineering domain, for service design. We argue that feature modeling offers considerable potential to not only represent value from diverse perspectives but also to involve service customers in participatory service design. {\textcopyright} 2011 Springer-Verlag.},
  Doi                      = {10.1007/978-3-642-22760-8_12},
  ISBN                     = {9783642227592},
  ISSN                     = {03029743}
}

@Article{Zhang2013,
  Title                    = {Feature-oriented stigmergy-based collaborative requirements modeling: An exploratory approach for requirements elicitation and evolution based on web-enabled collective intelligence},
  Author                   = {Zhang, Wei and Yi, Li and Zhao, HaiYan Y. and Jin, Zhi},
  Year                     = {2013},

  Month                    = {aug},
  Number                   = {8},
  Pages                    = {1--18},
  Volume                   = {56},

  Abstract                 = {Compared with traditional software applications, the requirements problem of Internetware applications exhibits a set of new characteristics that cannot be resolved by traditional engineer-centered face-to-face requirements methods. In this paper, we present an exploratory approach to the requirements elicitation and evolution problem of Internetware applications, based on the concept of web-enable collective intelligence, to accommodate the situation of large-scale user communities of Internetware applications with diverse and constantly evolving requirements. In particular, we propose a feature-oriented stigmergy-based collaborative requirements modeling method that combines feature-oriented requirements modeling with web-enabled stigmergy-based collaboration to support large-scale collaborative requirements eliciting and evolving activities for Internetware applications. Two experiments are introduced to show the feasibility and effectiveness of this approach. {\textcopyright} 2013 Science China Press and Springer-Verlag Berlin Heidelberg.},
  Doi                      = {10.1007/s11432-013-4912-8},
  ISSN                     = {1674733X}
}

@InProceedings{Ziadi2012,
  Title                    = {Feature identification from the source code of product variants},
  Author                   = {Ziadi, Tewfik and Frias, Luz and {Da Silva}, Marcos Aur{\'{e}}lio Almeida and Ziane, Mikal},
  Year                     = {2012},
  Pages                    = {417--422},

  Abstract                 = {In order to migrate software products which are deemed similar into a product line, it is essential to identify the common features and the variations between the product variants. This can however be tedious and error-prone as it may involve browsing complex software and a lot of more or less similar variants. Fortunately, if artefacts of the product variants (source code files and/or models) are available, feature identification can be at least partially automated. In this paper, we thus propose a three-step approach to feature identification from source code of which the first two steps are automated. {\textcopyright} 2012 IEEE.},
  Doi                      = {10.1109/CSMR.2012.52},
  ISBN                     = {9780769546667},
  ISSN                     = {15345351}
}

@InProceedings{Ziadi2014,
  Title                    = {Towards a language-independent approach for reverse-engineering of Software Product Lines},
  Author                   = {Ziadi, Tewfik and Henard, Christopher and Papadakis, Mike and Ziane, Mikal and {Le Traon}, Yves},
  Year                     = {2014},
  Pages                    = {1064--1071},
  Publisher                = {Association for Computing Machinery},

  Abstract                 = {Common industrial practices lead to the development of similar software products. These products are usually managed in an ad-hoc way which gradually results in a low product quality. To overcome this problem, it is essential to migrate these products into a Software Product Line (SPL). Towards this direction, this paper proposes a language-independent approach capable of reverse-engineering an SPL from the source code of product variants. A prototype tool and a case study show the feasibility and the practicality of the proposed approach. Copyright 2014 ACM.},
  Doi                      = {10.1145/2554850.2554874},
  ISBN                     = {9781450324694}
}

